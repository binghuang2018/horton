#!/usr/bin/env python
#JSON {"lot": "UHF/cc-pVDZ",
#JSON  "scf": "PlainSCFSolver",
#JSON  "linalg": "CholeskyLinalgFactory",
#JSON  "difficulty": 2,
#JSON  "description": "Basic UHF example with Cholesky decomposition of the ERI"}

from horton import *  # pylint: disable=wildcard-import,unused-wildcard-import


# Load the coordinates from file.
# Use the XYZ file from HORTON's test data directory.
fn_xyz = context.get_fn('test/methyl.xyz')
mol = IOData.from_file(fn_xyz)

# Create a Gaussian basis set
obasis = get_gobasis(mol.coordinates, mol.numbers, 'cc-pVDZ')

# Create a linalg factory
lf = DenseLinalgFactory(obasis.nbasis)

# Compute Gaussian integrals
olp = obasis.compute_overlap(lf)
kin = obasis.compute_kinetic(lf)
na = obasis.compute_nuclear_attraction(mol.coordinates, mol.pseudo_numbers, lf)
er = obasis.compute_electron_repulsion(lf)

# Create alpha orbitals
exp_alpha = lf.create_expansion()
exp_beta = lf.create_expansion()

# Initial guess
guess_core_hamiltonian(olp, kin, na, exp_alpha, exp_beta)

# Construct the restricted HF effective Hamiltonian
external = {'nn': compute_nucnuc(mol.coordinates, mol.pseudo_numbers)}
terms = [
    UTwoIndexTerm(kin, 'kin'),
    UDirectTerm(er, 'hartree'),
    UExchangeTerm(er, 'x_hf'),
    UTwoIndexTerm(na, 'ne'),
]
ham = UEffHam(terms, external)

# Decide how to occupy the orbitals (5 alpha electrons, 4 beta electrons)
occ_model = AufbauOccModel(5, 4)

# Converge WFN with plain SCF
scf_solver = PlainSCFSolver(1e-6)
scf_solver(ham, lf, olp, occ_model, exp_alpha, exp_beta)

# Assign results to the molecule object and write it to a file, e.g. for
# later analysis
mol.title = 'UHF computation on methyl'
mol.energy = ham.cache['energy']
mol.obasis = obasis
mol.exp_alpha = exp_alpha
mol.exp_beta = exp_beta

# useful for visualization:
mol.to_file('methyl.molden')
# useful for post-processing (results stored in double precision)
mol.to_file('methyl.h5')

# CODE BELOW IS FOR horton-regression-test.py ONLY. IT IS NOT PART OF THE EXAMPLE.
rt_results = {
    'energy': ham.cache['energy'],
    'exp_alpha': exp_alpha.energies,
    'exp_beta': exp_beta.energies,
    'nn': ham.cache["energy_nn"],
    'kin': ham.cache["energy_kin"],
    'ne': ham.cache["energy_ne"],
    'ex': ham.cache["energy_x_hf"],
    'hartree': ham.cache["energy_hartree"],
}
# BEGIN AUTOGENERATED CODE. DO NOT CHANGE MANUALLY.
import numpy as np  # pylint: disable=wrong-import-position
rt_previous = {
    'energy': -39.554863031594934,
    'ex': -6.150578955382698,
    'exp_alpha': np.array([
        -11.261173936822942, -0.92269777217838156, -0.55507865679850166,
        -0.55507864413069186, -0.38566618064988517, 0.18000169912996483,
        0.25887873671524003, 0.25887875426095291, 0.62056366507437044,
        0.62056374522046209, 0.66529306216709538, 0.66650271114041926, 0.8619947571596891,
        0.86199479856106442, 1.0385302053757837, 1.1755536290788318, 1.1755536661460784,
        1.5830020898248607, 1.6685937625602631, 1.6685939277149322, 1.7097534185388337,
        1.8208132769560363, 2.0694337081810756, 2.0694337151175644, 2.2777640361118685,
        2.2777641824311856, 2.6335291121739135, 2.7182730880363448, 2.7182732510209133
    ]),
    'exp_beta': np.array([
        -11.235333850494197, -0.82602661058895288, -0.54105216781008225,
        -0.54105216145891066, 0.14324601968236972, 0.19874757910126756,
        0.26771035130192011, 0.26771036839318901, 0.62291244059962159, 0.6229125182595896,
        0.70499609404729846, 0.81625192779197053, 0.87777073404291395,
        0.87777077586090302, 1.078202310944417, 1.239136720964281, 1.2391367634561488,
        1.5768917882308677, 1.6727666631845888, 1.6727668243039788, 1.7865645902784379,
        1.8299308715123419, 2.1018167293915662, 2.1018167354135726, 2.2809601163539863,
        2.2809602600745187, 2.6386354482233578, 2.7281741197847058, 2.7281742830147957
    ]),
    'hartree': 27.962066921595415,
    'kin': 39.22375573361733,
    'ne': -109.66989167408862,
    'nn': 9.0797849426636361,
}
