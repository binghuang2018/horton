#!/usr/bin/env python

import numpy as np

from horton import *  # pylint: disable=wildcard-import,unused-wildcard-import


# Define the ring.
natom = 11
spacing = 1.3  # distance between two neighboring atoms in bohr
radius = spacing/(2*np.sin(np.pi/natom))

# Define the coordinates and elements.
coordinates = np.zeros((natom, 3))
numbers = np.ones(natom, dtype=int)  # must be integers
for iatom in range(natom):
    angle = (2*np.pi/natom)*iatom
    coordinates[iatom, 0] = radius*np.cos(angle)
    coordinates[iatom, 1] = radius*np.sin(angle)

# Write the molecule to an XYZ file (optional).
mol = IOData(coordinates=coordinates, numbers=numbers, title='H Ring')
mol.to_file('ring.xyz')


# CODE BELOW IS FOR horton-regression-test.py ONLY. IT IS NOT PART OF THE EXAMPLE.
rt_results = {'coordinates': mol.coordinates}
# BEGIN AUTOGENERATED CODE. DO NOT CHANGE MANUALLY.
rt_previous = {
    'coordinates': np.array([
        2.3071525963747455, 0.0, 0.0, 1.9409002724808868, 1.2473408656988467, 0.0,
        0.95842582582035096, 2.0986598198277173, 0.0, -0.32834204862486149,
        2.2836691095829882, 0.0, -1.5108636425857356, 1.7436295926805356, 0.0,
        -2.2136967052780125, 0.65000000000000002, 0.0, -2.213696705278013,
        -0.64999999999999936, 0.0, -1.5108636425857362, -1.7436295926805354, 0.0,
        -0.32834204862486199, -2.2836691095829882, 0.0, 0.95842582582035007,
        -2.0986598198277178, 0.0, 1.9409002724808868, -1.2473408656988465, 0.0
    ]).reshape(11, 3),
}
