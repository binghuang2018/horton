/* Generated by Cython 0.29.13 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_13"
#define CYTHON_HEX_VERSION 0x001D0DF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__horton__gbasis__cext
#define __PYX_HAVE_API__horton__gbasis__cext
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "horton/gbasis/boys.h"
#include "horton/gbasis/cartpure.h"
#include "horton/gbasis/common.h"
#include "horton/gbasis/fns.h"
#include "horton/gbasis/gbasis.h"
#include "horton/gbasis/ints.h"
#include "libint2.h"
#include "horton/gbasis/iter_gb.h"
#include "horton/gbasis/iter_pow.h"
#include "horton/gbasis/gbw.h"
#include "horton/gbasis/cholesky.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "horton/gbasis/cext.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":809
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_6horton_6gbasis_4cext_GBasis;
struct __pyx_obj_6horton_6gbasis_4cext_GOBasis;
struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral;
struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral;
struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral;
struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral;
struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral;
struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral;
struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral;
struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt;
struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt;
struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt;
struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt;
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn;
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn;
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn;
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn;
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn;
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn;
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn;
struct __pyx_obj_6horton_6gbasis_4cext_IterGB1;
struct __pyx_obj_6horton_6gbasis_4cext_IterGB2;
struct __pyx_obj_6horton_6gbasis_4cext_IterGB4;
struct __pyx_obj_6horton_6gbasis_4cext_IterPow1;
struct __pyx_obj_6horton_6gbasis_4cext_IterPow2;
struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset;
struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":817
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "horton/gbasis/cext.pyx":216
 * 
 * 
 * cdef class GBasis:             # <<<<<<<<<<<<<<
 *     """
 *        This class describes basis sets applied to a certain molecular structure.
 */
struct __pyx_obj_6horton_6gbasis_4cext_GBasis {
  PyObject_HEAD
  GBasis *_this;
  PyArrayObject *_centers;
  PyArrayObject *_shell_map;
  PyArrayObject *_nprims;
  PyArrayObject *_shell_types;
  PyArrayObject *_alphas;
  PyArrayObject *_con_coeffs;
};


/* "horton/gbasis/cext.pyx":626
 * 
 * 
 * cdef class GOBasis(GBasis):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 *         self._this = <gbasis.GBasis*> new gbasis.GOBasis(
 */
struct __pyx_obj_6horton_6gbasis_4cext_GOBasis {
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis __pyx_base;
};


/* "horton/gbasis/cext.pyx":1775
 * 
 * 
 * cdef class GB2Integral:             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB2Integral, for testing only'''
 *     cdef ints.GB2Integral* _this
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral {
  PyObject_HEAD
  GB2Integral *_this;
};


/* "horton/gbasis/cext.pyx":1834
 * 
 * 
 * cdef class GB2OverlapIntegral(GB2Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB2OverlapIntegral, for testing only'''
 * 
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral __pyx_base;
};


/* "horton/gbasis/cext.pyx":1841
 * 
 * 
 * cdef class GB2KineticIntegral(GB2Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB2KineticIntegral, for testing only'''
 * 
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral __pyx_base;
};


/* "horton/gbasis/cext.pyx":1848
 * 
 * 
 * cdef class GB2NuclearAttractionIntegral(GB2Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB2NuclearAttractionIntegral, for testing only'''
 *     # make an additional reference to these arguments to avoid deallocation
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral __pyx_base;
  PyArrayObject *_charges;
  PyArrayObject *_centers;
};


/* "horton/gbasis/cext.pyx":1868
 * 
 * 
 * cdef class GB2ErfAttractionIntegral(GB2Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB2ErfAttractionIntegral, for testing only'''
 *     # make an additional reference to these arguments to avoid deallocation
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral __pyx_base;
  PyArrayObject *_charges;
  PyArrayObject *_centers;
};


/* "horton/gbasis/cext.pyx":1892
 * 
 * 
 * cdef class GB2GaussAttractionIntegral(GB2Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB2GaussAttractionIntegral, for testing only'''
 *     # make an additional reference to these arguments to avoid deallocation
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral __pyx_base;
  PyArrayObject *_charges;
  PyArrayObject *_centers;
};


/* "horton/gbasis/cext.pyx":1927
 * 
 * 
 * cdef class GB4Integral:             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB4Integral'''
 *     cdef ints.GB4Integral* _this
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral {
  PyObject_HEAD
  GB4Integral *_this;
};


/* "horton/gbasis/cext.pyx":2003
 * 
 * 
 * cdef class GB4ElectronRepulsionIntegralLibInt(GB4Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only'''
 * 
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt {
  struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral __pyx_base;
};


/* "horton/gbasis/cext.pyx":2010
 * 
 * 
 * cdef class GB4ErfIntegralLibInt(GB4Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only'''
 * 
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt {
  struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral __pyx_base;
};


/* "horton/gbasis/cext.pyx":2021
 * 
 * 
 * cdef class GB4GaussIntegralLibInt(GB4Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB4GaussIntegralLibInt, for testing only'''
 * 
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt {
  struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral __pyx_base;
};


/* "horton/gbasis/cext.pyx":2036
 * 
 * 
 * cdef class GB4RAlphaIntegralLibInt(GB4Integral):             # <<<<<<<<<<<<<<
 *     '''Wrapper for ints.GB4RAlphaIntegralLibInt, for testing only'''
 * 
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt {
  struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral __pyx_base;
};


/* "horton/gbasis/cext.pyx":2052
 * 
 * 
 * cdef class GB1DMGridFn:             # <<<<<<<<<<<<<<
 *     '''Wrapper for fns.GB1DMGridFn, for testing only'''
 *     cdef fns.GB1DMGridFn* _this
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn {
  PyObject_HEAD
  GB1DMGridFn *_this;
};


/* "horton/gbasis/cext.pyx":2119
 * 
 * 
 * cdef class GB1DMGridDensityFn(GB1DMGridFn):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridDensityFn(max_nbasis))
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn {
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn __pyx_base;
};


/* "horton/gbasis/cext.pyx":2124
 * 
 * 
 * cdef class GB1DMGridGradientFn(GB1DMGridFn):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGradientFn(max_nbasis))
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn {
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn __pyx_base;
};


/* "horton/gbasis/cext.pyx":2129
 * 
 * 
 * cdef class GB1DMGridGGAFn(GB1DMGridFn):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGGAFn(max_nbasis))
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn {
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn __pyx_base;
};


/* "horton/gbasis/cext.pyx":2134
 * 
 * 
 * cdef class GB1DMGridKineticFn(GB1DMGridFn):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridKineticFn(max_nbasis))
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn {
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn __pyx_base;
};


/* "horton/gbasis/cext.pyx":2139
 * 
 * 
 * cdef class GB1DMGridHessianFn(GB1DMGridFn):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridHessianFn(max_nbasis))
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn {
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn __pyx_base;
};


/* "horton/gbasis/cext.pyx":2144
 * 
 * 
 * cdef class GB1DMGridMGGAFn(GB1DMGridFn):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridMGGAFn(max_nbasis))
 */
struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn {
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn __pyx_base;
};


/* "horton/gbasis/cext.pyx":2154
 * 
 * 
 * cdef class IterGB1:             # <<<<<<<<<<<<<<
 *     """Wrapper for the IterGB1 class, for testing only."""
 *     cdef iter_gb.IterGB1* _this
 */
struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 {
  PyObject_HEAD
  IterGB1 *_this;
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *_gbasis;
};


/* "horton/gbasis/cext.pyx":2207
 * 
 * 
 * cdef class IterGB2:             # <<<<<<<<<<<<<<
 *     """Wrapper for the IterGB2 class, for testing only."""
 *     cdef iter_gb.IterGB2* _this
 */
struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 {
  PyObject_HEAD
  IterGB2 *_this;
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *_gbasis;
};


/* "horton/gbasis/cext.pyx":2263
 * 
 * 
 * cdef class IterGB4:             # <<<<<<<<<<<<<<
 *     """Wrapper for the IterGB4 class, for testing only."""
 *     cdef iter_gb.IterGB4* _this
 */
struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 {
  PyObject_HEAD
  IterGB4 *_this;
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *_gbasis;
};


/* "horton/gbasis/cext.pyx":2336
 * 
 * 
 * cdef class IterPow1:             # <<<<<<<<<<<<<<
 *     """Wrapper for the IterPow1 class, for testing only."""
 *     cdef iter_pow.IterPow1* _c_i1p
 */
struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 {
  PyObject_HEAD
  IterPow1 *_c_i1p;
};


/* "horton/gbasis/cext.pyx":2362
 * 
 * 
 * cdef class IterPow2:             # <<<<<<<<<<<<<<
 *     """Wrapper for the IterPow2 class, for testing only."""
 *     cdef iter_pow.IterPow2* _c_i2p
 */
struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 {
  PyObject_HEAD
  IterPow2 *_c_i2p;
};


/* "horton/gbasis/cext.pyx":532
 *         self._this.compute_grid_point1(&output[0], &point[0], grid_fn._this)
 * 
 *     def get_subset(self, ishells):             # <<<<<<<<<<<<<<
 *         '''Construct a sub basis set for a selection of shells
 * 
 */
struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset {
  PyObject_HEAD
  PyObject *__pyx_v_ishell;
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self;
};


/* "horton/gbasis/cext.pyx":576
 *         ibasis_list = []
 *         for new_ishell, ishell in enumerate(ishells):
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))             # <<<<<<<<<<<<<<
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])
 *             ibasis_list.extend(range(ibasis_old, ibasis_old+nbasis))
 */
struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
#define __Pyx_BufPtrStrided4d(type, buf, i0, s0, i1, s1, i2, s2, i3, s3) (type)((char*)buf + i0 * s0 + i1 * s1 + i2 * s2 + i3 * s3)
#define __Pyx_BufPtrStrided3d(type, buf, i0, s0, i1, s1, i2, s2) (type)((char*)buf + i0 * s0 + i1 * s1 + i2 * s2)
/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'libc' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'horton.gbasis.boys' */

/* Module declarations from 'horton.gbasis.cartpure' */

/* Module declarations from 'horton.gbasis.common' */

/* Module declarations from 'horton.gbasis.fns' */

/* Module declarations from 'horton.gbasis.gbasis' */

/* Module declarations from 'horton.gbasis.ints' */

/* Module declarations from 'horton.gbasis.iter_gb' */

/* Module declarations from 'horton.gbasis.iter_pow' */

/* Module declarations from 'horton.gbasis.gbw' */

/* Module declarations from 'horton.gbasis.cholesky' */

/* Module declarations from 'horton.gbasis.cext' */
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GBasis = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GOBasis = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB2Integral = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB2OverlapIntegral = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB2KineticIntegral = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB2ErfAttractionIntegral = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB2GaussAttractionIntegral = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB4Integral = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB4ErfIntegralLibInt = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB4GaussIntegralLibInt = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridDensityFn = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGradientFn = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGGAFn = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridKineticFn = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridHessianFn = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridMGGAFn = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_IterGB1 = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_IterGB2 = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_IterGB4 = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_IterPow1 = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext_IterPow2 = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext___pyx_scope_struct__get_subset = 0;
static PyTypeObject *__pyx_ptype_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr = 0;
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_long = { "long", NULL, sizeof(long), { 0 }, 0, IS_UNSIGNED(long) ? 'U' : 'I', IS_UNSIGNED(long), 0 };
#define __Pyx_MODULE_NAME "horton.gbasis.cext"
extern int __pyx_module_is_main_horton__gbasis__cext;
int __pyx_module_is_main_horton__gbasis__cext = 0;

/* Implementation of 'horton.gbasis.cext' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_P[] = "P";
static const char __pyx_k_S[] = "S";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_Dc[] = "Dc";
static const char __pyx_k_Dp[] = "Dp";
static const char __pyx_k_Fc[] = "Fc";
static const char __pyx_k_Fp[] = "Fp";
static const char __pyx_k_Gc[] = "Gc";
static const char __pyx_k_Gp[] = "Gp";
static const char __pyx_k_Hc[] = "Hc";
static const char __pyx_k_Hp[] = "Hp";
static const char __pyx_k_Ic[] = "Ic";
static const char __pyx_k_Ip[] = "Ip";
static const char __pyx_k_cp[] = "cp";
static const char __pyx_k_dm[] = "dm";
static const char __pyx_k_lf[] = "lf";
static const char __pyx_k_mu[] = "mu";
static const char __pyx_k_n0[] = "n0";
static const char __pyx_k_n1[] = "n1";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pa[] = "pa";
static const char __pyx_k_pb[] = "pb";
static const char __pyx_k_r0[] = "r0";
static const char __pyx_k_r1[] = "r1";
static const char __pyx_k_r2[] = "r2";
static const char __pyx_k_r3[] = "r3";
static const char __pyx_k__18[] = "";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_cit[] = "cit";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_fac[] = "fac";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_s_i[] = " %s%i";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_xyz[] = "xyz";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_cite[] = "cite";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dims[] = "dims";
static const char __pyx_k_fac2[] = "fac2";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_fock[] = "fock";
static const char __pyx_k_gb4w[] = "gb4w";
static const char __pyx_k_jfac[] = "jfac";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mmax[] = "mmax";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_nant[] = "nant";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_nocc[] = "nocc";
static const char __pyx_k_nvec[] = "nvec";
static const char __pyx_k_pots[] = "pots";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_view[] = "view";
static const char __pyx_k_work[] = "work";
static const char __pyx_k_all_2[] = "__all__";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_binom[] = "binom";
static const char __pyx_k_blank[] = "blank";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_coeff[] = "coeff";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_iorbs[] = "iorbs";
static const char __pyx_k_npost[] = "npost";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pend0[] = "pend0";
static const char __pyx_k_pend2[] = "pend2";
static const char __pyx_k_point[] = "point";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_slice[] = "slice";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_GBasis[] = "GBasis";
static const char __pyx_k_alpha0[] = "alpha0";
static const char __pyx_k_alpha1[] = "alpha1";
static const char __pyx_k_alpha2[] = "alpha2";
static const char __pyx_k_alpha3[] = "alpha3";
static const char __pyx_k_alphas[] = "alphas";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_atexit[] = "atexit";
static const char __pyx_k_biblio[] = "biblio";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_coeffs[] = "coeffs";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_extend[] = "extend";
static const char __pyx_k_gb4int[] = "gb4int";
static const char __pyx_k_gbasis[] = "gbasis";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_index0[] = "index0";
static const char __pyx_k_index2[] = "index2";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_nbasis[] = "nbasis";
static const char __pyx_k_nprims[] = "nprims";
static const char __pyx_k_nshell[] = "nshell";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_shape0[] = "shape0";
static const char __pyx_k_shape1[] = "shape1";
static const char __pyx_k_shape2[] = "shape2";
static const char __pyx_k_shape3[] = "shape3";
static const char __pyx_k_work_g[] = "work_g";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_GOBasis[] = "GOBasis";
static const char __pyx_k_IterGB1[] = "IterGB1";
static const char __pyx_k_IterGB2[] = "IterGB2";
static const char __pyx_k_IterGB4[] = "IterGB4";
static const char __pyx_k_array_2[] = "_array";
static const char __pyx_k_centers[] = "centers";
static const char __pyx_k_charges[] = "charges";
static const char __pyx_k_deflist[] = "deflist";
static const char __pyx_k_dtaylor[] = "dtaylor";
static const char __pyx_k_epsilon[] = "epsilon";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_gobasis[] = "gobasis";
static const char __pyx_k_grid_fn[] = "grid_fn";
static const char __pyx_k_ncenter[] = "ncenter";
static const char __pyx_k_nscales[] = "nscales";
static const char __pyx_k_pbegin0[] = "pbegin0";
static const char __pyx_k_pbegin2[] = "pbegin2";
static const char __pyx_k_scales0[] = "scales0";
static const char __pyx_k_scales1[] = "scales1";
static const char __pyx_k_scales2[] = "scales2";
static const char __pyx_k_scales3[] = "scales3";
static const char __pyx_k_tfactor[] = "tfactor";
static const char __pyx_k_vectors[] = "vectors";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_IterPow1[] = "IterPow1";
static const char __pyx_k_IterPow2[] = "IterPow2";
static const char __pyx_k_diagonal[] = "diagonal";
static const char __pyx_k_dim_work[] = "dim_work";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_gill1996[] = "gill1996";
static const char __pyx_k_log_init[] = "_log_init";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_Center_5i[] = "Center % 5i";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_do_medium[] = "do_medium";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_from_hdf5[] = "from_hdf5";
static const char __pyx_k_gamma_inv[] = "gamma_inv";
static const char __pyx_k_gpt_coeff[] = "gpt_coeff";
static const char __pyx_k_inv_gamma[] = "inv_gamma";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_result_py[] = "result_py";
static const char __pyx_k_shell_map[] = "shell_map";
static const char __pyx_k_threshold[] = "threshold";
static const char __pyx_k_work_cart[] = "work_cart";
static const char __pyx_k_work_pure[] = "work_pure";
static const char __pyx_k_writeable[] = "writeable";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_con_coeffs[] = "con_coeffs";
static const char __pyx_k_dim_output[] = "dim_output";
static const char __pyx_k_get_subset[] = "get_subset";
static const char __pyx_k_horton_log[] = "horton.log";
static const char __pyx_k_max_nbasis[] = "max_nbasis";
static const char __pyx_k_shell_type[] = "shell_type";
static const char __pyx_k_valeev2014[] = "valeev2014";
static const char __pyx_k_GB1DMGridFn[] = "GB1DMGridFn";
static const char __pyx_k_GB2Integral[] = "GB2Integral";
static const char __pyx_k_GB4Integral[] = "GB4Integral";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_coordinates[] = "coordinates";
static const char __pyx_k_horton_cext[] = "horton.cext";
static const char __pyx_k_shell_type0[] = "shell_type0";
static const char __pyx_k_shell_type1[] = "shell_type1";
static const char __pyx_k_shell_type2[] = "shell_type2";
static const char __pyx_k_shell_type3[] = "shell_type3";
static const char __pyx_k_shell_types[] = "shell_types";
static const char __pyx_k_C_CONTIGUOUS[] = "C_CONTIGUOUS";
static const char __pyx_k_C_extensions[] = "C++ extensions";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_ahlrichs2006[] = "ahlrichs2006";
static const char __pyx_k_horton_utils[] = "horton.utils";
static const char __pyx_k_need_numbers[] = "need_numbers";
static const char __pyx_k_toulouse2004[] = "toulouse2004";
static const char __pyx_k_Initialized_s[] = "Initialized: %s";
static const char __pyx_k_LinalgFactory[] = "LinalgFactory";
static const char __pyx_k_boys_function[] = "boys_function";
static const char __pyx_k_horton_matrix[] = "horton.matrix";
static const char __pyx_k_iter_pow1_inc[] = "iter_pow1_inc";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_select_2index[] = "select_2index";
static const char __pyx_k_typecheck_geo[] = "typecheck_geo";
static const char __pyx_k_GB1DMGridGGAFn[] = "GB1DMGridGGAFn";
static const char __pyx_k_max_shell_type[] = "max_shell_type";
static const char __pyx_k_GB1DMGridMGGAFn[] = "GB1DMGridMGGAFn";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cart_to_pure_low[] = "cart_to_pure_low";
static const char __pyx_k_compute_cholesky[] = "compute_cholesky";
static const char __pyx_k_compute_diagonal[] = "compute_diagonal";
static const char __pyx_k_compute_grid1_dm[] = "_compute_grid1_dm";
static const char __pyx_k_create_two_index[] = "create_two_index";
static const char __pyx_k_gb_overlap_int1d[] = "gb_overlap_int1d";
static const char __pyx_k_get_2index_slice[] = "get_2index_slice";
static const char __pyx_k_get_shell_nbasis[] = "get_shell_nbasis";
static const char __pyx_k_create_four_index[] = "create_four_index";
static const char __pyx_k_GB1DMGridDensityFn[] = "GB1DMGridDensityFn";
static const char __pyx_k_GB1DMGridHessianFn[] = "GB1DMGridHessianFn";
static const char __pyx_k_GB1DMGridKineticFn[] = "GB1DMGridKineticFn";
static const char __pyx_k_GB2KineticIntegral[] = "GB2KineticIntegral";
static const char __pyx_k_GB2OverlapIntegral[] = "GB2OverlapIntegral";
static const char __pyx_k_Maximum_shell_type[] = "Maximum shell type";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_compute_grid1_fock[] = "_compute_grid1_fock";
static const char __pyx_k_get_max_shell_type[] = "get_max_shell_type";
static const char __pyx_k_horton_gbasis_cext[] = "horton.gbasis.cext";
static const char __pyx_k_GB1DMGridGradientFn[] = "GB1DMGridGradientFn";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_boys_function_array[] = "boys_function_array";
static const char __pyx_k_check_matrix_coeffs[] = "check_matrix_coeffs";
static const char __pyx_k_compute_grid_nucpot[] = "compute_grid_nucpot";
static const char __pyx_k_GB4ErfIntegralLibInt[] = "GB4ErfIntegralLibInt";
static const char __pyx_k_CholeskyLinalgFactory[] = "CholeskyLinalgFactory";
static const char __pyx_k_GB4GaussIntegralLibInt[] = "GB4GaussIntegralLibInt";
static const char __pyx_k_check_matrix_two_index[] = "check_matrix_two_index";
static const char __pyx_k_gob_cart_normalization[] = "gob_cart_normalization";
static const char __pyx_k_gob_pure_normalization[] = "gob_pure_normalization";
static const char __pyx_k_horton_gbasis_cext_pyx[] = "horton/gbasis/cext.pyx";
static const char __pyx_k_libint2_static_cleanup[] = "libint2_static_cleanup";
static const char __pyx_k_GB4RAlphaIntegralLibInt[] = "GB4RAlphaIntegralLibInt";
static const char __pyx_k_check_matrix_four_index[] = "check_matrix_four_index";
static const char __pyx_k_compute_grid_hartree_dm[] = "compute_grid_hartree_dm";
static const char __pyx_k_ishell_out_of_range_i_0[] = "ishell out of range: %i < 0";
static const char __pyx_k_ishell_out_of_range_i_s[] = "ishell out of range: %i >= %s";
static const char __pyx_k_GB2ErfAttractionIntegral[] = "GB2ErfAttractionIntegral";
static const char __pyx_k_Number_of_basis_functions[] = "Number of basis functions";
static const char __pyx_k_alphas_must_be_a_1D_array[] = "alphas must be a 1D array";
static const char __pyx_k_get_subset_locals_genexpr[] = "get_subset.<locals>.genexpr";
static const char __pyx_k_nprims_must_be_a_1D_array[] = "nprims must be a 1D array";
static const char __pyx_k_nuclear_attraction_helper[] = "nuclear_attraction_helper";
static const char __pyx_k_GB2GaussAttractionIntegral[] = "GB2GaussAttractionIntegral";
static const char __pyx_k_centers_must_be_a_2D_array[] = "centers must be a 2D array";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_GB2NuclearAttractionIntegral[] = "GB2NuclearAttractionIntegral";
static const char __pyx_k_shell_map_must_be_a_1D_array[] = "shell_map must be a 1D array";
static const char __pyx_k_con_coeffs_must_be_a_1D_array[] = "con_coeffs must be a 1D array";
static const char __pyx_k_shell_type_1_is_not_supported[] = "shell_type -1 is not supported.";
static const char __pyx_k_shell_types_must_be_a_1D_array[] = "shell_types must be a 1D array";
static const char __pyx_k_The_length_of_alphas_must_equal[] = "The length of alphas must equal the total number of primitives.";
static const char __pyx_k_alphas_and_con_coeffs_must_have[] = "alphas and con_coeffs must have the same length.";
static const char __pyx_k_centers_must_have_three_columns[] = "centers must have three columns.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_the_efficient_implementation_of[] = "the efficient implementation of four-center electron repulsion integrals";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_A_shell_type_parameter_can_not_b[] = "A shell_type parameter can not be negative.";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_GB4ElectronRepulsionIntegralLibI[] = "GB4ElectronRepulsionIntegralLibInt";
static const char __pyx_k_GBasis_is_an_abstract_base_class[] = "GBasis is an abstract base class";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Number_of_normalization_constant[] = "Number of normalization constants";
static const char __pyx_k_The_shell_type_1_is_not_supporte[] = "The shell_type -1 is not supported.";
static const char __pyx_k_four_center_integrals_with_a_Gau[] = "four-center integrals with a Gaussian interaction potential.";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_nprims_and_shell_map_must_have_t[] = "nprims and shell_map must have the same length.";
static const char __pyx_k_nprims_elements_must_be_strictly[] = "nprims elements must be strictly positive.";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self__this_cannot_be_converted_t[] = "self._this cannot be converted to a Python object for pickling";
static const char __pyx_k_shell_map_can_not_contain_negati[] = "shell_map can not contain negative values.";
static const char __pyx_k_shell_map_can_not_contain_values[] = "shell_map can not contain values larger than the number of centers.";
static const char __pyx_k_shell_types_and_shell_map_must_h[] = "shell_types and shell_map must have the same length.";
static const char __pyx_k_the_methodology_to_implement_var[] = "the methodology to implement various types of four-center integrals.";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_A_shell_type_parameter_can_not_b;
static PyObject *__pyx_n_s_C_CONTIGUOUS;
static PyObject *__pyx_kp_s_Center_5i;
static PyObject *__pyx_n_s_CholeskyLinalgFactory;
static PyObject *__pyx_n_s_Dc;
static PyObject *__pyx_n_s_Dp;
static PyObject *__pyx_n_s_Fc;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_Fp;
static PyObject *__pyx_n_s_GB1DMGridDensityFn;
static PyObject *__pyx_n_s_GB1DMGridFn;
static PyObject *__pyx_n_s_GB1DMGridGGAFn;
static PyObject *__pyx_n_s_GB1DMGridGradientFn;
static PyObject *__pyx_n_s_GB1DMGridHessianFn;
static PyObject *__pyx_n_s_GB1DMGridKineticFn;
static PyObject *__pyx_n_s_GB1DMGridMGGAFn;
static PyObject *__pyx_n_s_GB2ErfAttractionIntegral;
static PyObject *__pyx_n_s_GB2GaussAttractionIntegral;
static PyObject *__pyx_n_s_GB2Integral;
static PyObject *__pyx_n_s_GB2KineticIntegral;
static PyObject *__pyx_n_s_GB2NuclearAttractionIntegral;
static PyObject *__pyx_n_s_GB2OverlapIntegral;
static PyObject *__pyx_n_s_GB4ElectronRepulsionIntegralLibI;
static PyObject *__pyx_n_s_GB4ErfIntegralLibInt;
static PyObject *__pyx_n_s_GB4GaussIntegralLibInt;
static PyObject *__pyx_n_s_GB4Integral;
static PyObject *__pyx_n_s_GB4RAlphaIntegralLibInt;
static PyObject *__pyx_n_s_GBasis;
static PyObject *__pyx_kp_s_GBasis_is_an_abstract_base_class;
static PyObject *__pyx_n_s_GOBasis;
static PyObject *__pyx_n_s_Gc;
static PyObject *__pyx_n_s_Gp;
static PyObject *__pyx_n_s_Hc;
static PyObject *__pyx_n_s_Hp;
static PyObject *__pyx_n_s_Ic;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Initialized_s;
static PyObject *__pyx_n_s_Ip;
static PyObject *__pyx_n_s_IterGB1;
static PyObject *__pyx_n_s_IterGB2;
static PyObject *__pyx_n_s_IterGB4;
static PyObject *__pyx_n_s_IterPow1;
static PyObject *__pyx_n_s_IterPow2;
static PyObject *__pyx_n_s_LinalgFactory;
static PyObject *__pyx_kp_s_Maximum_shell_type;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_Number_of_basis_functions;
static PyObject *__pyx_kp_s_Number_of_normalization_constant;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_kp_s_The_length_of_alphas_must_equal;
static PyObject *__pyx_kp_s_The_shell_type_1_is_not_supporte;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_n_s_abs;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_ahlrichs2006;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_all_2;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_alpha0;
static PyObject *__pyx_n_s_alpha1;
static PyObject *__pyx_n_s_alpha2;
static PyObject *__pyx_n_s_alpha3;
static PyObject *__pyx_n_s_alphas;
static PyObject *__pyx_kp_s_alphas_and_con_coeffs_must_have;
static PyObject *__pyx_kp_s_alphas_must_be_a_1D_array;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_array_2;
static PyObject *__pyx_n_s_atexit;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_biblio;
static PyObject *__pyx_n_s_binom;
static PyObject *__pyx_n_s_blank;
static PyObject *__pyx_n_s_boys_function;
static PyObject *__pyx_n_s_boys_function_array;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cart_to_pure_low;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_n_s_centers;
static PyObject *__pyx_kp_s_centers_must_be_a_2D_array;
static PyObject *__pyx_kp_s_centers_must_have_three_columns;
static PyObject *__pyx_n_s_charges;
static PyObject *__pyx_n_s_check_matrix_coeffs;
static PyObject *__pyx_n_s_check_matrix_four_index;
static PyObject *__pyx_n_s_check_matrix_two_index;
static PyObject *__pyx_n_s_cit;
static PyObject *__pyx_n_s_cite;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_coeff;
static PyObject *__pyx_n_s_coeffs;
static PyObject *__pyx_n_s_compute_cholesky;
static PyObject *__pyx_n_s_compute_diagonal;
static PyObject *__pyx_n_s_compute_grid1_dm;
static PyObject *__pyx_n_s_compute_grid1_fock;
static PyObject *__pyx_n_s_compute_grid_hartree_dm;
static PyObject *__pyx_n_s_compute_grid_nucpot;
static PyObject *__pyx_n_s_con_coeffs;
static PyObject *__pyx_kp_s_con_coeffs_must_be_a_1D_array;
static PyObject *__pyx_n_s_concatenate;
static PyObject *__pyx_n_s_coordinates;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_cp;
static PyObject *__pyx_n_s_create_four_index;
static PyObject *__pyx_n_s_create_two_index;
static PyObject *__pyx_n_s_deflist;
static PyObject *__pyx_n_s_diagonal;
static PyObject *__pyx_n_s_dim;
static PyObject *__pyx_n_s_dim_output;
static PyObject *__pyx_n_s_dim_work;
static PyObject *__pyx_n_s_dims;
static PyObject *__pyx_n_s_dm;
static PyObject *__pyx_n_s_do_medium;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtaylor;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_epsilon;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_extend;
static PyObject *__pyx_n_s_fac;
static PyObject *__pyx_n_s_fac2;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_fock;
static PyObject *__pyx_kp_s_four_center_integrals_with_a_Gau;
static PyObject *__pyx_n_s_from_hdf5;
static PyObject *__pyx_n_s_gamma_inv;
static PyObject *__pyx_n_s_gb4int;
static PyObject *__pyx_n_s_gb4w;
static PyObject *__pyx_n_s_gb_overlap_int1d;
static PyObject *__pyx_n_s_gbasis;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_2index_slice;
static PyObject *__pyx_n_s_get_max_shell_type;
static PyObject *__pyx_n_s_get_shell_nbasis;
static PyObject *__pyx_n_s_get_subset;
static PyObject *__pyx_n_s_get_subset_locals_genexpr;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_gill1996;
static PyObject *__pyx_n_s_gob_cart_normalization;
static PyObject *__pyx_n_s_gob_pure_normalization;
static PyObject *__pyx_n_s_gobasis;
static PyObject *__pyx_n_s_gpt_coeff;
static PyObject *__pyx_n_s_grid_fn;
static PyObject *__pyx_n_s_horton_cext;
static PyObject *__pyx_n_s_horton_gbasis_cext;
static PyObject *__pyx_kp_s_horton_gbasis_cext_pyx;
static PyObject *__pyx_n_s_horton_log;
static PyObject *__pyx_n_s_horton_matrix;
static PyObject *__pyx_n_s_horton_utils;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_index0;
static PyObject *__pyx_n_s_index2;
static PyObject *__pyx_n_s_inv_gamma;
static PyObject *__pyx_n_s_iorbs;
static PyObject *__pyx_kp_s_ishell_out_of_range_i_0;
static PyObject *__pyx_kp_s_ishell_out_of_range_i_s;
static PyObject *__pyx_n_s_iter_pow1_inc;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_jfac;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_lf;
static PyObject *__pyx_n_s_libint2_static_cleanup;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_log_init;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_nbasis;
static PyObject *__pyx_n_s_max_shell_type;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_mmax;
static PyObject *__pyx_n_s_mu;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n0;
static PyObject *__pyx_n_s_n1;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_nant;
static PyObject *__pyx_n_s_nbasis;
static PyObject *__pyx_n_s_ncenter;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_need_numbers;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_nocc;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_npost;
static PyObject *__pyx_n_s_nprims;
static PyObject *__pyx_kp_s_nprims_and_shell_map_must_have_t;
static PyObject *__pyx_kp_s_nprims_elements_must_be_strictly;
static PyObject *__pyx_kp_s_nprims_must_be_a_1D_array;
static PyObject *__pyx_n_s_nscales;
static PyObject *__pyx_n_s_nshell;
static PyObject *__pyx_n_s_nuclear_attraction_helper;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nvec;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_pa;
static PyObject *__pyx_n_s_pb;
static PyObject *__pyx_n_s_pbegin0;
static PyObject *__pyx_n_s_pbegin2;
static PyObject *__pyx_n_s_pend0;
static PyObject *__pyx_n_s_pend2;
static PyObject *__pyx_n_s_point;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_s_pots;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_r0;
static PyObject *__pyx_n_s_r1;
static PyObject *__pyx_n_s_r2;
static PyObject *__pyx_n_s_r3;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_py;
static PyObject *__pyx_kp_s_s_i;
static PyObject *__pyx_n_s_scales0;
static PyObject *__pyx_n_s_scales1;
static PyObject *__pyx_n_s_scales2;
static PyObject *__pyx_n_s_scales3;
static PyObject *__pyx_n_s_select_2index;
static PyObject *__pyx_kp_s_self__this_cannot_be_converted_t;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shape0;
static PyObject *__pyx_n_s_shape1;
static PyObject *__pyx_n_s_shape2;
static PyObject *__pyx_n_s_shape3;
static PyObject *__pyx_n_s_shell_map;
static PyObject *__pyx_kp_s_shell_map_can_not_contain_negati;
static PyObject *__pyx_kp_s_shell_map_can_not_contain_values;
static PyObject *__pyx_kp_s_shell_map_must_be_a_1D_array;
static PyObject *__pyx_n_s_shell_type;
static PyObject *__pyx_n_s_shell_type0;
static PyObject *__pyx_n_s_shell_type1;
static PyObject *__pyx_n_s_shell_type2;
static PyObject *__pyx_n_s_shell_type3;
static PyObject *__pyx_kp_s_shell_type_1_is_not_supported;
static PyObject *__pyx_n_s_shell_types;
static PyObject *__pyx_kp_s_shell_types_and_shell_map_must_h;
static PyObject *__pyx_kp_s_shell_types_must_be_a_1D_array;
static PyObject *__pyx_n_s_slice;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_tfactor;
static PyObject *__pyx_kp_s_the_efficient_implementation_of;
static PyObject *__pyx_kp_s_the_methodology_to_implement_var;
static PyObject *__pyx_n_s_threshold;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_toulouse2004;
static PyObject *__pyx_n_s_typecheck_geo;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_valeev2014;
static PyObject *__pyx_n_s_vectors;
static PyObject *__pyx_n_s_view;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_work;
static PyObject *__pyx_n_s_work_cart;
static PyObject *__pyx_n_s_work_g;
static PyObject *__pyx_n_s_work_pure;
static PyObject *__pyx_n_s_writeable;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_xyz;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_6horton_6gbasis_4cext_boys_function(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_m, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_2boys_function_array(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_mmax, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_4cart_to_pure_low(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_work_cart, PyArrayObject *__pyx_v_work_pure, long __pyx_v_shell_type, long __pyx_v_nant, long __pyx_v_npost); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6compute_cholesky(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_gb4int, double __pyx_v_threshold, PyObject *__pyx_v_lf); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8fac(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_10fac2(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_12binom(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n, long __pyx_v_m); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_14get_shell_nbasis(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_shell_type); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_16get_max_shell_type(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18gpt_coeff(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_k, long __pyx_v_n0, long __pyx_v_n1, double __pyx_v_pa, double __pyx_v_pb); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_20gb_overlap_int1d(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n0, long __pyx_v_n1, double __pyx_v_pa, double __pyx_v_pb, double __pyx_v_inv_gamma); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_22nuclear_attraction_helper(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_work_g, long __pyx_v_n0, long __pyx_v_n1, double __pyx_v_pa, double __pyx_v_pb, double __pyx_v_cp, double __pyx_v_gamma_inv); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_24cit(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_i, double __pyx_v_t, int __pyx_v_m); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_26jfac(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_j, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_28dtaylor(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_n, double __pyx_v_alpha, double __pyx_v_t, double __pyx_v_tfactor); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_30gob_cart_normalization(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_alpha, PyArrayObject *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_32gob_pure_normalization(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_alpha, long __pyx_v_l); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_6GBasis___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_centers, PyObject *__pyx_v_shell_map, PyObject *__pyx_v_nprims, PyObject *__pyx_v_shell_types, PyObject *__pyx_v_alphas, PyObject *__pyx_v_con_coeffs); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_6GBasis_2__init__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_centers, CYTHON_UNUSED PyObject *__pyx_v_shell_map, CYTHON_UNUSED PyObject *__pyx_v_nprims, CYTHON_UNUSED PyObject *__pyx_v_shell_types, CYTHON_UNUSED PyObject *__pyx_v_alphas, CYTHON_UNUSED PyObject *__pyx_v_con_coeffs); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_6GBasis_4__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6concatenate(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_gbs); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_8from_hdf5(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_grp); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_10to_hdf5(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_grp); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_7centers___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_9shell_map___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6nprims___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_11shell_types___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6alphas___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_10con_coeffs___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_7ncenter___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6nshell___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_11nprim_total___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_12shell_lookup___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_13basis_offsets___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_7nscales___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_12_log_init(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_14get_scales(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_16compute_grid_point1(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyArrayObject *__pyx_v_output, PyArrayObject *__pyx_v_point, struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_10get_subset_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_18get_subset(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_ishells); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_20get_basis_atoms(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_coordinates); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_7GOBasis___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_centers, CYTHON_UNUSED PyObject *__pyx_v_shell_map, CYTHON_UNUSED PyObject *__pyx_v_nprims, CYTHON_UNUSED PyObject *__pyx_v_shell_types, CYTHON_UNUSED PyObject *__pyx_v_alphas, CYTHON_UNUSED PyObject *__pyx_v_con_coeffs); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_2check_matrix_coeffs(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_matrix, PyObject *__pyx_v_nocc); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_4check_matrix_two_index(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_6check_matrix_four_index(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_8compute_overlap(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_10compute_kinetic(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_12compute_nuclear_attraction(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_14compute_erf_attraction(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyObject *__pyx_v_output, double __pyx_v_mu); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_16compute_gauss_attraction(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyObject *__pyx_v_output, double __pyx_v_c, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_18compute_multipole_moment(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_xyz, PyArrayObject *__pyx_v_center, PyObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_20compute_electron_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_22compute_erf_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output, double __pyx_v_mu); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_24compute_gauss_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output, double __pyx_v_c, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_26compute_ralpha_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_28compute_grid_orbitals_exp(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_exp, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_iorbs, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_30compute_grid_orb_gradient_exp(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_exp, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_iorbs, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_32_compute_grid1_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn, PyArrayObject *__pyx_v_output, double __pyx_v_epsilon); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_34compute_grid_density_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output, double __pyx_v_epsilon); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_36compute_grid_gradient_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_38compute_grid_gga_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_40compute_grid_kinetic_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_42compute_grid_hessian_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_44compute_grid_mgga_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_46compute_grid_hartree_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_48compute_grid_esp_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_50_compute_grid1_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn, PyObject *__pyx_v_fock); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_52compute_grid_density_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_54compute_grid_gradient_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_56compute_grid_gga_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_58compute_grid_kinetic_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_60compute_grid_hessian_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_62compute_grid_mgga_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_34select_2index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, long __pyx_v_index0, long __pyx_v_index2); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_36compute_diagonal(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, PyArrayObject *__pyx_v_diagonal); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_38get_2index_slice(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, long __pyx_v_index0, long __pyx_v_index2, PyArrayObject *__pyx_v_slice); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_11GB2Integral___dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_5nwork___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_10max_nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_2reset(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, long __pyx_v_shell_type0, long __pyx_v_shell_type1, PyArrayObject *__pyx_v_r0, PyArrayObject *__pyx_v_r1); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_4add(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, double __pyx_v_coeff, double __pyx_v_alpha0, double __pyx_v_alpha1, PyArrayObject *__pyx_v_scales0, PyArrayObject *__pyx_v_scales1); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_6cart_to_pure(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_8get_work(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, PyObject *__pyx_v_shape0, PyObject *__pyx_v_shape1); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *__pyx_v_self, long __pyx_v_max_nbasis, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_centers); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self, long __pyx_v_max_nbasis, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_centers, double __pyx_v_mu); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2mu___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self, long __pyx_v_max_nbasis, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_centers, double __pyx_v_c, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1c___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5alpha___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_40libint2_static_cleanup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_11GB4Integral___dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_5nwork___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_10max_nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_2reset(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, long __pyx_v_shell_type0, long __pyx_v_shell_type1, long __pyx_v_shell_type2, long __pyx_v_shell_type3, PyArrayObject *__pyx_v_r0, PyArrayObject *__pyx_v_r1, PyArrayObject *__pyx_v_r2, PyArrayObject *__pyx_v_r3); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_4add(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, double __pyx_v_coeff, double __pyx_v_alpha0, double __pyx_v_alpha1, double __pyx_v_alpha2, double __pyx_v_alpha3, PyArrayObject *__pyx_v_scales0, PyArrayObject *__pyx_v_scales1, PyArrayObject *__pyx_v_scales2, PyArrayObject *__pyx_v_scales3); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_6cart_to_pure(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_8get_work(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, PyObject *__pyx_v_shape0, PyObject *__pyx_v_shape1, PyObject *__pyx_v_shape2, PyObject *__pyx_v_shape3); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis, double __pyx_v_mu); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2mu___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis, double __pyx_v_c, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1c___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5alpha___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis, double __pyx_v_alpha); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5alpha___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn___dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_5nwork___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10max_nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_11shell_type0___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_8dim_work___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10dim_output___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_2reset(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, long __pyx_v_shell_type0, PyArrayObject *__pyx_v_r0, PyArrayObject *__pyx_v_point); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_4add(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, double __pyx_v_coeff, double __pyx_v_alpha0, PyArrayObject *__pyx_v_scales0); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_6cart_to_pure(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_8get_work(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, PyObject *__pyx_v_shape0); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *__pyx_v_self, long __pyx_v_max_nbasis); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_7IterGB1___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self, struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_7IterGB1_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_4inc_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_6update_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_8inc_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_10update_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_12store(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self, PyArrayObject *__pyx_v_work, PyArrayObject *__pyx_v_output, long __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_13public_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_14private_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_7IterGB2___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self, struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_7IterGB2_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_4inc_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_6update_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_8inc_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_10update_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_12store(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self, PyArrayObject *__pyx_v_work, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_13public_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_14private_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_7IterGB4___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self, struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_7IterGB4_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_4inc_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_6update_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_8inc_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_10update_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_12store(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self, PyArrayObject *__pyx_v_work, PyArrayObject *__pyx_v_output); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_13public_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_14private_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_42iter_pow1_inc(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_n); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_8IterPow1___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_8IterPow1_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_8IterPow1_4__init__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self, long __pyx_v_shell_type0); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_6inc(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_6fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_8IterPow2___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self); /* proto */
static void __pyx_pf_6horton_6gbasis_4cext_8IterPow2_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self); /* proto */
static int __pyx_pf_6horton_6gbasis_4cext_8IterPow2_4__init__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self, long __pyx_v_shell_type0, long __pyx_v_shell_type1); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_6inc(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_6fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GBasis(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GOBasis(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2Integral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2OverlapIntegral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2KineticIntegral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2ErfAttractionIntegral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2GaussAttractionIntegral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4Integral(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4ErfIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4GaussIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridDensityFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridGradientFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridGGAFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridKineticFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridHessianFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridMGGAFn(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterGB1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterGB2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterGB4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterPow1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterPow2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct__get_subset(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_2;
static PyObject *__pyx_int_neg_3;
static PyObject *__pyx_int_neg_4;
static PyObject *__pyx_int_neg_5;
static PyObject *__pyx_int_neg_6;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__122;
/* Late includes */

/* "horton/gbasis/cext.pyx":90
 * 
 * 
 * def boys_function(long m, double t):             # <<<<<<<<<<<<<<
 *     return boys.boys_function(m, t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_1boys_function(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_boys_function[] = "boys_function(long m, double t)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_1boys_function = {"boys_function", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_1boys_function, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_boys_function};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_1boys_function(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_m;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("boys_function (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_m,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("boys_function", 1, 2, 2, 1); __PYX_ERR(0, 90, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "boys_function") < 0)) __PYX_ERR(0, 90, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_m = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_m == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L3_error)
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("boys_function", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 90, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.boys_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_boys_function(__pyx_self, __pyx_v_m, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_boys_function(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_m, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("boys_function", 0);

  /* "horton/gbasis/cext.pyx":91
 * 
 * def boys_function(long m, double t):
 *     return boys.boys_function(m, t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = boys_function(__pyx_v_m, __pyx_v_t);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 91, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":90
 * 
 * 
 * def boys_function(long m, double t):             # <<<<<<<<<<<<<<
 *     return boys.boys_function(m, t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("horton.gbasis.cext.boys_function", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":94
 * 
 * 
 * def boys_function_array(long mmax, double t):             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[double] output = np.zeros(mmax+1)
 *     boys.boys_function_array(mmax, t, &output[0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_3boys_function_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_2boys_function_array[] = "boys_function_array(long mmax, double t)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_3boys_function_array = {"boys_function_array", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_3boys_function_array, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_2boys_function_array};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_3boys_function_array(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_mmax;
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("boys_function_array (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_mmax,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mmax)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("boys_function_array", 1, 2, 2, 1); __PYX_ERR(0, 94, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "boys_function_array") < 0)) __PYX_ERR(0, 94, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_mmax = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_mmax == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L3_error)
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("boys_function_array", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 94, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.boys_function_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_2boys_function_array(__pyx_self, __pyx_v_mmax, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_2boys_function_array(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_mmax, double __pyx_v_t) {
  PyArrayObject *__pyx_v_output = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("boys_function_array", 0);
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;

  /* "horton/gbasis/cext.pyx":95
 * 
 * def boys_function_array(long mmax, double t):
 *     cdef np.ndarray[double] output = np.zeros(mmax+1)             # <<<<<<<<<<<<<<
 *     boys.boys_function_array(mmax, t, &output[0])
 *     return output
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_mmax + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 95, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_output = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_output.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 95, __pyx_L1_error)
    } else {__pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_5 = 0;
  __pyx_v_output = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":96
 * def boys_function_array(long mmax, double t):
 *     cdef np.ndarray[double] output = np.zeros(mmax+1)
 *     boys.boys_function_array(mmax, t, &output[0])             # <<<<<<<<<<<<<<
 *     return output
 * 
 */
  __pyx_t_6 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 96, __pyx_L1_error)
  }
  try {
    boys_function_array(__pyx_v_mmax, __pyx_v_t, (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_output.diminfo[0].strides))));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 96, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":97
 *     cdef np.ndarray[double] output = np.zeros(mmax+1)
 *     boys.boys_function_array(mmax, t, &output[0])
 *     return output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":94
 * 
 * 
 * def boys_function_array(long mmax, double t):             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[double] output = np.zeros(mmax+1)
 *     boys.boys_function_array(mmax, t, &output[0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.boys_function_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":105
 * 
 * 
 * def cart_to_pure_low(np.ndarray[double] work_cart not None,             # <<<<<<<<<<<<<<
 *                      np.ndarray[double] work_pure not None,
 *                      long shell_type, long nant, long npost):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_5cart_to_pure_low(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_4cart_to_pure_low[] = "cart_to_pure_low(ndarray work_cart, ndarray work_pure, long shell_type, long nant, long npost)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_5cart_to_pure_low = {"cart_to_pure_low", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_5cart_to_pure_low, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_4cart_to_pure_low};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_5cart_to_pure_low(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_work_cart = 0;
  PyArrayObject *__pyx_v_work_pure = 0;
  long __pyx_v_shell_type;
  long __pyx_v_nant;
  long __pyx_v_npost;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cart_to_pure_low (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_work_cart,&__pyx_n_s_work_pure,&__pyx_n_s_shell_type,&__pyx_n_s_nant,&__pyx_n_s_npost,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work_cart)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work_pure)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cart_to_pure_low", 1, 5, 5, 1); __PYX_ERR(0, 105, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cart_to_pure_low", 1, 5, 5, 2); __PYX_ERR(0, 105, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nant)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cart_to_pure_low", 1, 5, 5, 3); __PYX_ERR(0, 105, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_npost)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cart_to_pure_low", 1, 5, 5, 4); __PYX_ERR(0, 105, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cart_to_pure_low") < 0)) __PYX_ERR(0, 105, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_work_cart = ((PyArrayObject *)values[0]);
    __pyx_v_work_pure = ((PyArrayObject *)values[1]);
    __pyx_v_shell_type = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_shell_type == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L3_error)
    __pyx_v_nant = __Pyx_PyInt_As_long(values[3]); if (unlikely((__pyx_v_nant == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L3_error)
    __pyx_v_npost = __Pyx_PyInt_As_long(values[4]); if (unlikely((__pyx_v_npost == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 107, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cart_to_pure_low", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 105, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.cart_to_pure_low", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_work_cart), __pyx_ptype_5numpy_ndarray, 0, "work_cart", 0))) __PYX_ERR(0, 105, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_work_pure), __pyx_ptype_5numpy_ndarray, 0, "work_pure", 0))) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_4cart_to_pure_low(__pyx_self, __pyx_v_work_cart, __pyx_v_work_pure, __pyx_v_shell_type, __pyx_v_nant, __pyx_v_npost);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_4cart_to_pure_low(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_work_cart, PyArrayObject *__pyx_v_work_pure, long __pyx_v_shell_type, long __pyx_v_nant, long __pyx_v_npost) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_work_cart;
  __Pyx_Buffer __pyx_pybuffer_work_cart;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_work_pure;
  __Pyx_Buffer __pyx_pybuffer_work_pure;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("cart_to_pure_low", 0);
  __pyx_pybuffer_work_cart.pybuffer.buf = NULL;
  __pyx_pybuffer_work_cart.refcount = 0;
  __pyx_pybuffernd_work_cart.data = NULL;
  __pyx_pybuffernd_work_cart.rcbuffer = &__pyx_pybuffer_work_cart;
  __pyx_pybuffer_work_pure.pybuffer.buf = NULL;
  __pyx_pybuffer_work_pure.refcount = 0;
  __pyx_pybuffernd_work_pure.data = NULL;
  __pyx_pybuffernd_work_pure.rcbuffer = &__pyx_pybuffer_work_pure;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_work_cart.rcbuffer->pybuffer, (PyObject*)__pyx_v_work_cart, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 105, __pyx_L1_error)
  }
  __pyx_pybuffernd_work_cart.diminfo[0].strides = __pyx_pybuffernd_work_cart.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_work_cart.diminfo[0].shape = __pyx_pybuffernd_work_cart.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_work_pure.rcbuffer->pybuffer, (PyObject*)__pyx_v_work_pure, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 105, __pyx_L1_error)
  }
  __pyx_pybuffernd_work_pure.diminfo[0].strides = __pyx_pybuffernd_work_pure.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_work_pure.diminfo[0].shape = __pyx_pybuffernd_work_pure.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":108
 *                      np.ndarray[double] work_pure not None,
 *                      long shell_type, long nant, long npost):
 *     assert work_cart.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *     assert work_pure.flags['C_CONTIGUOUS']
 *     cartpure.cart_to_pure_low(
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_work_cart), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 108, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":109
 *                      long shell_type, long nant, long npost):
 *     assert work_cart.flags['C_CONTIGUOUS']
 *     assert work_pure.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *     cartpure.cart_to_pure_low(
 *         &work_cart[0], &work_pure[0], shell_type, nant,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_work_pure), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 109, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":111
 *     assert work_pure.flags['C_CONTIGUOUS']
 *     cartpure.cart_to_pure_low(
 *         &work_cart[0], &work_pure[0], shell_type, nant,             # <<<<<<<<<<<<<<
 *         npost
 *     )
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_work_cart.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_work_cart.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 111, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_work_pure.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_work_pure.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 111, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":110
 *     assert work_cart.flags['C_CONTIGUOUS']
 *     assert work_pure.flags['C_CONTIGUOUS']
 *     cartpure.cart_to_pure_low(             # <<<<<<<<<<<<<<
 *         &work_cart[0], &work_pure[0], shell_type, nant,
 *         npost
 */
  try {
    cart_to_pure_low((&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_work_cart.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_work_cart.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_work_pure.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_work_pure.diminfo[0].strides))), __pyx_v_shell_type, __pyx_v_nant, __pyx_v_npost);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 110, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":105
 * 
 * 
 * def cart_to_pure_low(np.ndarray[double] work_cart not None,             # <<<<<<<<<<<<<<
 *                      np.ndarray[double] work_pure not None,
 *                      long shell_type, long nant, long npost):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work_cart.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work_pure.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.cart_to_pure_low", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work_cart.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work_pure.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":122
 *     void PyArray_ENABLEFLAGS(np.ndarray arr, int flags)
 * 
 * def compute_cholesky(GOBasis gobasis, GB4Integral gb4int, double threshold=1e-8, lf = None):             # <<<<<<<<<<<<<<
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     cdef vector[double]* vectors = NULL
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7compute_cholesky(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6compute_cholesky[] = "compute_cholesky(GOBasis gobasis, GB4Integral gb4int, double threshold=1e-8, lf=None)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_7compute_cholesky = {"compute_cholesky", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7compute_cholesky, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_6compute_cholesky};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7compute_cholesky(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis = 0;
  struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_gb4int = 0;
  double __pyx_v_threshold;
  PyObject *__pyx_v_lf = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_cholesky (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gobasis,&__pyx_n_s_gb4int,&__pyx_n_s_threshold,&__pyx_n_s_lf,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gobasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gb4int)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_cholesky", 0, 2, 4, 1); __PYX_ERR(0, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_threshold);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lf);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_cholesky") < 0)) __PYX_ERR(0, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_gobasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)values[0]);
    __pyx_v_gb4int = ((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)values[1]);
    if (values[2]) {
      __pyx_v_threshold = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_threshold == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L3_error)
    } else {
      __pyx_v_threshold = ((double)1e-8);
    }
    __pyx_v_lf = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_cholesky", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.compute_cholesky", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gobasis), __pyx_ptype_6horton_6gbasis_4cext_GOBasis, 1, "gobasis", 0))) __PYX_ERR(0, 122, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gb4int), __pyx_ptype_6horton_6gbasis_4cext_GB4Integral, 1, "gb4int", 0))) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6compute_cholesky(__pyx_self, __pyx_v_gobasis, __pyx_v_gb4int, __pyx_v_threshold, __pyx_v_lf);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6compute_cholesky(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_gb4int, double __pyx_v_threshold, PyObject *__pyx_v_lf) {
  GB4IntegralWrapper *__pyx_v_gb4w;
  std::vector<double>  *__pyx_v_vectors;
  npy_intp __pyx_v_dims[3];
  PyArrayObject *__pyx_v_result = 0;
  long __pyx_v_nvec;
  PyObject *__pyx_v_result_py = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<double>  *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  npy_intp __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char const *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("compute_cholesky", 0);

  /* "horton/gbasis/cext.pyx":123
 * 
 * def compute_cholesky(GOBasis gobasis, GB4Integral gb4int, double threshold=1e-8, lf = None):
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL             # <<<<<<<<<<<<<<
 *     cdef vector[double]* vectors = NULL
 *     cdef np.npy_intp dims[3]
 */
  __pyx_v_gb4w = NULL;

  /* "horton/gbasis/cext.pyx":124
 * def compute_cholesky(GOBasis gobasis, GB4Integral gb4int, double threshold=1e-8, lf = None):
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     cdef vector[double]* vectors = NULL             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims[3]
 *     cdef np.ndarray result
 */
  __pyx_v_vectors = NULL;

  /* "horton/gbasis/cext.pyx":128
 *     cdef np.ndarray result
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         gb4w = new gbw.GB4IntegralWrapper(<gbasis.GOBasis*> gobasis._this,
 *                                           <ints.GB4Integral*> gb4int._this)
 */
  /*try:*/ {

    /* "horton/gbasis/cext.pyx":129
 * 
 *     try:
 *         gb4w = new gbw.GB4IntegralWrapper(<gbasis.GOBasis*> gobasis._this,             # <<<<<<<<<<<<<<
 *                                           <ints.GB4Integral*> gb4int._this)
 *         vectors = new vector[double]()
 */
    __pyx_v_gb4w = new GB4IntegralWrapper(((GOBasis *)__pyx_v_gobasis->__pyx_base._this), ((GB4Integral *)__pyx_v_gb4int->_this));

    /* "horton/gbasis/cext.pyx":131
 *         gb4w = new gbw.GB4IntegralWrapper(<gbasis.GOBasis*> gobasis._this,
 *                                           <ints.GB4Integral*> gb4int._this)
 *         vectors = new vector[double]()             # <<<<<<<<<<<<<<
 *         nvec = cholesky.cholesky(gb4w, vectors, threshold)
 *         dims[0] = <np.npy_intp> nvec
 */
    try {
      __pyx_t_1 = new std::vector<double> ();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 131, __pyx_L4_error)
    }
    __pyx_v_vectors = __pyx_t_1;

    /* "horton/gbasis/cext.pyx":132
 *                                           <ints.GB4Integral*> gb4int._this)
 *         vectors = new vector[double]()
 *         nvec = cholesky.cholesky(gb4w, vectors, threshold)             # <<<<<<<<<<<<<<
 *         dims[0] = <np.npy_intp> nvec
 *         dims[1] = <np.npy_intp> gobasis.nbasis
 */
    __pyx_v_nvec = cholesky(__pyx_v_gb4w, __pyx_v_vectors, __pyx_v_threshold);

    /* "horton/gbasis/cext.pyx":133
 *         vectors = new vector[double]()
 *         nvec = cholesky.cholesky(gb4w, vectors, threshold)
 *         dims[0] = <np.npy_intp> nvec             # <<<<<<<<<<<<<<
 *         dims[1] = <np.npy_intp> gobasis.nbasis
 *         dims[2] = <np.npy_intp> gobasis.nbasis
 */
    (__pyx_v_dims[0]) = ((npy_intp)__pyx_v_nvec);

    /* "horton/gbasis/cext.pyx":134
 *         nvec = cholesky.cholesky(gb4w, vectors, threshold)
 *         dims[0] = <np.npy_intp> nvec
 *         dims[1] = <np.npy_intp> gobasis.nbasis             # <<<<<<<<<<<<<<
 *         dims[2] = <np.npy_intp> gobasis.nbasis
 *         result = np.PyArray_SimpleNewFromData(3, dims, np.NPY_DOUBLE, &(deref(vectors)[0]))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 134, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_dims[1]) = ((npy_intp)__pyx_t_3);

    /* "horton/gbasis/cext.pyx":135
 *         dims[0] = <np.npy_intp> nvec
 *         dims[1] = <np.npy_intp> gobasis.nbasis
 *         dims[2] = <np.npy_intp> gobasis.nbasis             # <<<<<<<<<<<<<<
 *         result = np.PyArray_SimpleNewFromData(3, dims, np.NPY_DOUBLE, &(deref(vectors)[0]))
 *         PyArray_ENABLEFLAGS(result, np.NPY_OWNDATA)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_2); if (unlikely((__pyx_t_3 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 135, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_dims[2]) = ((npy_intp)__pyx_t_3);

    /* "horton/gbasis/cext.pyx":136
 *         dims[1] = <np.npy_intp> gobasis.nbasis
 *         dims[2] = <np.npy_intp> gobasis.nbasis
 *         result = np.PyArray_SimpleNewFromData(3, dims, np.NPY_DOUBLE, &(deref(vectors)[0]))             # <<<<<<<<<<<<<<
 *         PyArray_ENABLEFLAGS(result, np.NPY_OWNDATA)
 *     finally:
 */
    __pyx_t_2 = PyArray_SimpleNewFromData(3, __pyx_v_dims, NPY_DOUBLE, (&((*__pyx_v_vectors)[0]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 136, __pyx_L4_error)
    __pyx_v_result = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":137
 *         dims[2] = <np.npy_intp> gobasis.nbasis
 *         result = np.PyArray_SimpleNewFromData(3, dims, np.NPY_DOUBLE, &(deref(vectors)[0]))
 *         PyArray_ENABLEFLAGS(result, np.NPY_OWNDATA)             # <<<<<<<<<<<<<<
 *     finally:
 *         if gb4w is not NULL:
 */
    PyArray_ENABLEFLAGS(__pyx_v_result, NPY_OWNDATA);
  }

  /* "horton/gbasis/cext.pyx":139
 *         PyArray_ENABLEFLAGS(result, np.NPY_OWNDATA)
 *     finally:
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_4 = ((__pyx_v_gb4w != NULL) != 0);
      if (__pyx_t_4) {

        /* "horton/gbasis/cext.pyx":140
 *     finally:
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 * 
 *     if lf is not None and isinstance(lf, CholeskyLinalgFactory):
 */
        delete __pyx_v_gb4w;

        /* "horton/gbasis/cext.pyx":139
 *         PyArray_ENABLEFLAGS(result, np.NPY_OWNDATA)
 *     finally:
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
      }
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0)) __Pyx_ErrFetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __pyx_t_5 = __pyx_lineno; __pyx_t_6 = __pyx_clineno; __pyx_t_7 = __pyx_filename;
      {
        __pyx_t_4 = ((__pyx_v_gb4w != NULL) != 0);
        if (__pyx_t_4) {

          /* "horton/gbasis/cext.pyx":140
 *     finally:
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 * 
 *     if lf is not None and isinstance(lf, CholeskyLinalgFactory):
 */
          delete __pyx_v_gb4w;

          /* "horton/gbasis/cext.pyx":139
 *         PyArray_ENABLEFLAGS(result, np.NPY_OWNDATA)
 *     finally:
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ErrRestore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0;
      __pyx_lineno = __pyx_t_5; __pyx_clineno = __pyx_t_6; __pyx_filename = __pyx_t_7;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "horton/gbasis/cext.pyx":142
 *             del gb4w
 * 
 *     if lf is not None and isinstance(lf, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *         result_py = lf.create_four_index(gobasis.nbasis, array=result)
 *         return result_py
 */
  __pyx_t_14 = (__pyx_v_lf != Py_None);
  __pyx_t_15 = (__pyx_t_14 != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_4 = __pyx_t_15;
    goto __pyx_L11_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_CholeskyLinalgFactory); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = PyObject_IsInstance(__pyx_v_lf, __pyx_t_2); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_14 = (__pyx_t_15 != 0);
  __pyx_t_4 = __pyx_t_14;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_4) {

    /* "horton/gbasis/cext.pyx":143
 * 
 *     if lf is not None and isinstance(lf, CholeskyLinalgFactory):
 *         result_py = lf.create_four_index(gobasis.nbasis, array=result)             # <<<<<<<<<<<<<<
 *         return result_py
 *     else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_four_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16);
    __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_array, ((PyObject *)__pyx_v_result)) < 0) __PYX_ERR(0, 143, __pyx_L1_error)
    __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_17, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_v_result_py = __pyx_t_18;
    __pyx_t_18 = 0;

    /* "horton/gbasis/cext.pyx":144
 *     if lf is not None and isinstance(lf, CholeskyLinalgFactory):
 *         result_py = lf.create_four_index(gobasis.nbasis, array=result)
 *         return result_py             # <<<<<<<<<<<<<<
 *     else:
 *         return result
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_result_py);
    __pyx_r = __pyx_v_result_py;
    goto __pyx_L0;

    /* "horton/gbasis/cext.pyx":142
 *             del gb4w
 * 
 *     if lf is not None and isinstance(lf, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *         result_py = lf.create_four_index(gobasis.nbasis, array=result)
 *         return result_py
 */
  }

  /* "horton/gbasis/cext.pyx":146
 *         return result_py
 *     else:
 *         return result             # <<<<<<<<<<<<<<
 * 
 * #
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_result));
    __pyx_r = ((PyObject *)__pyx_v_result);
    goto __pyx_L0;
  }

  /* "horton/gbasis/cext.pyx":122
 *     void PyArray_ENABLEFLAGS(np.ndarray arr, int flags)
 * 
 * def compute_cholesky(GOBasis gobasis, GB4Integral gb4int, double threshold=1e-8, lf = None):             # <<<<<<<<<<<<<<
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     cdef vector[double]* vectors = NULL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("horton.gbasis.cext.compute_cholesky", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_result_py);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":153
 * 
 * 
 * def fac(long n):             # <<<<<<<<<<<<<<
 *     return common.fac(n)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_9fac(PyObject *__pyx_self, PyObject *__pyx_arg_n); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_8fac[] = "fac(long n)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_9fac = {"fac", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_9fac, METH_O, __pyx_doc_6horton_6gbasis_4cext_8fac};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_9fac(PyObject *__pyx_self, PyObject *__pyx_arg_n) {
  long __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fac (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_long(__pyx_arg_n); if (unlikely((__pyx_v_n == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 153, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.fac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8fac(__pyx_self, ((long)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8fac(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fac", 0);

  /* "horton/gbasis/cext.pyx":154
 * 
 * def fac(long n):
 *     return common.fac(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(fac(__pyx_v_n)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":153
 * 
 * 
 * def fac(long n):             # <<<<<<<<<<<<<<
 *     return common.fac(n)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.fac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":157
 * 
 * 
 * def fac2(long n):             # <<<<<<<<<<<<<<
 *     return common.fac2(n)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11fac2(PyObject *__pyx_self, PyObject *__pyx_arg_n); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_10fac2[] = "fac2(long n)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_11fac2 = {"fac2", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11fac2, METH_O, __pyx_doc_6horton_6gbasis_4cext_10fac2};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11fac2(PyObject *__pyx_self, PyObject *__pyx_arg_n) {
  long __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fac2 (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_long(__pyx_arg_n); if (unlikely((__pyx_v_n == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.fac2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_10fac2(__pyx_self, ((long)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_10fac2(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fac2", 0);

  /* "horton/gbasis/cext.pyx":158
 * 
 * def fac2(long n):
 *     return common.fac2(n)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(fac2(__pyx_v_n)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":157
 * 
 * 
 * def fac2(long n):             # <<<<<<<<<<<<<<
 *     return common.fac2(n)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.fac2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":161
 * 
 * 
 * def binom(long n, long m):             # <<<<<<<<<<<<<<
 *     return common.binom(n, m)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_13binom(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_12binom[] = "binom(long n, long m)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_13binom = {"binom", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_13binom, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_12binom};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_13binom(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_n;
  long __pyx_v_m;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("binom (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_m,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("binom", 1, 2, 2, 1); __PYX_ERR(0, 161, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "binom") < 0)) __PYX_ERR(0, 161, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_n = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_n == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_m == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("binom", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 161, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.binom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_12binom(__pyx_self, __pyx_v_n, __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_12binom(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n, long __pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("binom", 0);

  /* "horton/gbasis/cext.pyx":162
 * 
 * def binom(long n, long m):
 *     return common.binom(n, m)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(binom(__pyx_v_n, __pyx_v_m)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":161
 * 
 * 
 * def binom(long n, long m):             # <<<<<<<<<<<<<<
 *     return common.binom(n, m)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.binom", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":165
 * 
 * 
 * def get_shell_nbasis(long shell_type):             # <<<<<<<<<<<<<<
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_15get_shell_nbasis(PyObject *__pyx_self, PyObject *__pyx_arg_shell_type); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_14get_shell_nbasis[] = "get_shell_nbasis(long shell_type)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_15get_shell_nbasis = {"get_shell_nbasis", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_15get_shell_nbasis, METH_O, __pyx_doc_6horton_6gbasis_4cext_14get_shell_nbasis};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_15get_shell_nbasis(PyObject *__pyx_self, PyObject *__pyx_arg_shell_type) {
  long __pyx_v_shell_type;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_shell_nbasis (wrapper)", 0);
  assert(__pyx_arg_shell_type); {
    __pyx_v_shell_type = __Pyx_PyInt_As_long(__pyx_arg_shell_type); if (unlikely((__pyx_v_shell_type == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.get_shell_nbasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_14get_shell_nbasis(__pyx_self, ((long)__pyx_v_shell_type));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_14get_shell_nbasis(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_shell_type) {
  long __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_shell_nbasis", 0);

  /* "horton/gbasis/cext.pyx":166
 * 
 * def get_shell_nbasis(long shell_type):
 *     result = common.get_shell_nbasis(shell_type)             # <<<<<<<<<<<<<<
 *     if result <= 0:
 *         raise ValueError("shell_type -1 is not supported.")
 */
  __pyx_v_result = get_shell_nbasis(__pyx_v_shell_type);

  /* "horton/gbasis/cext.pyx":167
 * def get_shell_nbasis(long shell_type):
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("shell_type -1 is not supported.")
 *     return result
 */
  __pyx_t_1 = ((__pyx_v_result <= 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "horton/gbasis/cext.pyx":168
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:
 *         raise ValueError("shell_type -1 is not supported.")             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 168, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":167
 * def get_shell_nbasis(long shell_type):
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("shell_type -1 is not supported.")
 *     return result
 */
  }

  /* "horton/gbasis/cext.pyx":169
 *     if result <= 0:
 *         raise ValueError("shell_type -1 is not supported.")
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":165
 * 
 * 
 * def get_shell_nbasis(long shell_type):             # <<<<<<<<<<<<<<
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("horton.gbasis.cext.get_shell_nbasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":172
 * 
 * 
 * def get_max_shell_type():             # <<<<<<<<<<<<<<
 *     return common.get_max_shell_type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_17get_max_shell_type(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_16get_max_shell_type[] = "get_max_shell_type()";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_17get_max_shell_type = {"get_max_shell_type", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_17get_max_shell_type, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_16get_max_shell_type};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_17get_max_shell_type(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_max_shell_type (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_16get_max_shell_type(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_16get_max_shell_type(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_max_shell_type", 0);

  /* "horton/gbasis/cext.pyx":173
 * 
 * def get_max_shell_type():
 *     return common.get_max_shell_type()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(get_max_shell_type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":172
 * 
 * 
 * def get_max_shell_type():             # <<<<<<<<<<<<<<
 *     return common.get_max_shell_type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.get_max_shell_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":176
 * 
 * 
 * def gpt_coeff(long k, long n0, long n1, double pa, double pb):             # <<<<<<<<<<<<<<
 *     return common.gpt_coeff(k, n0, n1, pa, pb)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_19gpt_coeff(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18gpt_coeff[] = "gpt_coeff(long k, long n0, long n1, double pa, double pb)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_19gpt_coeff = {"gpt_coeff", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_19gpt_coeff, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_18gpt_coeff};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_19gpt_coeff(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_k;
  long __pyx_v_n0;
  long __pyx_v_n1;
  double __pyx_v_pa;
  double __pyx_v_pb;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gpt_coeff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_k,&__pyx_n_s_n0,&__pyx_n_s_n1,&__pyx_n_s_pa,&__pyx_n_s_pb,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_k)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gpt_coeff", 1, 5, 5, 1); __PYX_ERR(0, 176, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gpt_coeff", 1, 5, 5, 2); __PYX_ERR(0, 176, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gpt_coeff", 1, 5, 5, 3); __PYX_ERR(0, 176, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gpt_coeff", 1, 5, 5, 4); __PYX_ERR(0, 176, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gpt_coeff") < 0)) __PYX_ERR(0, 176, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_k = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_k == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_n0 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_n0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_n1 = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_n1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_pa = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_pa == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
    __pyx_v_pb = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_pb == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 176, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gpt_coeff", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 176, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.gpt_coeff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18gpt_coeff(__pyx_self, __pyx_v_k, __pyx_v_n0, __pyx_v_n1, __pyx_v_pa, __pyx_v_pb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18gpt_coeff(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_k, long __pyx_v_n0, long __pyx_v_n1, double __pyx_v_pa, double __pyx_v_pb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("gpt_coeff", 0);

  /* "horton/gbasis/cext.pyx":177
 * 
 * def gpt_coeff(long k, long n0, long n1, double pa, double pb):
 *     return common.gpt_coeff(k, n0, n1, pa, pb)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(gpt_coeff(__pyx_v_k, __pyx_v_n0, __pyx_v_n1, __pyx_v_pa, __pyx_v_pb)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":176
 * 
 * 
 * def gpt_coeff(long k, long n0, long n1, double pa, double pb):             # <<<<<<<<<<<<<<
 *     return common.gpt_coeff(k, n0, n1, pa, pb)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.gpt_coeff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":180
 * 
 * 
 * def gb_overlap_int1d(long n0, long n1, double pa, double pb, double inv_gamma):             # <<<<<<<<<<<<<<
 *     return common.gb_overlap_int1d(n0, n1, pa, pb, inv_gamma)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_21gb_overlap_int1d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_20gb_overlap_int1d[] = "gb_overlap_int1d(long n0, long n1, double pa, double pb, double inv_gamma)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_21gb_overlap_int1d = {"gb_overlap_int1d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_21gb_overlap_int1d, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_20gb_overlap_int1d};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_21gb_overlap_int1d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_n0;
  long __pyx_v_n1;
  double __pyx_v_pa;
  double __pyx_v_pb;
  double __pyx_v_inv_gamma;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gb_overlap_int1d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n0,&__pyx_n_s_n1,&__pyx_n_s_pa,&__pyx_n_s_pb,&__pyx_n_s_inv_gamma,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gb_overlap_int1d", 1, 5, 5, 1); __PYX_ERR(0, 180, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gb_overlap_int1d", 1, 5, 5, 2); __PYX_ERR(0, 180, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gb_overlap_int1d", 1, 5, 5, 3); __PYX_ERR(0, 180, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inv_gamma)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gb_overlap_int1d", 1, 5, 5, 4); __PYX_ERR(0, 180, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gb_overlap_int1d") < 0)) __PYX_ERR(0, 180, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_n0 = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_n0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
    __pyx_v_n1 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_n1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
    __pyx_v_pa = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pa == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
    __pyx_v_pb = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_pb == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
    __pyx_v_inv_gamma = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_inv_gamma == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gb_overlap_int1d", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 180, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.gb_overlap_int1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_20gb_overlap_int1d(__pyx_self, __pyx_v_n0, __pyx_v_n1, __pyx_v_pa, __pyx_v_pb, __pyx_v_inv_gamma);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_20gb_overlap_int1d(CYTHON_UNUSED PyObject *__pyx_self, long __pyx_v_n0, long __pyx_v_n1, double __pyx_v_pa, double __pyx_v_pb, double __pyx_v_inv_gamma) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("gb_overlap_int1d", 0);

  /* "horton/gbasis/cext.pyx":181
 * 
 * def gb_overlap_int1d(long n0, long n1, double pa, double pb, double inv_gamma):
 *     return common.gb_overlap_int1d(n0, n1, pa, pb, inv_gamma)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(gb_overlap_int1d(__pyx_v_n0, __pyx_v_n1, __pyx_v_pa, __pyx_v_pb, __pyx_v_inv_gamma)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":180
 * 
 * 
 * def gb_overlap_int1d(long n0, long n1, double pa, double pb, double inv_gamma):             # <<<<<<<<<<<<<<
 *     return common.gb_overlap_int1d(n0, n1, pa, pb, inv_gamma)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.gb_overlap_int1d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":184
 * 
 * 
 * def nuclear_attraction_helper(np.ndarray[double, ndim=1] work_g not None,             # <<<<<<<<<<<<<<
 *                               long n0, long n1, double pa, double pb, double cp,
 *                               double gamma_inv):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23nuclear_attraction_helper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_22nuclear_attraction_helper[] = "nuclear_attraction_helper(ndarray work_g, long n0, long n1, double pa, double pb, double cp, double gamma_inv)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_23nuclear_attraction_helper = {"nuclear_attraction_helper", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_23nuclear_attraction_helper, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_22nuclear_attraction_helper};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23nuclear_attraction_helper(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_work_g = 0;
  long __pyx_v_n0;
  long __pyx_v_n1;
  double __pyx_v_pa;
  double __pyx_v_pb;
  double __pyx_v_cp;
  double __pyx_v_gamma_inv;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("nuclear_attraction_helper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_work_g,&__pyx_n_s_n0,&__pyx_n_s_n1,&__pyx_n_s_pa,&__pyx_n_s_pb,&__pyx_n_s_cp,&__pyx_n_s_gamma_inv,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work_g)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("nuclear_attraction_helper", 1, 7, 7, 1); __PYX_ERR(0, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("nuclear_attraction_helper", 1, 7, 7, 2); __PYX_ERR(0, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pa)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("nuclear_attraction_helper", 1, 7, 7, 3); __PYX_ERR(0, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("nuclear_attraction_helper", 1, 7, 7, 4); __PYX_ERR(0, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("nuclear_attraction_helper", 1, 7, 7, 5); __PYX_ERR(0, 184, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gamma_inv)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("nuclear_attraction_helper", 1, 7, 7, 6); __PYX_ERR(0, 184, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "nuclear_attraction_helper") < 0)) __PYX_ERR(0, 184, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_work_g = ((PyArrayObject *)values[0]);
    __pyx_v_n0 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_n0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
    __pyx_v_n1 = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_n1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
    __pyx_v_pa = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_pa == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
    __pyx_v_pb = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_pb == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
    __pyx_v_cp = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_cp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L3_error)
    __pyx_v_gamma_inv = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_gamma_inv == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("nuclear_attraction_helper", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 184, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.nuclear_attraction_helper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_work_g), __pyx_ptype_5numpy_ndarray, 0, "work_g", 0))) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_22nuclear_attraction_helper(__pyx_self, __pyx_v_work_g, __pyx_v_n0, __pyx_v_n1, __pyx_v_pa, __pyx_v_pb, __pyx_v_cp, __pyx_v_gamma_inv);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_22nuclear_attraction_helper(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_work_g, long __pyx_v_n0, long __pyx_v_n1, double __pyx_v_pa, double __pyx_v_pb, double __pyx_v_cp, double __pyx_v_gamma_inv) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_work_g;
  __Pyx_Buffer __pyx_pybuffer_work_g;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("nuclear_attraction_helper", 0);
  __pyx_pybuffer_work_g.pybuffer.buf = NULL;
  __pyx_pybuffer_work_g.refcount = 0;
  __pyx_pybuffernd_work_g.data = NULL;
  __pyx_pybuffernd_work_g.rcbuffer = &__pyx_pybuffer_work_g;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_work_g.rcbuffer->pybuffer, (PyObject*)__pyx_v_work_g, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 184, __pyx_L1_error)
  }
  __pyx_pybuffernd_work_g.diminfo[0].strides = __pyx_pybuffernd_work_g.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_work_g.diminfo[0].shape = __pyx_pybuffernd_work_g.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":187
 *                               long n0, long n1, double pa, double pb, double cp,
 *                               double gamma_inv):
 *     assert work_g.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *     assert work_g.shape[0] == n0+n1+1
 *     common.nuclear_attraction_helper(&work_g[0], n0, n1, pa, pb, cp, gamma_inv)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_work_g), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 187, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":188
 *                               double gamma_inv):
 *     assert work_g.flags['C_CONTIGUOUS']
 *     assert work_g.shape[0] == n0+n1+1             # <<<<<<<<<<<<<<
 *     common.nuclear_attraction_helper(&work_g[0], n0, n1, pa, pb, cp, gamma_inv)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_work_g->dimensions[0]) == ((__pyx_v_n0 + __pyx_v_n1) + 1)) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 188, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":189
 *     assert work_g.flags['C_CONTIGUOUS']
 *     assert work_g.shape[0] == n0+n1+1
 *     common.nuclear_attraction_helper(&work_g[0], n0, n1, pa, pb, cp, gamma_inv)             # <<<<<<<<<<<<<<
 * 
 * def cit(int i, double t, int m):
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_work_g.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_work_g.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 189, __pyx_L1_error)
  }
  nuclear_attraction_helper((&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_work_g.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_work_g.diminfo[0].strides))), __pyx_v_n0, __pyx_v_n1, __pyx_v_pa, __pyx_v_pb, __pyx_v_cp, __pyx_v_gamma_inv);

  /* "horton/gbasis/cext.pyx":184
 * 
 * 
 * def nuclear_attraction_helper(np.ndarray[double, ndim=1] work_g not None,             # <<<<<<<<<<<<<<
 *                               long n0, long n1, double pa, double pb, double cp,
 *                               double gamma_inv):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work_g.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.nuclear_attraction_helper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work_g.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":191
 *     common.nuclear_attraction_helper(&work_g[0], n0, n1, pa, pb, cp, gamma_inv)
 * 
 * def cit(int i, double t, int m):             # <<<<<<<<<<<<<<
 *         return common.cit(i, t, m)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_25cit(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_24cit[] = "cit(int i, double t, int m)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_25cit = {"cit", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_25cit, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_24cit};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_25cit(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_i;
  double __pyx_v_t;
  int __pyx_v_m;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_t,&__pyx_n_s_m,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cit", 1, 3, 3, 1); __PYX_ERR(0, 191, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_m)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("cit", 1, 3, 3, 2); __PYX_ERR(0, 191, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cit") < 0)) __PYX_ERR(0, 191, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L3_error)
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L3_error)
    __pyx_v_m = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cit", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 191, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.cit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_24cit(__pyx_self, __pyx_v_i, __pyx_v_t, __pyx_v_m);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_24cit(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_i, double __pyx_v_t, int __pyx_v_m) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cit", 0);

  /* "horton/gbasis/cext.pyx":192
 * 
 * def cit(int i, double t, int m):
 *         return common.cit(i, t, m)             # <<<<<<<<<<<<<<
 * 
 * def jfac(int j, int n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(cit(__pyx_v_i, __pyx_v_t, __pyx_v_m)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":191
 *     common.nuclear_attraction_helper(&work_g[0], n0, n1, pa, pb, cp, gamma_inv)
 * 
 * def cit(int i, double t, int m):             # <<<<<<<<<<<<<<
 *         return common.cit(i, t, m)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.cit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":194
 *         return common.cit(i, t, m)
 * 
 * def jfac(int j, int n):             # <<<<<<<<<<<<<<
 *     return common.jfac(j, n)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_27jfac(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_26jfac[] = "jfac(int j, int n)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_27jfac = {"jfac", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_27jfac, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_26jfac};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_27jfac(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_j;
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("jfac (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_j,&__pyx_n_s_n,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("jfac", 1, 2, 2, 1); __PYX_ERR(0, 194, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "jfac") < 0)) __PYX_ERR(0, 194, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_j = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L3_error)
    __pyx_v_n = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 194, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("jfac", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 194, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.jfac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_26jfac(__pyx_self, __pyx_v_j, __pyx_v_n);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_26jfac(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_j, int __pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("jfac", 0);

  /* "horton/gbasis/cext.pyx":195
 * 
 * def jfac(int j, int n):
 *     return common.jfac(j, n)             # <<<<<<<<<<<<<<
 * 
 * def dtaylor(int n, double alpha, double t, double tfactor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(jfac(__pyx_v_j, __pyx_v_n)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":194
 *         return common.cit(i, t, m)
 * 
 * def jfac(int j, int n):             # <<<<<<<<<<<<<<
 *     return common.jfac(j, n)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.jfac", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":197
 *     return common.jfac(j, n)
 * 
 * def dtaylor(int n, double alpha, double t, double tfactor):             # <<<<<<<<<<<<<<
 *     return common.dtaylor(n, alpha, t, tfactor)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_29dtaylor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_28dtaylor[] = "dtaylor(int n, double alpha, double t, double tfactor)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_29dtaylor = {"dtaylor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_29dtaylor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_28dtaylor};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_29dtaylor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_n;
  double __pyx_v_alpha;
  double __pyx_v_t;
  double __pyx_v_tfactor;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dtaylor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_n,&__pyx_n_s_alpha,&__pyx_n_s_t,&__pyx_n_s_tfactor,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtaylor", 1, 4, 4, 1); __PYX_ERR(0, 197, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtaylor", 1, 4, 4, 2); __PYX_ERR(0, 197, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tfactor)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("dtaylor", 1, 4, 4, 3); __PYX_ERR(0, 197, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "dtaylor") < 0)) __PYX_ERR(0, 197, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_n = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L3_error)
    __pyx_v_t = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L3_error)
    __pyx_v_tfactor = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_tfactor == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 197, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dtaylor", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 197, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.dtaylor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_28dtaylor(__pyx_self, __pyx_v_n, __pyx_v_alpha, __pyx_v_t, __pyx_v_tfactor);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_28dtaylor(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_n, double __pyx_v_alpha, double __pyx_v_t, double __pyx_v_tfactor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dtaylor", 0);

  /* "horton/gbasis/cext.pyx":198
 * 
 * def dtaylor(int n, double alpha, double t, double tfactor):
 *     return common.dtaylor(n, alpha, t, tfactor)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dtaylor(__pyx_v_n, __pyx_v_alpha, __pyx_v_t, __pyx_v_tfactor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":197
 *     return common.jfac(j, n)
 * 
 * def dtaylor(int n, double alpha, double t, double tfactor):             # <<<<<<<<<<<<<<
 *     return common.dtaylor(n, alpha, t, tfactor)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.dtaylor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":206
 * 
 * 
 * def gob_cart_normalization(double alpha, np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_31gob_cart_normalization(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_30gob_cart_normalization[] = "gob_cart_normalization(double alpha, ndarray n)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_31gob_cart_normalization = {"gob_cart_normalization", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_31gob_cart_normalization, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_30gob_cart_normalization};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_31gob_cart_normalization(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_alpha;
  PyArrayObject *__pyx_v_n = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gob_cart_normalization (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alpha,&__pyx_n_s_n,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gob_cart_normalization", 1, 2, 2, 1); __PYX_ERR(0, 206, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gob_cart_normalization") < 0)) __PYX_ERR(0, 206, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L3_error)
    __pyx_v_n = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gob_cart_normalization", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 206, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.gob_cart_normalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_5numpy_ndarray, 0, "n", 0))) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_30gob_cart_normalization(__pyx_self, __pyx_v_alpha, __pyx_v_n);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_30gob_cart_normalization(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_alpha, PyArrayObject *__pyx_v_n) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_n;
  __Pyx_Buffer __pyx_pybuffer_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("gob_cart_normalization", 0);
  __pyx_pybuffer_n.pybuffer.buf = NULL;
  __pyx_pybuffer_n.refcount = 0;
  __pyx_pybuffernd_n.data = NULL;
  __pyx_pybuffernd_n.rcbuffer = &__pyx_pybuffer_n;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n.rcbuffer->pybuffer, (PyObject*)__pyx_v_n, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 206, __pyx_L1_error)
  }
  __pyx_pybuffernd_n.diminfo[0].strides = __pyx_pybuffernd_n.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_n.diminfo[0].shape = __pyx_pybuffernd_n.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":207
 * 
 * def gob_cart_normalization(double alpha, np.ndarray[long, ndim=1] n not None):
 *     assert n.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *     assert n.shape[0] == 3
 *     return gbasis.gob_cart_normalization(alpha, &n[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_n), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 207, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":208
 * def gob_cart_normalization(double alpha, np.ndarray[long, ndim=1] n not None):
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3             # <<<<<<<<<<<<<<
 *     return gbasis.gob_cart_normalization(alpha, &n[0])
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_n->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 208, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":209
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 *     return gbasis.gob_cart_normalization(alpha, &n[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_n.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_n.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 209, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(gob_cart_normalization(__pyx_v_alpha, (&(*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_n.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_n.diminfo[0].strides))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":206
 * 
 * 
 * def gob_cart_normalization(double alpha, np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.gob_cart_normalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":212
 * 
 * 
 * def gob_pure_normalization(double alpha, long l):             # <<<<<<<<<<<<<<
 *     return gbasis.gob_pure_normalization(alpha, l)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_33gob_pure_normalization(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_32gob_pure_normalization[] = "gob_pure_normalization(double alpha, long l)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_33gob_pure_normalization = {"gob_pure_normalization", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_33gob_pure_normalization, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_32gob_pure_normalization};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_33gob_pure_normalization(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_alpha;
  long __pyx_v_l;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gob_pure_normalization (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_alpha,&__pyx_n_s_l,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("gob_pure_normalization", 1, 2, 2, 1); __PYX_ERR(0, 212, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "gob_pure_normalization") < 0)) __PYX_ERR(0, 212, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L3_error)
    __pyx_v_l = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_l == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 212, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gob_pure_normalization", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 212, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.gob_pure_normalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_32gob_pure_normalization(__pyx_self, __pyx_v_alpha, __pyx_v_l);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_32gob_pure_normalization(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_alpha, long __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("gob_pure_normalization", 0);

  /* "horton/gbasis/cext.pyx":213
 * 
 * def gob_pure_normalization(double alpha, long l):
 *     return gbasis.gob_pure_normalization(alpha, l)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(gob_pure_normalization(__pyx_v_alpha, __pyx_v_l)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":212
 * 
 * 
 * def gob_pure_normalization(double alpha, long l):             # <<<<<<<<<<<<<<
 *     return gbasis.gob_pure_normalization(alpha, l)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.gob_pure_normalization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":309
 *     cdef np.ndarray _con_coeffs
 * 
 *     def __cinit__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):             # <<<<<<<<<<<<<<
 *         # Make private copies of the input arrays.
 *         self._centers = np.array(centers, dtype=float)
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_6GBasis_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_6GBasis_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_centers = 0;
  PyObject *__pyx_v_shell_map = 0;
  PyObject *__pyx_v_nprims = 0;
  PyObject *__pyx_v_shell_types = 0;
  PyObject *__pyx_v_alphas = 0;
  PyObject *__pyx_v_con_coeffs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_centers,&__pyx_n_s_shell_map,&__pyx_n_s_nprims,&__pyx_n_s_shell_types,&__pyx_n_s_alphas,&__pyx_n_s_con_coeffs,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centers)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 1); __PYX_ERR(0, 309, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nprims)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 2); __PYX_ERR(0, 309, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 3); __PYX_ERR(0, 309, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alphas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 4); __PYX_ERR(0, 309, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_con_coeffs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 5); __PYX_ERR(0, 309, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 309, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_centers = values[0];
    __pyx_v_shell_map = values[1];
    __pyx_v_nprims = values[2];
    __pyx_v_shell_types = values[3];
    __pyx_v_alphas = values[4];
    __pyx_v_con_coeffs = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 309, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self), __pyx_v_centers, __pyx_v_shell_map, __pyx_v_nprims, __pyx_v_shell_types, __pyx_v_alphas, __pyx_v_con_coeffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_6GBasis___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_centers, PyObject *__pyx_v_shell_map, PyObject *__pyx_v_nprims, PyObject *__pyx_v_shell_types, PyObject *__pyx_v_alphas, PyObject *__pyx_v_con_coeffs) {
  long __pyx_v_nprim_total;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  long __pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":311
 *     def __cinit__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 *         # Make private copies of the input arrays.
 *         self._centers = np.array(centers, dtype=float)             # <<<<<<<<<<<<<<
 *         self._shell_map = np.array(shell_map, dtype=int)
 *         self._nprims = np.array(nprims, dtype=int)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_centers);
  __Pyx_GIVEREF(__pyx_v_centers);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_centers);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_centers);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_centers));
  __pyx_v_self->_centers = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "horton/gbasis/cext.pyx":312
 *         # Make private copies of the input arrays.
 *         self._centers = np.array(centers, dtype=float)
 *         self._shell_map = np.array(shell_map, dtype=int)             # <<<<<<<<<<<<<<
 *         self._nprims = np.array(nprims, dtype=int)
 *         self._shell_types = np.array(shell_types, dtype=int)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_shell_map);
  __Pyx_GIVEREF(__pyx_v_shell_map);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_shell_map);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_shell_map);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_shell_map));
  __pyx_v_self->_shell_map = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":313
 *         self._centers = np.array(centers, dtype=float)
 *         self._shell_map = np.array(shell_map, dtype=int)
 *         self._nprims = np.array(nprims, dtype=int)             # <<<<<<<<<<<<<<
 *         self._shell_types = np.array(shell_types, dtype=int)
 *         self._alphas = np.array(alphas, dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_nprims);
  __Pyx_GIVEREF(__pyx_v_nprims);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_nprims);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_nprims);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_nprims));
  __pyx_v_self->_nprims = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":314
 *         self._shell_map = np.array(shell_map, dtype=int)
 *         self._nprims = np.array(nprims, dtype=int)
 *         self._shell_types = np.array(shell_types, dtype=int)             # <<<<<<<<<<<<<<
 *         self._alphas = np.array(alphas, dtype=float)
 *         self._con_coeffs = np.array(con_coeffs, dtype=float)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_shell_types);
  __Pyx_GIVEREF(__pyx_v_shell_types);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_shell_types);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_shell_types);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_shell_types));
  __pyx_v_self->_shell_types = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":315
 *         self._nprims = np.array(nprims, dtype=int)
 *         self._shell_types = np.array(shell_types, dtype=int)
 *         self._alphas = np.array(alphas, dtype=float)             # <<<<<<<<<<<<<<
 *         self._con_coeffs = np.array(con_coeffs, dtype=float)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_alphas);
  __Pyx_GIVEREF(__pyx_v_alphas);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_alphas);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_alphas);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_alphas));
  __pyx_v_self->_alphas = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "horton/gbasis/cext.pyx":316
 *         self._shell_types = np.array(shell_types, dtype=int)
 *         self._alphas = np.array(alphas, dtype=float)
 *         self._con_coeffs = np.array(con_coeffs, dtype=float)             # <<<<<<<<<<<<<<
 * 
 *         self._centers.flags.writeable = True
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_con_coeffs);
  __Pyx_GIVEREF(__pyx_v_con_coeffs);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_con_coeffs);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(0, 316, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_con_coeffs);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_con_coeffs));
  __pyx_v_self->_con_coeffs = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":318
 *         self._con_coeffs = np.array(con_coeffs, dtype=float)
 * 
 *         self._centers.flags.writeable = True             # <<<<<<<<<<<<<<
 *         # Set arrays unwritable because:
 *         #   (i) derived properties will be stored
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_centers), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_writeable, Py_True) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":326
 *         # ideal but is not possible. One can always pass a pointer to a
 *         # C library and start messing things up.
 *         self._shell_map.flags.writeable = False             # <<<<<<<<<<<<<<
 *         self._nprims.flags.writeable = False
 *         self._shell_types.flags.writeable = False
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_shell_map), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_writeable, Py_False) < 0) __PYX_ERR(0, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":327
 *         # C library and start messing things up.
 *         self._shell_map.flags.writeable = False
 *         self._nprims.flags.writeable = False             # <<<<<<<<<<<<<<
 *         self._shell_types.flags.writeable = False
 *         self._alphas.flags.writeable = False
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_nprims), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_writeable, Py_False) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":328
 *         self._shell_map.flags.writeable = False
 *         self._nprims.flags.writeable = False
 *         self._shell_types.flags.writeable = False             # <<<<<<<<<<<<<<
 *         self._alphas.flags.writeable = False
 *         self._con_coeffs.flags.writeable = False
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_shell_types), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_writeable, Py_False) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":329
 *         self._nprims.flags.writeable = False
 *         self._shell_types.flags.writeable = False
 *         self._alphas.flags.writeable = False             # <<<<<<<<<<<<<<
 *         self._con_coeffs.flags.writeable = False
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_alphas), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_writeable, Py_False) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":330
 *         self._shell_types.flags.writeable = False
 *         self._alphas.flags.writeable = False
 *         self._con_coeffs.flags.writeable = False             # <<<<<<<<<<<<<<
 * 
 *         # Check array dimensions
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_con_coeffs), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_t_2, __pyx_n_s_writeable, Py_False) < 0) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":333
 * 
 *         # Check array dimensions
 *         if self._centers.ndim != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError('centers must be a 2D array')
 *         if self._shell_map.ndim != 1:
 */
  __pyx_t_5 = ((__pyx_v_self->_centers->nd != 2) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":334
 *         # Check array dimensions
 *         if self._centers.ndim != 2:
 *             raise TypeError('centers must be a 2D array')             # <<<<<<<<<<<<<<
 *         if self._shell_map.ndim != 1:
 *             raise TypeError('shell_map must be a 1D array')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 334, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":333
 * 
 *         # Check array dimensions
 *         if self._centers.ndim != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError('centers must be a 2D array')
 *         if self._shell_map.ndim != 1:
 */
  }

  /* "horton/gbasis/cext.pyx":335
 *         if self._centers.ndim != 2:
 *             raise TypeError('centers must be a 2D array')
 *         if self._shell_map.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('shell_map must be a 1D array')
 *         if self._nprims.ndim != 1:
 */
  __pyx_t_5 = ((__pyx_v_self->_shell_map->nd != 1) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":336
 *             raise TypeError('centers must be a 2D array')
 *         if self._shell_map.ndim != 1:
 *             raise TypeError('shell_map must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._nprims.ndim != 1:
 *             raise TypeError('nprims must be a 1D array')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 336, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":335
 *         if self._centers.ndim != 2:
 *             raise TypeError('centers must be a 2D array')
 *         if self._shell_map.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('shell_map must be a 1D array')
 *         if self._nprims.ndim != 1:
 */
  }

  /* "horton/gbasis/cext.pyx":337
 *         if self._shell_map.ndim != 1:
 *             raise TypeError('shell_map must be a 1D array')
 *         if self._nprims.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('nprims must be a 1D array')
 *         if self._shell_types.ndim != 1:
 */
  __pyx_t_5 = ((__pyx_v_self->_nprims->nd != 1) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":338
 *             raise TypeError('shell_map must be a 1D array')
 *         if self._nprims.ndim != 1:
 *             raise TypeError('nprims must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._shell_types.ndim != 1:
 *             raise TypeError('shell_types must be a 1D array')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 338, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":337
 *         if self._shell_map.ndim != 1:
 *             raise TypeError('shell_map must be a 1D array')
 *         if self._nprims.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('nprims must be a 1D array')
 *         if self._shell_types.ndim != 1:
 */
  }

  /* "horton/gbasis/cext.pyx":339
 *         if self._nprims.ndim != 1:
 *             raise TypeError('nprims must be a 1D array')
 *         if self._shell_types.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('shell_types must be a 1D array')
 *         if self._alphas.ndim != 1:
 */
  __pyx_t_5 = ((__pyx_v_self->_shell_types->nd != 1) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":340
 *             raise TypeError('nprims must be a 1D array')
 *         if self._shell_types.ndim != 1:
 *             raise TypeError('shell_types must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._alphas.ndim != 1:
 *             raise TypeError('alphas must be a 1D array')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 340, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":339
 *         if self._nprims.ndim != 1:
 *             raise TypeError('nprims must be a 1D array')
 *         if self._shell_types.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('shell_types must be a 1D array')
 *         if self._alphas.ndim != 1:
 */
  }

  /* "horton/gbasis/cext.pyx":341
 *         if self._shell_types.ndim != 1:
 *             raise TypeError('shell_types must be a 1D array')
 *         if self._alphas.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('alphas must be a 1D array')
 *         if self._con_coeffs.ndim != 1:
 */
  __pyx_t_5 = ((__pyx_v_self->_alphas->nd != 1) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":342
 *             raise TypeError('shell_types must be a 1D array')
 *         if self._alphas.ndim != 1:
 *             raise TypeError('alphas must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._con_coeffs.ndim != 1:
 *             raise TypeError('con_coeffs must be a 1D array')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 342, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":341
 *         if self._shell_types.ndim != 1:
 *             raise TypeError('shell_types must be a 1D array')
 *         if self._alphas.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('alphas must be a 1D array')
 *         if self._con_coeffs.ndim != 1:
 */
  }

  /* "horton/gbasis/cext.pyx":343
 *         if self._alphas.ndim != 1:
 *             raise TypeError('alphas must be a 1D array')
 *         if self._con_coeffs.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('con_coeffs must be a 1D array')
 * 
 */
  __pyx_t_5 = ((__pyx_v_self->_con_coeffs->nd != 1) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":344
 *             raise TypeError('alphas must be a 1D array')
 *         if self._con_coeffs.ndim != 1:
 *             raise TypeError('con_coeffs must be a 1D array')             # <<<<<<<<<<<<<<
 * 
 *         # Essential array checks
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 344, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":343
 *         if self._alphas.ndim != 1:
 *             raise TypeError('alphas must be a 1D array')
 *         if self._con_coeffs.ndim != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError('con_coeffs must be a 1D array')
 * 
 */
  }

  /* "horton/gbasis/cext.pyx":347
 * 
 *         # Essential array checks
 *         if self._centers.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('centers must have three columns.')
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 */
  __pyx_t_5 = (((__pyx_v_self->_centers->dimensions[1]) != 3) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":348
 *         # Essential array checks
 *         if self._centers.shape[1] != 3:
 *             raise TypeError('centers must have three columns.')             # <<<<<<<<<<<<<<
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('nprims and shell_map must have the same length.')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 348, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":347
 * 
 *         # Essential array checks
 *         if self._centers.shape[1] != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError('centers must have three columns.')
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 */
  }

  /* "horton/gbasis/cext.pyx":349
 *         if self._centers.shape[1] != 3:
 *             raise TypeError('centers must have three columns.')
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:             # <<<<<<<<<<<<<<
 *             raise TypeError('nprims and shell_map must have the same length.')
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 */
  __pyx_t_5 = (((__pyx_v_self->_nprims->dimensions[0]) != (__pyx_v_self->_shell_map->dimensions[0])) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":350
 *             raise TypeError('centers must have three columns.')
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('nprims and shell_map must have the same length.')             # <<<<<<<<<<<<<<
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('shell_types and shell_map must have the same length.')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 350, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":349
 *         if self._centers.shape[1] != 3:
 *             raise TypeError('centers must have three columns.')
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:             # <<<<<<<<<<<<<<
 *             raise TypeError('nprims and shell_map must have the same length.')
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 */
  }

  /* "horton/gbasis/cext.pyx":351
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('nprims and shell_map must have the same length.')
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:             # <<<<<<<<<<<<<<
 *             raise TypeError('shell_types and shell_map must have the same length.')
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:
 */
  __pyx_t_5 = (((__pyx_v_self->_shell_types->dimensions[0]) != (__pyx_v_self->_shell_map->dimensions[0])) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":352
 *             raise TypeError('nprims and shell_map must have the same length.')
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('shell_types and shell_map must have the same length.')             # <<<<<<<<<<<<<<
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:
 *             raise TypeError('alphas and con_coeffs must have the same length.')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 352, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":351
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('nprims and shell_map must have the same length.')
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:             # <<<<<<<<<<<<<<
 *             raise TypeError('shell_types and shell_map must have the same length.')
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:
 */
  }

  /* "horton/gbasis/cext.pyx":353
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('shell_types and shell_map must have the same length.')
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:             # <<<<<<<<<<<<<<
 *             raise TypeError('alphas and con_coeffs must have the same length.')
 * 
 */
  __pyx_t_5 = (((__pyx_v_self->_alphas->dimensions[0]) != (__pyx_v_self->_con_coeffs->dimensions[0])) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":354
 *             raise TypeError('shell_types and shell_map must have the same length.')
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:
 *             raise TypeError('alphas and con_coeffs must have the same length.')             # <<<<<<<<<<<<<<
 * 
 *         # Consistency checks
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 354, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":353
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('shell_types and shell_map must have the same length.')
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:             # <<<<<<<<<<<<<<
 *             raise TypeError('alphas and con_coeffs must have the same length.')
 * 
 */
  }

  /* "horton/gbasis/cext.pyx":357
 * 
 *         # Consistency checks
 *         if self._shell_map.min() < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('shell_map can not contain negative values.')
 *         if self._shell_map.max() >= self.centers.shape[0]:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_shell_map), __pyx_n_s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":358
 *         # Consistency checks
 *         if self._shell_map.min() < 0:
 *             raise ValueError('shell_map can not contain negative values.')             # <<<<<<<<<<<<<<
 *         if self._shell_map.max() >= self.centers.shape[0]:
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 358, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":357
 * 
 *         # Consistency checks
 *         if self._shell_map.min() < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('shell_map can not contain negative values.')
 *         if self._shell_map.max() >= self.centers.shape[0]:
 */
  }

  /* "horton/gbasis/cext.pyx":359
 *         if self._shell_map.min() < 0:
 *             raise ValueError('shell_map can not contain negative values.')
 *         if self._shell_map.max() >= self.centers.shape[0]:             # <<<<<<<<<<<<<<
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 *         if self._nprims.min() < 1:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_shell_map), __pyx_n_s_max); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":360
 *             raise ValueError('shell_map can not contain negative values.')
 *         if self._shell_map.max() >= self.centers.shape[0]:
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')             # <<<<<<<<<<<<<<
 *         if self._nprims.min() < 1:
 *             raise ValueError('nprims elements must be strictly positive.')
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 360, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":359
 *         if self._shell_map.min() < 0:
 *             raise ValueError('shell_map can not contain negative values.')
 *         if self._shell_map.max() >= self.centers.shape[0]:             # <<<<<<<<<<<<<<
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 *         if self._nprims.min() < 1:
 */
  }

  /* "horton/gbasis/cext.pyx":361
 *         if self._shell_map.max() >= self.centers.shape[0]:
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 *         if self._nprims.min() < 1:             # <<<<<<<<<<<<<<
 *             raise ValueError('nprims elements must be strictly positive.')
 *         if (self._shell_types == -1).any():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_nprims), __pyx_n_s_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_4 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":362
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 *         if self._nprims.min() < 1:
 *             raise ValueError('nprims elements must be strictly positive.')             # <<<<<<<<<<<<<<
 *         if (self._shell_types == -1).any():
 *             raise ValueError('The shell_type -1 is not supported.')
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 362, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":361
 *         if self._shell_map.max() >= self.centers.shape[0]:
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 *         if self._nprims.min() < 1:             # <<<<<<<<<<<<<<
 *             raise ValueError('nprims elements must be strictly positive.')
 *         if (self._shell_types == -1).any():
 */
  }

  /* "horton/gbasis/cext.pyx":363
 *         if self._nprims.min() < 1:
 *             raise ValueError('nprims elements must be strictly positive.')
 *         if (self._shell_types == -1).any():             # <<<<<<<<<<<<<<
 *             raise ValueError('The shell_type -1 is not supported.')
 *         cdef long nprim_total = self._nprims.sum()
 */
  __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_self->_shell_types), __pyx_int_neg_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_any); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":364
 *             raise ValueError('nprims elements must be strictly positive.')
 *         if (self._shell_types == -1).any():
 *             raise ValueError('The shell_type -1 is not supported.')             # <<<<<<<<<<<<<<
 *         cdef long nprim_total = self._nprims.sum()
 *         if (self._alphas.shape[0] != nprim_total):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 364, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":363
 *         if self._nprims.min() < 1:
 *             raise ValueError('nprims elements must be strictly positive.')
 *         if (self._shell_types == -1).any():             # <<<<<<<<<<<<<<
 *             raise ValueError('The shell_type -1 is not supported.')
 *         cdef long nprim_total = self._nprims.sum()
 */
  }

  /* "horton/gbasis/cext.pyx":365
 *         if (self._shell_types == -1).any():
 *             raise ValueError('The shell_type -1 is not supported.')
 *         cdef long nprim_total = self._nprims.sum()             # <<<<<<<<<<<<<<
 *         if (self._alphas.shape[0] != nprim_total):
 *             raise TypeError('The length of alphas must equal the total number of primitives.')
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_nprims), __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_nprim_total = __pyx_t_6;

  /* "horton/gbasis/cext.pyx":366
 *             raise ValueError('The shell_type -1 is not supported.')
 *         cdef long nprim_total = self._nprims.sum()
 *         if (self._alphas.shape[0] != nprim_total):             # <<<<<<<<<<<<<<
 *             raise TypeError('The length of alphas must equal the total number of primitives.')
 * 
 */
  __pyx_t_5 = (((__pyx_v_self->_alphas->dimensions[0]) != __pyx_v_nprim_total) != 0);
  if (unlikely(__pyx_t_5)) {

    /* "horton/gbasis/cext.pyx":367
 *         cdef long nprim_total = self._nprims.sum()
 *         if (self._alphas.shape[0] != nprim_total):
 *             raise TypeError('The length of alphas must equal the total number of primitives.')             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 367, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":366
 *             raise ValueError('The shell_type -1 is not supported.')
 *         cdef long nprim_total = self._nprims.sum()
 *         if (self._alphas.shape[0] != nprim_total):             # <<<<<<<<<<<<<<
 *             raise TypeError('The length of alphas must equal the total number of primitives.')
 * 
 */
  }

  /* "horton/gbasis/cext.pyx":309
 *     cdef np.ndarray _con_coeffs
 * 
 *     def __cinit__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):             # <<<<<<<<<<<<<<
 *         # Make private copies of the input arrays.
 *         self._centers = np.array(centers, dtype=float)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":369
 *             raise TypeError('The length of alphas must equal the total number of primitives.')
 * 
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):             # <<<<<<<<<<<<<<
 *         if self.__class__ == GBasis:
 *             raise NotImplementedError('GBasis is an abstract base class')
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_6GBasis_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_6GBasis_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_centers = 0;
  CYTHON_UNUSED PyObject *__pyx_v_shell_map = 0;
  CYTHON_UNUSED PyObject *__pyx_v_nprims = 0;
  CYTHON_UNUSED PyObject *__pyx_v_shell_types = 0;
  CYTHON_UNUSED PyObject *__pyx_v_alphas = 0;
  CYTHON_UNUSED PyObject *__pyx_v_con_coeffs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_centers,&__pyx_n_s_shell_map,&__pyx_n_s_nprims,&__pyx_n_s_shell_types,&__pyx_n_s_alphas,&__pyx_n_s_con_coeffs,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centers)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 1); __PYX_ERR(0, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nprims)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 2); __PYX_ERR(0, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 3); __PYX_ERR(0, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alphas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 4); __PYX_ERR(0, 369, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_con_coeffs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 5); __PYX_ERR(0, 369, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 369, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_centers = values[0];
    __pyx_v_shell_map = values[1];
    __pyx_v_nprims = values[2];
    __pyx_v_shell_types = values[3];
    __pyx_v_alphas = values[4];
    __pyx_v_con_coeffs = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 369, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_2__init__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self), __pyx_v_centers, __pyx_v_shell_map, __pyx_v_nprims, __pyx_v_shell_types, __pyx_v_alphas, __pyx_v_con_coeffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_6GBasis_2__init__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_centers, CYTHON_UNUSED PyObject *__pyx_v_shell_map, CYTHON_UNUSED PyObject *__pyx_v_nprims, CYTHON_UNUSED PyObject *__pyx_v_shell_types, CYTHON_UNUSED PyObject *__pyx_v_alphas, CYTHON_UNUSED PyObject *__pyx_v_con_coeffs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "horton/gbasis/cext.pyx":370
 * 
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 *         if self.__class__ == GBasis:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError('GBasis is an abstract base class')
 *         self._log_init()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, ((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GBasis), Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "horton/gbasis/cext.pyx":371
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 *         if self.__class__ == GBasis:
 *             raise NotImplementedError('GBasis is an abstract base class')             # <<<<<<<<<<<<<<
 *         self._log_init()
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 371, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":370
 * 
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 *         if self.__class__ == GBasis:             # <<<<<<<<<<<<<<
 *             raise NotImplementedError('GBasis is an abstract base class')
 *         self._log_init()
 */
  }

  /* "horton/gbasis/cext.pyx":372
 *         if self.__class__ == GBasis:
 *             raise NotImplementedError('GBasis is an abstract base class')
 *         self._log_init()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":369
 *             raise TypeError('The length of alphas must equal the total number of primitives.')
 * 
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):             # <<<<<<<<<<<<<<
 *         if self.__class__ == GBasis:
 *             raise NotImplementedError('GBasis is an abstract base class')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":374
 *         self._log_init()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_6GBasis_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_6GBasis_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_6GBasis_4__dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_6GBasis_4__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":375
 * 
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  delete __pyx_v_self->_this;

  /* "horton/gbasis/cext.pyx":374
 *         self._log_init()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":378
 * 
 *     @classmethod
 *     def concatenate(cls, *gbs):             # <<<<<<<<<<<<<<
 *         '''Concatenate multiple basis objects into a new one.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7concatenate(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_6concatenate[] = "GBasis.concatenate(type cls, *gbs)\nConcatenate multiple basis objects into a new one.\n\n           **Arguments:** each argument is an instance of the same subclass of\n           GBasis.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7concatenate(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_gbs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concatenate (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "concatenate", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_gbs = __pyx_args;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_6concatenate(((PyTypeObject*)__pyx_v_cls), __pyx_v_gbs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_gbs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6concatenate(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_gbs) {
  PyObject *__pyx_v_gb = NULL;
  PyObject *__pyx_v_centers = NULL;
  PyObject *__pyx_v_shell_map = NULL;
  PyObject *__pyx_v_offset = NULL;
  PyObject *__pyx_v_nprims = NULL;
  PyObject *__pyx_v_shell_types = NULL;
  PyObject *__pyx_v_alphas = NULL;
  PyObject *__pyx_v_con_coeffs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("concatenate", 0);

  /* "horton/gbasis/cext.pyx":385
 *         '''
 *         # check if the classes match
 *         for gb in gbs:             # <<<<<<<<<<<<<<
 *             assert isinstance(gb, cls)
 * 
 */
  __pyx_t_1 = __pyx_v_gbs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 385, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_gb, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":386
 *         # check if the classes match
 *         for gb in gbs:
 *             assert isinstance(gb, cls)             # <<<<<<<<<<<<<<
 * 
 *         # do the concatenation of each array properly
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_TypeCheck(__pyx_v_gb, __pyx_v_cls); 
      if (unlikely(!(__pyx_t_4 != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 386, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":385
 *         '''
 *         # check if the classes match
 *         for gb in gbs:             # <<<<<<<<<<<<<<
 *             assert isinstance(gb, cls)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":389
 * 
 *         # do the concatenation of each array properly
 *         centers = np.concatenate([gb.centers for gb in gbs])             # <<<<<<<<<<<<<<
 *         shell_map = []
 *         offset = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_v_gbs; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 389, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_gb, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_gb, __pyx_n_s_centers); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_centers = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":390
 *         # do the concatenation of each array properly
 *         centers = np.concatenate([gb.centers for gb in gbs])
 *         shell_map = []             # <<<<<<<<<<<<<<
 *         offset = 0
 *         for gb in gbs:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_shell_map = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":391
 *         centers = np.concatenate([gb.centers for gb in gbs])
 *         shell_map = []
 *         offset = 0             # <<<<<<<<<<<<<<
 *         for gb in gbs:
 *             shell_map.append(gb.shell_map + offset)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_offset = __pyx_int_0;

  /* "horton/gbasis/cext.pyx":392
 *         shell_map = []
 *         offset = 0
 *         for gb in gbs:             # <<<<<<<<<<<<<<
 *             shell_map.append(gb.shell_map + offset)
 *             offset += gb.ncenter
 */
  __pyx_t_1 = __pyx_v_gbs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 392, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_gb, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":393
 *         offset = 0
 *         for gb in gbs:
 *             shell_map.append(gb.shell_map + offset)             # <<<<<<<<<<<<<<
 *             offset += gb.ncenter
 *         shell_map = np.concatenate(shell_map)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_gb, __pyx_n_s_shell_map); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_v_offset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_8 = __Pyx_PyObject_Append(__pyx_v_shell_map, __pyx_t_3); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":394
 *         for gb in gbs:
 *             shell_map.append(gb.shell_map + offset)
 *             offset += gb.ncenter             # <<<<<<<<<<<<<<
 *         shell_map = np.concatenate(shell_map)
 *         nprims = np.concatenate([gb.nprims for gb in gbs])
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_gb, __pyx_n_s_ncenter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_offset, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_offset, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":392
 *         shell_map = []
 *         offset = 0
 *         for gb in gbs:             # <<<<<<<<<<<<<<
 *             shell_map.append(gb.shell_map + offset)
 *             offset += gb.ncenter
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":395
 *             shell_map.append(gb.shell_map + offset)
 *             offset += gb.ncenter
 *         shell_map = np.concatenate(shell_map)             # <<<<<<<<<<<<<<
 *         nprims = np.concatenate([gb.nprims for gb in gbs])
 *         shell_types = np.concatenate([gb.shell_types for gb in gbs])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_shell_map) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_shell_map);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_shell_map, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":396
 *             offset += gb.ncenter
 *         shell_map = np.concatenate(shell_map)
 *         nprims = np.concatenate([gb.nprims for gb in gbs])             # <<<<<<<<<<<<<<
 *         shell_types = np.concatenate([gb.shell_types for gb in gbs])
 *         alphas = np.concatenate([gb.alphas for gb in gbs])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_v_gbs; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 396, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_gb, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_gb, __pyx_n_s_nprims); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_nprims = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":397
 *         shell_map = np.concatenate(shell_map)
 *         nprims = np.concatenate([gb.nprims for gb in gbs])
 *         shell_types = np.concatenate([gb.shell_types for gb in gbs])             # <<<<<<<<<<<<<<
 *         alphas = np.concatenate([gb.alphas for gb in gbs])
 *         con_coeffs = np.concatenate([gb.con_coeffs for gb in gbs])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_v_gbs; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 397, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_gb, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_gb, __pyx_n_s_shell_types); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 397, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_shell_types = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":398
 *         nprims = np.concatenate([gb.nprims for gb in gbs])
 *         shell_types = np.concatenate([gb.shell_types for gb in gbs])
 *         alphas = np.concatenate([gb.alphas for gb in gbs])             # <<<<<<<<<<<<<<
 *         con_coeffs = np.concatenate([gb.con_coeffs for gb in gbs])
 *         return cls(centers, shell_map, nprims, shell_types, alphas, con_coeffs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __pyx_v_gbs; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 398, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_gb, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_gb, __pyx_n_s_alphas); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 398, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_alphas = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":399
 *         shell_types = np.concatenate([gb.shell_types for gb in gbs])
 *         alphas = np.concatenate([gb.alphas for gb in gbs])
 *         con_coeffs = np.concatenate([gb.con_coeffs for gb in gbs])             # <<<<<<<<<<<<<<
 *         return cls(centers, shell_map, nprims, shell_types, alphas, con_coeffs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __pyx_v_gbs; __Pyx_INCREF(__pyx_t_6); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_2); __Pyx_INCREF(__pyx_t_7); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_gb, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_gb, __pyx_n_s_con_coeffs); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_con_coeffs = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":400
 *         alphas = np.concatenate([gb.alphas for gb in gbs])
 *         con_coeffs = np.concatenate([gb.con_coeffs for gb in gbs])
 *         return cls(centers, shell_map, nprims, shell_types, alphas, con_coeffs)             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_centers);
  __Pyx_GIVEREF(__pyx_v_centers);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_centers);
  __Pyx_INCREF(__pyx_v_shell_map);
  __Pyx_GIVEREF(__pyx_v_shell_map);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_shell_map);
  __Pyx_INCREF(__pyx_v_nprims);
  __Pyx_GIVEREF(__pyx_v_nprims);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_nprims);
  __Pyx_INCREF(__pyx_v_shell_types);
  __Pyx_GIVEREF(__pyx_v_shell_types);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_shell_types);
  __Pyx_INCREF(__pyx_v_alphas);
  __Pyx_GIVEREF(__pyx_v_alphas);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_alphas);
  __Pyx_INCREF(__pyx_v_con_coeffs);
  __Pyx_GIVEREF(__pyx_v_con_coeffs);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_v_con_coeffs);
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":378
 * 
 *     @classmethod
 *     def concatenate(cls, *gbs):             # <<<<<<<<<<<<<<
 *         '''Concatenate multiple basis objects into a new one.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.concatenate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_gb);
  __Pyx_XDECREF(__pyx_v_centers);
  __Pyx_XDECREF(__pyx_v_shell_map);
  __Pyx_XDECREF(__pyx_v_offset);
  __Pyx_XDECREF(__pyx_v_nprims);
  __Pyx_XDECREF(__pyx_v_shell_types);
  __Pyx_XDECREF(__pyx_v_alphas);
  __Pyx_XDECREF(__pyx_v_con_coeffs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":403
 * 
 *     @classmethod
 *     def from_hdf5(cls, grp):             # <<<<<<<<<<<<<<
 *         return cls(
 *             np.array(grp['centers']),
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_9from_hdf5(PyObject *__pyx_v_cls, PyObject *__pyx_v_grp); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_8from_hdf5[] = "GBasis.from_hdf5(type cls, grp)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_9from_hdf5(PyObject *__pyx_v_cls, PyObject *__pyx_v_grp) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_hdf5 (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_8from_hdf5(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_grp));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_8from_hdf5(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_grp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("from_hdf5", 0);

  /* "horton/gbasis/cext.pyx":404
 *     @classmethod
 *     def from_hdf5(cls, grp):
 *         return cls(             # <<<<<<<<<<<<<<
 *             np.array(grp['centers']),
 *             np.array(grp['shell_map']),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":405
 *     def from_hdf5(cls, grp):
 *         return cls(
 *             np.array(grp['centers']),             # <<<<<<<<<<<<<<
 *             np.array(grp['shell_map']),
 *             np.array(grp['nprims']),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_n_s_centers); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":406
 *         return cls(
 *             np.array(grp['centers']),
 *             np.array(grp['shell_map']),             # <<<<<<<<<<<<<<
 *             np.array(grp['nprims']),
 *             np.array(grp['shell_types']),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_n_s_shell_map); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "horton/gbasis/cext.pyx":407
 *             np.array(grp['centers']),
 *             np.array(grp['shell_map']),
 *             np.array(grp['nprims']),             # <<<<<<<<<<<<<<
 *             np.array(grp['shell_types']),
 *             np.array(grp['alphas']),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_n_s_nprims); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":408
 *             np.array(grp['shell_map']),
 *             np.array(grp['nprims']),
 *             np.array(grp['shell_types']),             # <<<<<<<<<<<<<<
 *             np.array(grp['alphas']),
 *             np.array(grp['con_coeffs'])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_n_s_shell_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":409
 *             np.array(grp['nprims']),
 *             np.array(grp['shell_types']),
 *             np.array(grp['alphas']),             # <<<<<<<<<<<<<<
 *             np.array(grp['con_coeffs'])
 *         )
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_n_s_alphas); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
    }
  }
  __pyx_t_6 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "horton/gbasis/cext.pyx":410
 *             np.array(grp['shell_types']),
 *             np.array(grp['alphas']),
 *             np.array(grp['con_coeffs'])             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_n_s_con_coeffs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "horton/gbasis/cext.pyx":404
 *     @classmethod
 *     def from_hdf5(cls, grp):
 *         return cls(             # <<<<<<<<<<<<<<
 *             np.array(grp['centers']),
 *             np.array(grp['shell_map']),
 */
  __pyx_t_8 = PyTuple_New(6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":403
 * 
 *     @classmethod
 *     def from_hdf5(cls, grp):             # <<<<<<<<<<<<<<
 *         return cls(
 *             np.array(grp['centers']),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.from_hdf5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":413
 *         )
 * 
 *     def to_hdf5(self, grp):             # <<<<<<<<<<<<<<
 *         grp['centers'] = self.centers
 *         grp['shell_map'] = self.shell_map
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_11to_hdf5(PyObject *__pyx_v_self, PyObject *__pyx_v_grp); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_10to_hdf5[] = "GBasis.to_hdf5(self, grp)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_11to_hdf5(PyObject *__pyx_v_self, PyObject *__pyx_v_grp) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_hdf5 (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_10to_hdf5(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self), ((PyObject *)__pyx_v_grp));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_10to_hdf5(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_grp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_hdf5", 0);

  /* "horton/gbasis/cext.pyx":414
 * 
 *     def to_hdf5(self, grp):
 *         grp['centers'] = self.centers             # <<<<<<<<<<<<<<
 *         grp['shell_map'] = self.shell_map
 *         grp['nprims'] = self.nprims
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_grp, __pyx_n_s_centers, __pyx_t_1) < 0)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":415
 *     def to_hdf5(self, grp):
 *         grp['centers'] = self.centers
 *         grp['shell_map'] = self.shell_map             # <<<<<<<<<<<<<<
 *         grp['nprims'] = self.nprims
 *         grp['shell_types'] = self.shell_types
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shell_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_grp, __pyx_n_s_shell_map, __pyx_t_1) < 0)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":416
 *         grp['centers'] = self.centers
 *         grp['shell_map'] = self.shell_map
 *         grp['nprims'] = self.nprims             # <<<<<<<<<<<<<<
 *         grp['shell_types'] = self.shell_types
 *         grp['alphas'] = self.alphas
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nprims); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_grp, __pyx_n_s_nprims, __pyx_t_1) < 0)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":417
 *         grp['shell_map'] = self.shell_map
 *         grp['nprims'] = self.nprims
 *         grp['shell_types'] = self.shell_types             # <<<<<<<<<<<<<<
 *         grp['alphas'] = self.alphas
 *         grp['con_coeffs'] = self.con_coeffs
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shell_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_grp, __pyx_n_s_shell_types, __pyx_t_1) < 0)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":418
 *         grp['nprims'] = self.nprims
 *         grp['shell_types'] = self.shell_types
 *         grp['alphas'] = self.alphas             # <<<<<<<<<<<<<<
 *         grp['con_coeffs'] = self.con_coeffs
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_alphas); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_grp, __pyx_n_s_alphas, __pyx_t_1) < 0)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":419
 *         grp['shell_types'] = self.shell_types
 *         grp['alphas'] = self.alphas
 *         grp['con_coeffs'] = self.con_coeffs             # <<<<<<<<<<<<<<
 * 
 *     # Array properties
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_con_coeffs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_grp, __pyx_n_s_con_coeffs, __pyx_t_1) < 0)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":413
 *         )
 * 
 *     def to_hdf5(self, grp):             # <<<<<<<<<<<<<<
 *         grp['centers'] = self.centers
 *         grp['shell_map'] = self.shell_map
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.to_hdf5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":424
 * 
 *     property centers:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._centers
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7centers_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7centers_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_7centers___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_7centers___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":425
 *     property centers:
 *         def __get__(self):
 *             return self._centers             # <<<<<<<<<<<<<<
 * 
 *     property shell_map:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_centers));
  __pyx_r = ((PyObject *)__pyx_v_self->_centers);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":424
 * 
 *     property centers:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._centers
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":428
 * 
 *     property shell_map:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._shell_map.view()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_9shell_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_9shell_map_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_9shell_map___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_9shell_map___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":429
 *     property shell_map:
 *         def __get__(self):
 *             return self._shell_map.view()             # <<<<<<<<<<<<<<
 * 
 *     property nprims:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_shell_map), __pyx_n_s_view); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":428
 * 
 *     property shell_map:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._shell_map.view()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.shell_map.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":432
 * 
 *     property nprims:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._nprims.view()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6nprims_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6nprims_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_6nprims___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6nprims___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":433
 *     property nprims:
 *         def __get__(self):
 *             return self._nprims.view()             # <<<<<<<<<<<<<<
 * 
 *     property shell_types:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_nprims), __pyx_n_s_view); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":432
 * 
 *     property nprims:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._nprims.view()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.nprims.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":436
 * 
 *     property shell_types:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._shell_types.view()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_11shell_types_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_11shell_types_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_11shell_types___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_11shell_types___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":437
 *     property shell_types:
 *         def __get__(self):
 *             return self._shell_types.view()             # <<<<<<<<<<<<<<
 * 
 *     property alphas:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_shell_types), __pyx_n_s_view); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":436
 * 
 *     property shell_types:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._shell_types.view()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.shell_types.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":440
 * 
 *     property alphas:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._alphas.view()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6alphas_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6alphas_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_6alphas___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6alphas___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":441
 *     property alphas:
 *         def __get__(self):
 *             return self._alphas.view()             # <<<<<<<<<<<<<<
 * 
 *     property con_coeffs:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_alphas), __pyx_n_s_view); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":440
 * 
 *     property alphas:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._alphas.view()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.alphas.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":444
 * 
 *     property con_coeffs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._con_coeffs.view()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_10con_coeffs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_10con_coeffs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_10con_coeffs___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_10con_coeffs___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":445
 *     property con_coeffs:
 *         def __get__(self):
 *             return self._con_coeffs.view()             # <<<<<<<<<<<<<<
 * 
 *     # Array sizes
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_con_coeffs), __pyx_n_s_view); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":444
 * 
 *     property con_coeffs:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._con_coeffs.view()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.con_coeffs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":450
 * 
 *     property ncenter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.centers.shape[0]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7ncenter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7ncenter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_7ncenter___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_7ncenter___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":451
 *     property ncenter:
 *         def __get__(self):
 *             return self.centers.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     property nshell:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":450
 * 
 *     property ncenter:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.centers.shape[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.ncenter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":454
 * 
 *     property nshell:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.shell_map.shape[0]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6nshell_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6nshell_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_6nshell___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6nshell___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":455
 *     property nshell:
 *         def __get__(self):
 *             return self.shell_map.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     property nprim_total:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shell_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":454
 * 
 *     property nshell:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.shell_map.shape[0]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.nshell.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":458
 * 
 *     property nprim_total:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.nprims.sum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_11nprim_total_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_11nprim_total_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_11nprim_total___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_11nprim_total___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":459
 *     property nprim_total:
 *         def __get__(self):
 *             return self.nprims.sum()             # <<<<<<<<<<<<<<
 * 
 *     # Other properties
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nprims); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":458
 * 
 *     property nprim_total:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.nprims.sum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.nprim_total.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":464
 * 
 *     property nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nbasis()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6nbasis_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_6nbasis_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_6nbasis___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_6nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":465
 *     property nbasis:
 *         def __get__(self):
 *             return self._this.get_nbasis()             # <<<<<<<<<<<<<<
 * 
 *     property shell_lookup:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_nbasis()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":464
 * 
 *     property nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nbasis()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.nbasis.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":468
 * 
 *     property shell_lookup:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.npy_intp* shape = [self.nbasis]
 *             tmp = np.PyArray_SimpleNewFromData(1, shape,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_12shell_lookup_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_12shell_lookup_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_12shell_lookup___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_12shell_lookup___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  npy_intp *__pyx_v_shape;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  npy_intp __pyx_t_2;
  npy_intp __pyx_t_3[1];
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":469
 *     property shell_lookup:
 *         def __get__(self):
 *             cdef np.npy_intp* shape = [self.nbasis]             # <<<<<<<<<<<<<<
 *             tmp = np.PyArray_SimpleNewFromData(1, shape,
 *                     np.NPY_LONG, <void*> self._this.get_shell_lookup())
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3[0] = __pyx_t_2;
  __pyx_v_shape = __pyx_t_3;

  /* "horton/gbasis/cext.pyx":470
 *         def __get__(self):
 *             cdef np.npy_intp* shape = [self.nbasis]
 *             tmp = np.PyArray_SimpleNewFromData(1, shape,             # <<<<<<<<<<<<<<
 *                     np.NPY_LONG, <void*> self._this.get_shell_lookup())
 *             return tmp.copy()
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_shape, NPY_LONG, ((void *)__pyx_v_self->_this->get_shell_lookup())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":472
 *             tmp = np.PyArray_SimpleNewFromData(1, shape,
 *                     np.NPY_LONG, <void*> self._this.get_shell_lookup())
 *             return tmp.copy()             # <<<<<<<<<<<<<<
 * 
 *     property basis_offsets:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":468
 * 
 *     property shell_lookup:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.npy_intp* shape = [self.nbasis]
 *             tmp = np.PyArray_SimpleNewFromData(1, shape,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.shell_lookup.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":475
 * 
 *     property basis_offsets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.npy_intp* shape = [self.nshell]
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_LONG,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_13basis_offsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_13basis_offsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_13basis_offsets___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_13basis_offsets___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  npy_intp *__pyx_v_shape;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  npy_intp __pyx_t_2;
  npy_intp __pyx_t_3[1];
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":476
 *     property basis_offsets:
 *         def __get__(self):
 *             cdef np.npy_intp* shape = [self.nshell]             # <<<<<<<<<<<<<<
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_LONG,
 *                         <void*> self._this.get_basis_offsets())
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nshell); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3[0] = __pyx_t_2;
  __pyx_v_shape = __pyx_t_3;

  /* "horton/gbasis/cext.pyx":477
 *         def __get__(self):
 *             cdef np.npy_intp* shape = [self.nshell]
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_LONG,             # <<<<<<<<<<<<<<
 *                         <void*> self._this.get_basis_offsets())
 *             return tmp.copy()
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_shape, NPY_LONG, ((void *)__pyx_v_self->_this->get_basis_offsets())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":479
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_LONG,
 *                         <void*> self._this.get_basis_offsets())
 *             return tmp.copy()             # <<<<<<<<<<<<<<
 * 
 *     property nscales:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":475
 * 
 *     property basis_offsets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef np.npy_intp* shape = [self.nshell]
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_LONG,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.basis_offsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":482
 * 
 *     property nscales:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nscales()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7nscales_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_7nscales_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_7nscales___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_7nscales___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":483
 *     property nscales:
 *         def __get__(self):
 *             return self._this.get_nscales()             # <<<<<<<<<<<<<<
 * 
 *     property max_shell_type:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_nscales()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":482
 * 
 *     property nscales:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nscales()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.nscales.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":486
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_14max_shell_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_14max_shell_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_14max_shell_type___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":487
 *     property max_shell_type:
 *         def __get__(self):
 *             return self._this.get_max_shell_type()             # <<<<<<<<<<<<<<
 * 
 *     def _log_init(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_max_shell_type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":486
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.max_shell_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":489
 *             return self._this.get_max_shell_type()
 * 
 *     def _log_init(self):             # <<<<<<<<<<<<<<
 *         '''Write a summary of the basis to the screen logger'''
 *         if log.do_medium:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_13_log_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_12_log_init[] = "GBasis._log_init(self)\nWrite a summary of the basis to the screen logger";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_13_log_init(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_log_init (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_12_log_init(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_12_log_init(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_v_shell_type_names = NULL;
  PyObject *__pyx_v_descs = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_icenter = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_deflist = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("_log_init", 0);

  /* "horton/gbasis/cext.pyx":491
 *     def _log_init(self):
 *         '''Write a summary of the basis to the screen logger'''
 *         if log.do_medium:             # <<<<<<<<<<<<<<
 *             log('Initialized: %s' % self)
 *             log.deflist([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_do_medium); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "horton/gbasis/cext.pyx":492
 *         '''Write a summary of the basis to the screen logger'''
 *         if log.do_medium:
 *             log('Initialized: %s' % self)             # <<<<<<<<<<<<<<
 *             log.deflist([
 *                 ('Number of basis functions', self.nbasis),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Initialized_s, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":493
 *         if log.do_medium:
 *             log('Initialized: %s' % self)
 *             log.deflist([             # <<<<<<<<<<<<<<
 *                 ('Number of basis functions', self.nbasis),
 *                 ('Number of normalization constants', self.nscales),
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_deflist); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":494
 *             log('Initialized: %s' % self)
 *             log.deflist([
 *                 ('Number of basis functions', self.nbasis),             # <<<<<<<<<<<<<<
 *                 ('Number of normalization constants', self.nscales),
 *                 ('Maximum shell type', self.max_shell_type),
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_kp_s_Number_of_basis_functions);
    __Pyx_GIVEREF(__pyx_kp_s_Number_of_basis_functions);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_Number_of_basis_functions);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":495
 *             log.deflist([
 *                 ('Number of basis functions', self.nbasis),
 *                 ('Number of normalization constants', self.nscales),             # <<<<<<<<<<<<<<
 *                 ('Maximum shell type', self.max_shell_type),
 *             ])
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nscales); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_s_Number_of_normalization_constant);
    __Pyx_GIVEREF(__pyx_kp_s_Number_of_normalization_constant);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_s_Number_of_normalization_constant);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":496
 *                 ('Number of basis functions', self.nbasis),
 *                 ('Number of normalization constants', self.nscales),
 *                 ('Maximum shell type', self.max_shell_type),             # <<<<<<<<<<<<<<
 *             ])
 *             shell_type_names = {
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_kp_s_Maximum_shell_type);
    __Pyx_GIVEREF(__pyx_kp_s_Maximum_shell_type);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_s_Maximum_shell_type);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":493
 *         if log.do_medium:
 *             log('Initialized: %s' % self)
 *             log.deflist([             # <<<<<<<<<<<<<<
 *                 ('Number of basis functions', self.nbasis),
 *                 ('Number of normalization constants', self.nscales),
 */
    __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_7);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":499
 *             ])
 *             shell_type_names = {
 *                 0: 'S', 1: 'P', 2: 'Dc', 3: 'Fc', 4:'Gc', 5: 'Hc', 6: 'Ic',             # <<<<<<<<<<<<<<
 *                 -2: 'Dp', -3: 'Fp', -4:'Gp', -5: 'Hp', -6: 'Ip',
 *             }
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_0, __pyx_n_s_S) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_1, __pyx_n_s_P) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_2, __pyx_n_s_Dc) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_3, __pyx_n_s_Fc) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_4, __pyx_n_s_Gc) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_5, __pyx_n_s_Hc) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_6, __pyx_n_s_Ic) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_neg_2, __pyx_n_s_Dp) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_neg_3, __pyx_n_s_Fp) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_neg_4, __pyx_n_s_Gp) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_neg_5, __pyx_n_s_Hp) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_int_neg_6, __pyx_n_s_Ip) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
    __pyx_v_shell_type_names = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":502
 *                 -2: 'Dp', -3: 'Fp', -4:'Gp', -5: 'Hp', -6: 'Ip',
 *             }
 *             descs = ['']*self.ncenter             # <<<<<<<<<<<<<<
 *             for i in xrange(self.nshell):
 *                 icenter = self.shell_map[i]
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ncenter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s__18);
    __Pyx_GIVEREF(__pyx_kp_s__18);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s__18);
    { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 502, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_temp);
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_temp;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_descs = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":503
 *             }
 *             descs = ['']*self.ncenter
 *             for i in xrange(self.nshell):             # <<<<<<<<<<<<<<
 *                 icenter = self.shell_map[i]
 *                 s = descs[icenter]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nshell); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_4 = __pyx_t_2; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 503, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 503, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 503, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 503, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 503, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "horton/gbasis/cext.pyx":504
 *             descs = ['']*self.ncenter
 *             for i in xrange(self.nshell):
 *                 icenter = self.shell_map[i]             # <<<<<<<<<<<<<<
 *                 s = descs[icenter]
 *                 name = shell_type_names[self.shell_types[i]]
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shell_map); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_icenter, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "horton/gbasis/cext.pyx":505
 *             for i in xrange(self.nshell):
 *                 icenter = self.shell_map[i]
 *                 s = descs[icenter]             # <<<<<<<<<<<<<<
 *                 name = shell_type_names[self.shell_types[i]]
 *                 s += ' %s%i' % (name, self.nprims[i])
 */
      __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_descs, __pyx_v_icenter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "horton/gbasis/cext.pyx":506
 *                 icenter = self.shell_map[i]
 *                 s = descs[icenter]
 *                 name = shell_type_names[self.shell_types[i]]             # <<<<<<<<<<<<<<
 *                 s += ' %s%i' % (name, self.nprims[i])
 *                 descs[icenter] = s
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shell_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_shell_type_names, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_name, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "horton/gbasis/cext.pyx":507
 *                 s = descs[icenter]
 *                 name = shell_type_names[self.shell_types[i]]
 *                 s += ' %s%i' % (name, self.nprims[i])             # <<<<<<<<<<<<<<
 *                 descs[icenter] = s
 *             deflist = []
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nprims); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_name);
      __Pyx_GIVEREF(__pyx_v_name);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_name);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_i, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_s, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "horton/gbasis/cext.pyx":508
 *                 name = shell_type_names[self.shell_types[i]]
 *                 s += ' %s%i' % (name, self.nprims[i])
 *                 descs[icenter] = s             # <<<<<<<<<<<<<<
 *             deflist = []
 *             for i in xrange(self.ncenter):
 */
      if (unlikely(PyObject_SetItem(__pyx_v_descs, __pyx_v_icenter, __pyx_v_s) < 0)) __PYX_ERR(0, 508, __pyx_L1_error)

      /* "horton/gbasis/cext.pyx":503
 *             }
 *             descs = ['']*self.ncenter
 *             for i in xrange(self.nshell):             # <<<<<<<<<<<<<<
 *                 icenter = self.shell_map[i]
 *                 s = descs[icenter]
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":509
 *                 s += ' %s%i' % (name, self.nprims[i])
 *                 descs[icenter] = s
 *             deflist = []             # <<<<<<<<<<<<<<
 *             for i in xrange(self.ncenter):
 *                 deflist.append(('Center % 5i' % i, descs[i]))
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_deflist = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":510
 *                 descs[icenter] = s
 *             deflist = []
 *             for i in xrange(self.ncenter):             # <<<<<<<<<<<<<<
 *                 deflist.append(('Center % 5i' % i, descs[i]))
 *             log.deflist(deflist)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ncenter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 510, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 510, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_1); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 510, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_9(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 510, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "horton/gbasis/cext.pyx":511
 *             deflist = []
 *             for i in xrange(self.ncenter):
 *                 deflist.append(('Center % 5i' % i, descs[i]))             # <<<<<<<<<<<<<<
 *             log.deflist(deflist)
 *             log.blank()
 */
      __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Center_5i, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_descs, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 511, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_deflist, __pyx_t_7); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 511, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "horton/gbasis/cext.pyx":510
 *                 descs[icenter] = s
 *             deflist = []
 *             for i in xrange(self.ncenter):             # <<<<<<<<<<<<<<
 *                 deflist.append(('Center % 5i' % i, descs[i]))
 *             log.deflist(deflist)
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":512
 *             for i in xrange(self.ncenter):
 *                 deflist.append(('Center % 5i' % i, descs[i]))
 *             log.deflist(deflist)             # <<<<<<<<<<<<<<
 *             log.blank()
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_log); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_deflist); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_v_deflist) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_deflist);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":513
 *                 deflist.append(('Center % 5i' % i, descs[i]))
 *             log.deflist(deflist)
 *             log.blank()             # <<<<<<<<<<<<<<
 * 
 *     def get_scales(self):
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_log); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_blank); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":491
 *     def _log_init(self):
 *         '''Write a summary of the basis to the screen logger'''
 *         if log.do_medium:             # <<<<<<<<<<<<<<
 *             log('Initialized: %s' % self)
 *             log.deflist([
 */
  }

  /* "horton/gbasis/cext.pyx":489
 *             return self._this.get_max_shell_type()
 * 
 *     def _log_init(self):             # <<<<<<<<<<<<<<
 *         '''Write a summary of the basis to the screen logger'''
 *         if log.do_medium:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis._log_init", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_shell_type_names);
  __Pyx_XDECREF(__pyx_v_descs);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_icenter);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_deflist);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":515
 *             log.blank()
 * 
 *     def get_scales(self):             # <<<<<<<<<<<<<<
 *         # A **copy** of the scales is returned.
 *         cdef np.npy_intp shape[1]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_15get_scales(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_14get_scales[] = "GBasis.get_scales(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_15get_scales(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_scales (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_14get_scales(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_14get_scales(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  npy_intp __pyx_v_shape[1];
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  npy_intp __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_scales", 0);

  /* "horton/gbasis/cext.pyx":518
 *         # A **copy** of the scales is returned.
 *         cdef np.npy_intp shape[1]
 *         shape[0] = self.nscales             # <<<<<<<<<<<<<<
 *         tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_scales(0))
 *         return tmp.copy()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nscales); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_shape[0]) = __pyx_t_2;

  /* "horton/gbasis/cext.pyx":519
 *         cdef np.npy_intp shape[1]
 *         shape[0] = self.nscales
 *         tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_scales(0))             # <<<<<<<<<<<<<<
 *         return tmp.copy()
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_shape, NPY_DOUBLE, ((void *)__pyx_v_self->_this->get_scales(0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":520
 *         shape[0] = self.nscales
 *         tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_scales(0))
 *         return tmp.copy()             # <<<<<<<<<<<<<<
 * 
 *     # low-level compute routines, for debugging only
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":515
 *             log.blank()
 * 
 *     def get_scales(self):             # <<<<<<<<<<<<<<
 *         # A **copy** of the scales is returned.
 *         cdef np.npy_intp shape[1]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.get_scales", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":523
 * 
 *     # low-level compute routines, for debugging only
 *     def compute_grid_point1(self, np.ndarray[double, ndim=1] output not None,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=1] point not None,
 *                             GB1DMGridFn grid_fn not None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_17compute_grid_point1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_16compute_grid_point1[] = "GBasis.compute_grid_point1(self, ndarray output, ndarray point, GB1DMGridFn grid_fn)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_17compute_grid_point1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_output = 0;
  PyArrayObject *__pyx_v_point = 0;
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_point1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,&__pyx_n_s_point,&__pyx_n_s_grid_fn,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_point)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_point1", 1, 3, 3, 1); __PYX_ERR(0, 523, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grid_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_point1", 1, 3, 3, 2); __PYX_ERR(0, 523, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_point1") < 0)) __PYX_ERR(0, 523, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_output = ((PyArrayObject *)values[0]);
    __pyx_v_point = ((PyArrayObject *)values[1]);
    __pyx_v_grid_fn = ((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_point1", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 523, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.compute_grid_point1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 0, "output", 0))) __PYX_ERR(0, 523, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_point), __pyx_ptype_5numpy_ndarray, 0, "point", 0))) __PYX_ERR(0, 524, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_grid_fn), __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn, 0, "grid_fn", 0))) __PYX_ERR(0, 525, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_16compute_grid_point1(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self), __pyx_v_output, __pyx_v_point, __pyx_v_grid_fn);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_16compute_grid_point1(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyArrayObject *__pyx_v_output, PyArrayObject *__pyx_v_point, struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point;
  __Pyx_Buffer __pyx_pybuffer_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("compute_grid_point1", 0);
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  __pyx_pybuffer_point.pybuffer.buf = NULL;
  __pyx_pybuffer_point.refcount = 0;
  __pyx_pybuffernd_point.data = NULL;
  __pyx_pybuffernd_point.rcbuffer = &__pyx_pybuffer_point;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 523, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_point, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 523, __pyx_L1_error)
  }
  __pyx_pybuffernd_point.diminfo[0].strides = __pyx_pybuffernd_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point.diminfo[0].shape = __pyx_pybuffernd_point.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":526
 *                             np.ndarray[double, ndim=1] point not None,
 *                             GB1DMGridFn grid_fn not None):
 *         assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert output.shape[0] == self.nbasis
 *         assert point.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 526, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":527
 *                             GB1DMGridFn grid_fn not None):
 *         assert output.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self.nbasis             # <<<<<<<<<<<<<<
 *         assert point.flags['C_CONTIGUOUS']
 *         assert point.shape[0] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 527, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":528
 *         assert output.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self.nbasis
 *         assert point.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert point.shape[0] == 3
 *         self._this.compute_grid_point1(&output[0], &point[0], grid_fn._this)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_point), __pyx_n_s_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 528, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":529
 *         assert output.shape[0] == self.nbasis
 *         assert point.flags['C_CONTIGUOUS']
 *         assert point.shape[0] == 3             # <<<<<<<<<<<<<<
 *         self._this.compute_grid_point1(&output[0], &point[0], grid_fn._this)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_point->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 529, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":530
 *         assert point.flags['C_CONTIGUOUS']
 *         assert point.shape[0] == 3
 *         self._this.compute_grid_point1(&output[0], &point[0], grid_fn._this)             # <<<<<<<<<<<<<<
 * 
 *     def get_subset(self, ishells):
 */
  __pyx_t_5 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_t_6 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_point.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_6 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_6 = 0;
  if (unlikely(__pyx_t_6 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_6);
    __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_v_self->_this->compute_grid_point1((&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_output.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_point.diminfo[0].strides))), __pyx_v_grid_fn->_this);

  /* "horton/gbasis/cext.pyx":523
 * 
 *     # low-level compute routines, for debugging only
 *     def compute_grid_point1(self, np.ndarray[double, ndim=1] output not None,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=1] point not None,
 *                             GB1DMGridFn grid_fn not None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.compute_grid_point1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":532
 *         self._this.compute_grid_point1(&output[0], &point[0], grid_fn._this)
 * 
 *     def get_subset(self, ishells):             # <<<<<<<<<<<<<<
 *         '''Construct a sub basis set for a selection of shells
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_19get_subset(PyObject *__pyx_v_self, PyObject *__pyx_v_ishells); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_18get_subset[] = "GBasis.get_subset(self, ishells)\nConstruct a sub basis set for a selection of shells\n\n           **Argument:**\n\n           ishells\n                A list of indexes of shells to be retained in the sub basis set\n\n           **Returns:** An instance of the same class as self containing only\n           the basis functions of self that correspond to the select shells in\n           the ``ishells`` list.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_19get_subset(PyObject *__pyx_v_self, PyObject *__pyx_v_ishells) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_subset (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_18get_subset(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self), ((PyObject *)__pyx_v_ishells));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6horton_6gbasis_4cext_6GBasis_10get_subset_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "horton/gbasis/cext.pyx":576
 *         ibasis_list = []
 *         for new_ishell, ishell in enumerate(ishells):
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))             # <<<<<<<<<<<<<<
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])
 *             ibasis_list.extend(range(ibasis_old, ibasis_old+nbasis))
 */

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_10get_subset_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *)__pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr(__pyx_ptype_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 576, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6horton_6gbasis_4cext_6GBasis_10get_subset_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_get_subset_locals_genexpr, __pyx_n_s_horton_gbasis_cext); if (unlikely(!gen)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.get_subset.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6horton_6gbasis_4cext_6GBasis_10get_subset_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 576, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ishell)) { __Pyx_RaiseClosureNameError("ishell"); __PYX_ERR(0, 576, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_ishell); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 576, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 576, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 576, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 576, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 576, __pyx_L1_error) }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_shell_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_From_long(get_shell_nbasis(__pyx_t_6)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 576, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":532
 *         self._this.compute_grid_point1(&output[0], &point[0], grid_fn._this)
 * 
 *     def get_subset(self, ishells):             # <<<<<<<<<<<<<<
 *         '''Construct a sub basis set for a selection of shells
 * 
 */

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_18get_subset(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_ishells) {
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *__pyx_cur_scope;
  PyObject *__pyx_v_icenters = NULL;
  PyObject *__pyx_v_new_centers = NULL;
  PyObject *__pyx_v_new_shell_map = NULL;
  PyObject *__pyx_v_new_nprims = NULL;
  PyObject *__pyx_v_new_shell_types = NULL;
  PyObject *__pyx_v_new_ishell = NULL;
  PyObject *__pyx_v_new_nprim_total = NULL;
  PyObject *__pyx_v_new_alphas = NULL;
  PyObject *__pyx_v_new_con_coeffs = NULL;
  PyObject *__pyx_v_new_iprim = NULL;
  PyObject *__pyx_v_nprim = NULL;
  PyObject *__pyx_v_old_iprim = NULL;
  PyObject *__pyx_v_ibasis_list = NULL;
  PyObject *__pyx_v_ibasis_old = NULL;
  PyObject *__pyx_v_nbasis = NULL;
  PyObject *__pyx_v_basis = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  long __pyx_t_12;
  __Pyx_RefNannySetupContext("get_subset", 0);
  __pyx_cur_scope = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *)__pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct__get_subset(__pyx_ptype_6horton_6gbasis_4cext___pyx_scope_struct__get_subset, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 532, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "horton/gbasis/cext.pyx":545
 *         '''
 *         # find the centers corresponding to ishells
 *         icenters = set([])             # <<<<<<<<<<<<<<
 *         for ishell in ishells:
 *             if ishell < 0:
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_icenters = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":546
 *         # find the centers corresponding to ishells
 *         icenters = set([])
 *         for ishell in ishells:             # <<<<<<<<<<<<<<
 *             if ishell < 0:
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)
 */
  if (likely(PyList_CheckExact(__pyx_v_ishells)) || PyTuple_CheckExact(__pyx_v_ishells)) {
    __pyx_t_1 = __pyx_v_ishells; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_ishells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 546, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 546, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 546, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 546, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 546, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ishell);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ishell, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":547
 *         icenters = set([])
 *         for ishell in ishells:
 *             if ishell < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)
 *             if ishell >= self.nshell:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ishell, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_5)) {

      /* "horton/gbasis/cext.pyx":548
 *         for ishell in ishells:
 *             if ishell < 0:
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)             # <<<<<<<<<<<<<<
 *             if ishell >= self.nshell:
 *                 raise ValueError('ishell out of range: %i >= %s' % (ishell, self.nshell))
 */
      __pyx_t_4 = __Pyx_PyString_FormatSafe(__pyx_kp_s_ishell_out_of_range_i_0, __pyx_cur_scope->__pyx_v_ishell); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 548, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 548, __pyx_L1_error)

      /* "horton/gbasis/cext.pyx":547
 *         icenters = set([])
 *         for ishell in ishells:
 *             if ishell < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)
 *             if ishell >= self.nshell:
 */
    }

    /* "horton/gbasis/cext.pyx":549
 *             if ishell < 0:
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)
 *             if ishell >= self.nshell:             # <<<<<<<<<<<<<<
 *                 raise ValueError('ishell out of range: %i >= %s' % (ishell, self.nshell))
 *             icenters.add(self.shell_map[ishell])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_nshell); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_ishell, __pyx_t_6, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_5)) {

      /* "horton/gbasis/cext.pyx":550
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)
 *             if ishell >= self.nshell:
 *                 raise ValueError('ishell out of range: %i >= %s' % (ishell, self.nshell))             # <<<<<<<<<<<<<<
 *             icenters.add(self.shell_map[ishell])
 *         icenters = sorted(icenters) # fix the order
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_nshell); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_ishell);
      __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_ishell);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_cur_scope->__pyx_v_ishell);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_ishell_out_of_range_i_s, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 550, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 550, __pyx_L1_error)

      /* "horton/gbasis/cext.pyx":549
 *             if ishell < 0:
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)
 *             if ishell >= self.nshell:             # <<<<<<<<<<<<<<
 *                 raise ValueError('ishell out of range: %i >= %s' % (ishell, self.nshell))
 *             icenters.add(self.shell_map[ishell])
 */
    }

    /* "horton/gbasis/cext.pyx":551
 *             if ishell >= self.nshell:
 *                 raise ValueError('ishell out of range: %i >= %s' % (ishell, self.nshell))
 *             icenters.add(self.shell_map[ishell])             # <<<<<<<<<<<<<<
 *         icenters = sorted(icenters) # fix the order
 *         new_centers = self.centers[icenters]
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_icenters, __pyx_n_s_add); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_shell_map); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_cur_scope->__pyx_v_ishell); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 551, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "horton/gbasis/cext.pyx":546
 *         # find the centers corresponding to ishells
 *         icenters = set([])
 *         for ishell in ishells:             # <<<<<<<<<<<<<<
 *             if ishell < 0:
 *                 raise ValueError('ishell out of range: %i < 0' % ishell)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":552
 *                 raise ValueError('ishell out of range: %i >= %s' % (ishell, self.nshell))
 *             icenters.add(self.shell_map[ishell])
 *         icenters = sorted(icenters) # fix the order             # <<<<<<<<<<<<<<
 *         new_centers = self.centers[icenters]
 *         # construct the new shell_map, nprims, shell_types
 */
  __pyx_t_6 = PySequence_List(__pyx_v_icenters); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_9 = PyList_Sort(__pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_icenters, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":553
 *             icenters.add(self.shell_map[ishell])
 *         icenters = sorted(icenters) # fix the order
 *         new_centers = self.centers[icenters]             # <<<<<<<<<<<<<<
 *         # construct the new shell_map, nprims, shell_types
 *         new_shell_map = np.zeros(len(ishells), int)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_centers); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_icenters); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_new_centers = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":555
 *         new_centers = self.centers[icenters]
 *         # construct the new shell_map, nprims, shell_types
 *         new_shell_map = np.zeros(len(ishells), int)             # <<<<<<<<<<<<<<
 *         new_nprims = np.zeros(len(ishells), int)
 *         new_shell_types = np.zeros(len(ishells), int)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = PyObject_Length(__pyx_v_ishells); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 555, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_1, ((PyObject *)(&PyInt_Type))};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_t_1, ((PyObject *)(&PyInt_Type))};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_t_1);
    __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyInt_Type)));
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, ((PyObject *)(&PyInt_Type)));
    __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_new_shell_map = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":556
 *         # construct the new shell_map, nprims, shell_types
 *         new_shell_map = np.zeros(len(ishells), int)
 *         new_nprims = np.zeros(len(ishells), int)             # <<<<<<<<<<<<<<
 *         new_shell_types = np.zeros(len(ishells), int)
 *         for new_ishell, ishell in enumerate(ishells):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = PyObject_Length(__pyx_v_ishells); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 556, __pyx_L1_error)
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, ((PyObject *)(&PyInt_Type))};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, ((PyObject *)(&PyInt_Type))};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_t_4);
    __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyInt_Type)));
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, ((PyObject *)(&PyInt_Type)));
    __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_new_nprims = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":557
 *         new_shell_map = np.zeros(len(ishells), int)
 *         new_nprims = np.zeros(len(ishells), int)
 *         new_shell_types = np.zeros(len(ishells), int)             # <<<<<<<<<<<<<<
 *         for new_ishell, ishell in enumerate(ishells):
 *             new_shell_map[new_ishell] = icenters.index(self.shell_map[ishell])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_zeros); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_2 = PyObject_Length(__pyx_v_ishells); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 557, __pyx_L1_error)
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_7, ((PyObject *)(&PyInt_Type))};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_7, ((PyObject *)(&PyInt_Type))};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_t_7);
    __Pyx_INCREF(((PyObject *)(&PyInt_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyInt_Type)));
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, ((PyObject *)(&PyInt_Type)));
    __pyx_t_7 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_new_shell_types = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":558
 *         new_nprims = np.zeros(len(ishells), int)
 *         new_shell_types = np.zeros(len(ishells), int)
 *         for new_ishell, ishell in enumerate(ishells):             # <<<<<<<<<<<<<<
 *             new_shell_map[new_ishell] = icenters.index(self.shell_map[ishell])
 *             new_nprims[new_ishell] = self.nprims[ishell]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_ishells)) || PyTuple_CheckExact(__pyx_v_ishells)) {
    __pyx_t_8 = __pyx_v_ishells; __Pyx_INCREF(__pyx_t_8); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_ishells); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 558, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_2); __Pyx_INCREF(__pyx_t_1); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 558, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_3(__pyx_t_8);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 558, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ishell);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ishell, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_new_ishell, __pyx_t_6);
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":559
 *         new_shell_types = np.zeros(len(ishells), int)
 *         for new_ishell, ishell in enumerate(ishells):
 *             new_shell_map[new_ishell] = icenters.index(self.shell_map[ishell])             # <<<<<<<<<<<<<<
 *             new_nprims[new_ishell] = self.nprims[ishell]
 *             new_shell_types[new_ishell] = self.shell_types[ishell]
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_icenters, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_shell_map); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_cur_scope->__pyx_v_ishell); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_4, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_new_shell_map, __pyx_v_new_ishell, __pyx_t_1) < 0)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":560
 *         for new_ishell, ishell in enumerate(ishells):
 *             new_shell_map[new_ishell] = icenters.index(self.shell_map[ishell])
 *             new_nprims[new_ishell] = self.nprims[ishell]             # <<<<<<<<<<<<<<
 *             new_shell_types[new_ishell] = self.shell_types[ishell]
 *         # construct the new alphas and con_coeffs
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_nprims); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_cur_scope->__pyx_v_ishell); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_new_nprims, __pyx_v_new_ishell, __pyx_t_7) < 0)) __PYX_ERR(0, 560, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "horton/gbasis/cext.pyx":561
 *             new_shell_map[new_ishell] = icenters.index(self.shell_map[ishell])
 *             new_nprims[new_ishell] = self.nprims[ishell]
 *             new_shell_types[new_ishell] = self.shell_types[ishell]             # <<<<<<<<<<<<<<
 *         # construct the new alphas and con_coeffs
 *         new_nprim_total = new_nprims.sum()
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_shell_types); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_cur_scope->__pyx_v_ishell); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_new_shell_types, __pyx_v_new_ishell, __pyx_t_1) < 0)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":558
 *         new_nprims = np.zeros(len(ishells), int)
 *         new_shell_types = np.zeros(len(ishells), int)
 *         for new_ishell, ishell in enumerate(ishells):             # <<<<<<<<<<<<<<
 *             new_shell_map[new_ishell] = icenters.index(self.shell_map[ishell])
 *             new_nprims[new_ishell] = self.nprims[ishell]
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":563
 *             new_shell_types[new_ishell] = self.shell_types[ishell]
 *         # construct the new alphas and con_coeffs
 *         new_nprim_total = new_nprims.sum()             # <<<<<<<<<<<<<<
 *         new_alphas = np.zeros(new_nprim_total, float)
 *         new_con_coeffs = np.zeros(new_nprim_total, float)
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_new_nprims, __pyx_n_s_sum); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_1) : __Pyx_PyObject_CallNoArg(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_new_nprim_total = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":564
 *         # construct the new alphas and con_coeffs
 *         new_nprim_total = new_nprims.sum()
 *         new_alphas = np.zeros(new_nprim_total, float)             # <<<<<<<<<<<<<<
 *         new_con_coeffs = np.zeros(new_nprim_total, float)
 *         new_iprim = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_new_nprim_total, ((PyObject *)(&PyFloat_Type))};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_new_nprim_total, ((PyObject *)(&PyFloat_Type))};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_new_nprim_total);
    __Pyx_GIVEREF(__pyx_v_new_nprim_total);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_10, __pyx_v_new_nprim_total);
    __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_10, ((PyObject *)(&PyFloat_Type)));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_new_alphas = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":565
 *         new_nprim_total = new_nprims.sum()
 *         new_alphas = np.zeros(new_nprim_total, float)
 *         new_con_coeffs = np.zeros(new_nprim_total, float)             # <<<<<<<<<<<<<<
 *         new_iprim = 0
 *         for new_ishell, ishell in enumerate(ishells):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_new_nprim_total, ((PyObject *)(&PyFloat_Type))};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_new_nprim_total, ((PyObject *)(&PyFloat_Type))};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_INCREF(__pyx_v_new_nprim_total);
    __Pyx_GIVEREF(__pyx_v_new_nprim_total);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_v_new_nprim_total);
    __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
    __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, ((PyObject *)(&PyFloat_Type)));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_new_con_coeffs = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":566
 *         new_alphas = np.zeros(new_nprim_total, float)
 *         new_con_coeffs = np.zeros(new_nprim_total, float)
 *         new_iprim = 0             # <<<<<<<<<<<<<<
 *         for new_ishell, ishell in enumerate(ishells):
 *             nprim = new_nprims[new_ishell]
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_new_iprim = __pyx_int_0;

  /* "horton/gbasis/cext.pyx":567
 *         new_con_coeffs = np.zeros(new_nprim_total, float)
 *         new_iprim = 0
 *         for new_ishell, ishell in enumerate(ishells):             # <<<<<<<<<<<<<<
 *             nprim = new_nprims[new_ishell]
 *             old_iprim = self.nprims[:ishell].sum()
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_ishells)) || PyTuple_CheckExact(__pyx_v_ishells)) {
    __pyx_t_7 = __pyx_v_ishells; __Pyx_INCREF(__pyx_t_7); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_ishells); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_8); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_8); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 567, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 567, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_3(__pyx_t_7);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 567, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ishell);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ishell, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_new_ishell, __pyx_t_6);
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 567, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":568
 *         new_iprim = 0
 *         for new_ishell, ishell in enumerate(ishells):
 *             nprim = new_nprims[new_ishell]             # <<<<<<<<<<<<<<
 *             old_iprim = self.nprims[:ishell].sum()
 *             new_alphas[new_iprim:new_iprim+nprim] = self.alphas[old_iprim:old_iprim+nprim]
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_new_nprims, __pyx_v_new_ishell); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_nprim, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":569
 *         for new_ishell, ishell in enumerate(ishells):
 *             nprim = new_nprims[new_ishell]
 *             old_iprim = self.nprims[:ishell].sum()             # <<<<<<<<<<<<<<
 *             new_alphas[new_iprim:new_iprim+nprim] = self.alphas[old_iprim:old_iprim+nprim]
 *             new_con_coeffs[new_iprim:new_iprim+nprim] = self.con_coeffs[old_iprim:old_iprim+nprim]
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_nprims); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_t_1, 0, 0, NULL, &__pyx_cur_scope->__pyx_v_ishell, NULL, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_old_iprim, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":570
 *             nprim = new_nprims[new_ishell]
 *             old_iprim = self.nprims[:ishell].sum()
 *             new_alphas[new_iprim:new_iprim+nprim] = self.alphas[old_iprim:old_iprim+nprim]             # <<<<<<<<<<<<<<
 *             new_con_coeffs[new_iprim:new_iprim+nprim] = self.con_coeffs[old_iprim:old_iprim+nprim]
 *             new_iprim += nprim
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_alphas); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyNumber_Add(__pyx_v_old_iprim, __pyx_v_nprim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_t_8, 0, 0, &__pyx_v_old_iprim, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_v_new_iprim, __pyx_v_nprim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_PyObject_SetSlice(__pyx_v_new_alphas, __pyx_t_11, 0, 0, &__pyx_v_new_iprim, &__pyx_t_1, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "horton/gbasis/cext.pyx":571
 *             old_iprim = self.nprims[:ishell].sum()
 *             new_alphas[new_iprim:new_iprim+nprim] = self.alphas[old_iprim:old_iprim+nprim]
 *             new_con_coeffs[new_iprim:new_iprim+nprim] = self.con_coeffs[old_iprim:old_iprim+nprim]             # <<<<<<<<<<<<<<
 *             new_iprim += nprim
 *         # make a mapping between the indices of old and new basis functions
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_con_coeffs); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = PyNumber_Add(__pyx_v_old_iprim, __pyx_v_nprim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetSlice(__pyx_t_11, 0, 0, &__pyx_v_old_iprim, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_v_new_iprim, __pyx_v_nprim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_PyObject_SetSlice(__pyx_v_new_con_coeffs, __pyx_t_8, 0, 0, &__pyx_v_new_iprim, &__pyx_t_1, NULL, 0, 0, 1) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":572
 *             new_alphas[new_iprim:new_iprim+nprim] = self.alphas[old_iprim:old_iprim+nprim]
 *             new_con_coeffs[new_iprim:new_iprim+nprim] = self.con_coeffs[old_iprim:old_iprim+nprim]
 *             new_iprim += nprim             # <<<<<<<<<<<<<<
 *         # make a mapping between the indices of old and new basis functions
 *         ibasis_list = []
 */
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_new_iprim, __pyx_v_nprim); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_new_iprim, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":567
 *         new_con_coeffs = np.zeros(new_nprim_total, float)
 *         new_iprim = 0
 *         for new_ishell, ishell in enumerate(ishells):             # <<<<<<<<<<<<<<
 *             nprim = new_nprims[new_ishell]
 *             old_iprim = self.nprims[:ishell].sum()
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":574
 *             new_iprim += nprim
 *         # make a mapping between the indices of old and new basis functions
 *         ibasis_list = []             # <<<<<<<<<<<<<<
 *         for new_ishell, ishell in enumerate(ishells):
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_ibasis_list = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":575
 *         # make a mapping between the indices of old and new basis functions
 *         ibasis_list = []
 *         for new_ishell, ishell in enumerate(ishells):             # <<<<<<<<<<<<<<
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_6 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_ishells)) || PyTuple_CheckExact(__pyx_v_ishells)) {
    __pyx_t_7 = __pyx_v_ishells; __Pyx_INCREF(__pyx_t_7); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_ishells); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_8); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_2); __Pyx_INCREF(__pyx_t_8); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 575, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_3(__pyx_t_7);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 575, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ishell);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ishell, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_new_ishell, __pyx_t_6);
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":576
 *         ibasis_list = []
 *         for new_ishell, ishell in enumerate(ishells):
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))             # <<<<<<<<<<<<<<
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])
 *             ibasis_list.extend(range(ibasis_old, ibasis_old+nbasis))
 */
    __pyx_t_8 = __pyx_pf_6horton_6gbasis_4cext_6GBasis_10get_subset_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ibasis_old, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":577
 *         for new_ishell, ishell in enumerate(ishells):
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])             # <<<<<<<<<<<<<<
 *             ibasis_list.extend(range(ibasis_old, ibasis_old+nbasis))
 *         ibasis_list = np.array(ibasis_list)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_shell_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_cur_scope->__pyx_v_ishell); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __Pyx_PyInt_As_long(__pyx_t_8); if (unlikely((__pyx_t_12 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyInt_From_long(get_shell_nbasis(__pyx_t_12)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_nbasis, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":578
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])
 *             ibasis_list.extend(range(ibasis_old, ibasis_old+nbasis))             # <<<<<<<<<<<<<<
 *         ibasis_list = np.array(ibasis_list)
 *         # create the basis set object
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_ibasis_list, __pyx_n_s_extend); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyNumber_Add(__pyx_v_ibasis_old, __pyx_v_nbasis); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_ibasis_old);
    __Pyx_GIVEREF(__pyx_v_ibasis_old);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_ibasis_old);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_8 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "horton/gbasis/cext.pyx":575
 *         # make a mapping between the indices of old and new basis functions
 *         ibasis_list = []
 *         for new_ishell, ishell in enumerate(ishells):             # <<<<<<<<<<<<<<
 *             ibasis_old = sum(common.get_shell_nbasis(self.shell_types[i]) for i in xrange(ishell))
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":579
 *             nbasis = common.get_shell_nbasis(self.shell_types[ishell])
 *             ibasis_list.extend(range(ibasis_old, ibasis_old+nbasis))
 *         ibasis_list = np.array(ibasis_list)             # <<<<<<<<<<<<<<
 *         # create the basis set object
 *         basis = self.__class__(new_centers, new_shell_map, new_nprims,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_6 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_v_ibasis_list) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_ibasis_list);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_ibasis_list, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":581
 *         ibasis_list = np.array(ibasis_list)
 *         # create the basis set object
 *         basis = self.__class__(new_centers, new_shell_map, new_nprims,             # <<<<<<<<<<<<<<
 *                                new_shell_types, new_alphas, new_con_coeffs)
 *         # return stuff
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_class); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "horton/gbasis/cext.pyx":582
 *         # create the basis set object
 *         basis = self.__class__(new_centers, new_shell_map, new_nprims,
 *                                new_shell_types, new_alphas, new_con_coeffs)             # <<<<<<<<<<<<<<
 *         # return stuff
 *         return basis, ibasis_list
 */
  __pyx_t_7 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_10 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[7] = {__pyx_t_7, __pyx_v_new_centers, __pyx_v_new_shell_map, __pyx_v_new_nprims, __pyx_v_new_shell_types, __pyx_v_new_alphas, __pyx_v_new_con_coeffs};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 6+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[7] = {__pyx_t_7, __pyx_v_new_centers, __pyx_v_new_shell_map, __pyx_v_new_nprims, __pyx_v_new_shell_types, __pyx_v_new_alphas, __pyx_v_new_con_coeffs};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_10, 6+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  {
    __pyx_t_1 = PyTuple_New(6+__pyx_t_10); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(__pyx_v_new_centers);
    __Pyx_GIVEREF(__pyx_v_new_centers);
    PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_10, __pyx_v_new_centers);
    __Pyx_INCREF(__pyx_v_new_shell_map);
    __Pyx_GIVEREF(__pyx_v_new_shell_map);
    PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_10, __pyx_v_new_shell_map);
    __Pyx_INCREF(__pyx_v_new_nprims);
    __Pyx_GIVEREF(__pyx_v_new_nprims);
    PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_10, __pyx_v_new_nprims);
    __Pyx_INCREF(__pyx_v_new_shell_types);
    __Pyx_GIVEREF(__pyx_v_new_shell_types);
    PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_10, __pyx_v_new_shell_types);
    __Pyx_INCREF(__pyx_v_new_alphas);
    __Pyx_GIVEREF(__pyx_v_new_alphas);
    PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_10, __pyx_v_new_alphas);
    __Pyx_INCREF(__pyx_v_new_con_coeffs);
    __Pyx_GIVEREF(__pyx_v_new_con_coeffs);
    PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_10, __pyx_v_new_con_coeffs);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_basis = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":584
 *                                new_shell_types, new_alphas, new_con_coeffs)
 *         # return stuff
 *         return basis, ibasis_list             # <<<<<<<<<<<<<<
 * 
 *     def get_basis_atoms(self, coordinates):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_basis);
  __Pyx_GIVEREF(__pyx_v_basis);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_basis);
  __Pyx_INCREF(__pyx_v_ibasis_list);
  __Pyx_GIVEREF(__pyx_v_ibasis_list);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_ibasis_list);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":532
 *         self._this.compute_grid_point1(&output[0], &point[0], grid_fn._this)
 * 
 *     def get_subset(self, ishells):             # <<<<<<<<<<<<<<
 *         '''Construct a sub basis set for a selection of shells
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.get_subset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_icenters);
  __Pyx_XDECREF(__pyx_v_new_centers);
  __Pyx_XDECREF(__pyx_v_new_shell_map);
  __Pyx_XDECREF(__pyx_v_new_nprims);
  __Pyx_XDECREF(__pyx_v_new_shell_types);
  __Pyx_XDECREF(__pyx_v_new_ishell);
  __Pyx_XDECREF(__pyx_v_new_nprim_total);
  __Pyx_XDECREF(__pyx_v_new_alphas);
  __Pyx_XDECREF(__pyx_v_new_con_coeffs);
  __Pyx_XDECREF(__pyx_v_new_iprim);
  __Pyx_XDECREF(__pyx_v_nprim);
  __Pyx_XDECREF(__pyx_v_old_iprim);
  __Pyx_XDECREF(__pyx_v_ibasis_list);
  __Pyx_XDECREF(__pyx_v_ibasis_old);
  __Pyx_XDECREF(__pyx_v_nbasis);
  __Pyx_XDECREF(__pyx_v_basis);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":586
 *         return basis, ibasis_list
 * 
 *     def get_basis_atoms(self, coordinates):             # <<<<<<<<<<<<<<
 *         '''Return a list of atomic basis sets for a given geometry
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_21get_basis_atoms(PyObject *__pyx_v_self, PyObject *__pyx_v_coordinates); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_20get_basis_atoms[] = "GBasis.get_basis_atoms(self, coordinates)\nReturn a list of atomic basis sets for a given geometry\n\n           **Arguments:**\n\n           coordinates\n                An (N, 3) array with atomic coordinates, used to find the\n                centers associated with atoms. An exact match of the Cartesian\n                coordinates is required to properly select a shell.\n\n           **Returns:** A list with one tuple for every atom: (gbasis,\n           ibasis_list), where gbasis is a basis set object for the atom and\n           ibasis_list is a list of basis set indexes that can be used to\n           substitute results from the atomic basis set back into the molecular\n           basis set. For example, when a density matrix for the atom is\n           obtained and it needs to be plugged back into the molecular density\n           matrix, one can do the following::\n\n               mol_dm._array[ibasis_list,ibasis_list.reshape(-1,1)] = atom_dm._array\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_21get_basis_atoms(PyObject *__pyx_v_self, PyObject *__pyx_v_coordinates) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_basis_atoms (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_20get_basis_atoms(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self), ((PyObject *)__pyx_v_coordinates));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_20get_basis_atoms(struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, PyObject *__pyx_v_coordinates) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_icenters = NULL;
  PyObject *__pyx_v_icenter = NULL;
  PyObject *__pyx_v_ishells = NULL;
  PyObject *__pyx_v_ishell = NULL;
  PyObject *__pyx_v_sub_basis = NULL;
  PyObject *__pyx_v_ibasis_list = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyObject *(*__pyx_t_13)(PyObject *);
  __Pyx_RefNannySetupContext("get_basis_atoms", 0);

  /* "horton/gbasis/cext.pyx":606
 *                mol_dm._array[ibasis_list,ibasis_list.reshape(-1,1)] = atom_dm._array
 *         '''
 *         result = []             # <<<<<<<<<<<<<<
 *         for c in coordinates:
 *             # find the corresponding center(s).
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":607
 *         '''
 *         result = []
 *         for c in coordinates:             # <<<<<<<<<<<<<<
 *             # find the corresponding center(s).
 *             icenters = []
 */
  if (likely(PyList_CheckExact(__pyx_v_coordinates)) || PyTuple_CheckExact(__pyx_v_coordinates)) {
    __pyx_t_1 = __pyx_v_coordinates; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_coordinates); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 607, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 607, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 607, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 607, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":609
 *         for c in coordinates:
 *             # find the corresponding center(s).
 *             icenters = []             # <<<<<<<<<<<<<<
 *             for icenter in xrange(self.ncenter):
 *                 # require an exact match of the coordinates
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_icenters, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":610
 *             # find the corresponding center(s).
 *             icenters = []
 *             for icenter in xrange(self.ncenter):             # <<<<<<<<<<<<<<
 *                 # require an exact match of the coordinates
 *                 if (self.centers[icenter] == c).all():
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ncenter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 610, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 610, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 610, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 610, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_icenter, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "horton/gbasis/cext.pyx":612
 *             for icenter in xrange(self.ncenter):
 *                 # require an exact match of the coordinates
 *                 if (self.centers[icenter] == c).all():             # <<<<<<<<<<<<<<
 *                     icenters.append(icenter)
 *             icenters = set(icenters)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_centers); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_icenter); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_9, __pyx_v_c, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_all); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_8) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 612, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_10) {

        /* "horton/gbasis/cext.pyx":613
 *                 # require an exact match of the coordinates
 *                 if (self.centers[icenter] == c).all():
 *                     icenters.append(icenter)             # <<<<<<<<<<<<<<
 *             icenters = set(icenters)
 *             # find the shells on these centers
 */
        __pyx_t_11 = __Pyx_PyObject_Append(__pyx_v_icenters, __pyx_v_icenter); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 613, __pyx_L1_error)

        /* "horton/gbasis/cext.pyx":612
 *             for icenter in xrange(self.ncenter):
 *                 # require an exact match of the coordinates
 *                 if (self.centers[icenter] == c).all():             # <<<<<<<<<<<<<<
 *                     icenters.append(icenter)
 *             icenters = set(icenters)
 */
      }

      /* "horton/gbasis/cext.pyx":610
 *             # find the corresponding center(s).
 *             icenters = []
 *             for icenter in xrange(self.ncenter):             # <<<<<<<<<<<<<<
 *                 # require an exact match of the coordinates
 *                 if (self.centers[icenter] == c).all():
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":614
 *                 if (self.centers[icenter] == c).all():
 *                     icenters.append(icenter)
 *             icenters = set(icenters)             # <<<<<<<<<<<<<<
 *             # find the shells on these centers
 *             ishells = []
 */
    __pyx_t_4 = PySet_New(__pyx_v_icenters); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF_SET(__pyx_v_icenters, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":616
 *             icenters = set(icenters)
 *             # find the shells on these centers
 *             ishells = []             # <<<<<<<<<<<<<<
 *             for ishell in xrange(self.nshell):
 *                 if self.shell_map[ishell] in icenters:
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_ishells, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":617
 *             # find the shells on these centers
 *             ishells = []
 *             for ishell in xrange(self.nshell):             # <<<<<<<<<<<<<<
 *                 if self.shell_map[ishell] in icenters:
 *                     ishells.append(ishell)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nshell); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 617, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 617, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 617, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 617, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 617, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_ishell, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "horton/gbasis/cext.pyx":618
 *             ishells = []
 *             for ishell in xrange(self.nshell):
 *                 if self.shell_map[ishell] in icenters:             # <<<<<<<<<<<<<<
 *                     ishells.append(ishell)
 *             # construct a sub basis
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shell_map); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_5, __pyx_v_ishell); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_10 = (__Pyx_PySequence_ContainsTF(__pyx_t_9, __pyx_v_icenters, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 618, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_12 = (__pyx_t_10 != 0);
      if (__pyx_t_12) {

        /* "horton/gbasis/cext.pyx":619
 *             for ishell in xrange(self.nshell):
 *                 if self.shell_map[ishell] in icenters:
 *                     ishells.append(ishell)             # <<<<<<<<<<<<<<
 *             # construct a sub basis
 *             sub_basis, ibasis_list = self.get_subset(ishells)
 */
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_ishells, __pyx_v_ishell); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 619, __pyx_L1_error)

        /* "horton/gbasis/cext.pyx":618
 *             ishells = []
 *             for ishell in xrange(self.nshell):
 *                 if self.shell_map[ishell] in icenters:             # <<<<<<<<<<<<<<
 *                     ishells.append(ishell)
 *             # construct a sub basis
 */
      }

      /* "horton/gbasis/cext.pyx":617
 *             # find the shells on these centers
 *             ishells = []
 *             for ishell in xrange(self.nshell):             # <<<<<<<<<<<<<<
 *                 if self.shell_map[ishell] in icenters:
 *                     ishells.append(ishell)
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":621
 *                     ishells.append(ishell)
 *             # construct a sub basis
 *             sub_basis, ibasis_list = self.get_subset(ishells)             # <<<<<<<<<<<<<<
 *             result.append((sub_basis, ibasis_list))
 *         return result
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_subset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_ishells) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_ishells);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 621, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 621, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 621, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = Py_TYPE(__pyx_t_8)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_13(__pyx_t_8); if (unlikely(!__pyx_t_9)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_5 = __pyx_t_13(__pyx_t_8); if (unlikely(!__pyx_t_5)) goto __pyx_L11_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_8), 2) < 0) __PYX_ERR(0, 621, __pyx_L1_error)
      __pyx_t_13 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L12_unpacking_done;
      __pyx_L11_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 621, __pyx_L1_error)
      __pyx_L12_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_sub_basis, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ibasis_list, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":622
 *             # construct a sub basis
 *             sub_basis, ibasis_list = self.get_subset(ishells)
 *             result.append((sub_basis, ibasis_list))             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_sub_basis);
    __Pyx_GIVEREF(__pyx_v_sub_basis);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_sub_basis);
    __Pyx_INCREF(__pyx_v_ibasis_list);
    __Pyx_GIVEREF(__pyx_v_ibasis_list);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_ibasis_list);
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_result, __pyx_t_4); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 622, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "horton/gbasis/cext.pyx":607
 *         '''
 *         result = []
 *         for c in coordinates:             # <<<<<<<<<<<<<<
 *             # find the corresponding center(s).
 *             icenters = []
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":623
 *             sub_basis, ibasis_list = self.get_subset(ishells)
 *             result.append((sub_basis, ibasis_list))
 *         return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":586
 *         return basis, ibasis_list
 * 
 *     def get_basis_atoms(self, coordinates):             # <<<<<<<<<<<<<<
 *         '''Return a list of atomic basis sets for a given geometry
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.get_basis_atoms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_icenters);
  __Pyx_XDECREF(__pyx_v_icenter);
  __Pyx_XDECREF(__pyx_v_ishells);
  __Pyx_XDECREF(__pyx_v_ishell);
  __Pyx_XDECREF(__pyx_v_sub_basis);
  __Pyx_XDECREF(__pyx_v_ibasis_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_22__reduce_cython__[] = "GBasis.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_22__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_6GBasis_24__setstate_cython__[] = "GBasis.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_6GBasis_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_6GBasis_24__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_6GBasis_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GBasis.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":627
 * 
 * cdef class GOBasis(GBasis):
 *     def __cinit__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):             # <<<<<<<<<<<<<<
 *         self._this = <gbasis.GBasis*> new gbasis.GOBasis(
 *             <double*>self._centers.data, <long*>self._shell_map.data,
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_7GOBasis_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_7GOBasis_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_centers = 0;
  CYTHON_UNUSED PyObject *__pyx_v_shell_map = 0;
  CYTHON_UNUSED PyObject *__pyx_v_nprims = 0;
  CYTHON_UNUSED PyObject *__pyx_v_shell_types = 0;
  CYTHON_UNUSED PyObject *__pyx_v_alphas = 0;
  CYTHON_UNUSED PyObject *__pyx_v_con_coeffs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_centers,&__pyx_n_s_shell_map,&__pyx_n_s_nprims,&__pyx_n_s_shell_types,&__pyx_n_s_alphas,&__pyx_n_s_con_coeffs,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centers)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_map)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 1); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nprims)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 2); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_types)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 3); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alphas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 4); __PYX_ERR(0, 627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_con_coeffs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, 5); __PYX_ERR(0, 627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 627, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_centers = values[0];
    __pyx_v_shell_map = values[1];
    __pyx_v_nprims = values[2];
    __pyx_v_shell_types = values[3];
    __pyx_v_alphas = values[4];
    __pyx_v_con_coeffs = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_centers, __pyx_v_shell_map, __pyx_v_nprims, __pyx_v_shell_types, __pyx_v_alphas, __pyx_v_con_coeffs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_7GOBasis___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_centers, CYTHON_UNUSED PyObject *__pyx_v_shell_map, CYTHON_UNUSED PyObject *__pyx_v_nprims, CYTHON_UNUSED PyObject *__pyx_v_shell_types, CYTHON_UNUSED PyObject *__pyx_v_alphas, CYTHON_UNUSED PyObject *__pyx_v_con_coeffs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GOBasis *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":628
 * cdef class GOBasis(GBasis):
 *     def __cinit__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 *         self._this = <gbasis.GBasis*> new gbasis.GOBasis(             # <<<<<<<<<<<<<<
 *             <double*>self._centers.data, <long*>self._shell_map.data,
 *             <long*>self._nprims.data, <long*>self._shell_types.data,
 */
  try {
    __pyx_t_1 = new GOBasis(((double *)__pyx_v_self->__pyx_base._centers->data), ((long *)__pyx_v_self->__pyx_base._shell_map->data), ((long *)__pyx_v_self->__pyx_base._nprims->data), ((long *)__pyx_v_self->__pyx_base._shell_types->data), ((double *)__pyx_v_self->__pyx_base._alphas->data), ((double *)__pyx_v_self->__pyx_base._con_coeffs->data), (__pyx_v_self->__pyx_base._centers->dimensions[0]), (__pyx_v_self->__pyx_base._shell_types->dimensions[0]), (__pyx_v_self->__pyx_base._alphas->dimensions[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 628, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GBasis *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":627
 * 
 * cdef class GOBasis(GBasis):
 *     def __cinit__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):             # <<<<<<<<<<<<<<
 *         self._this = <gbasis.GBasis*> new gbasis.GOBasis(
 *             <double*>self._centers.data, <long*>self._shell_map.data,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":635
 *         )
 * 
 *     def check_matrix_coeffs(self, matrix, nocc=None):             # <<<<<<<<<<<<<<
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_3check_matrix_coeffs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_2check_matrix_coeffs[] = "GOBasis.check_matrix_coeffs(self, matrix, nocc=None)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_3check_matrix_coeffs(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_matrix = 0;
  PyObject *__pyx_v_nocc = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_matrix_coeffs (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_matrix,&__pyx_n_s_nocc,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_matrix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nocc);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "check_matrix_coeffs") < 0)) __PYX_ERR(0, 635, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_matrix = values[0];
    __pyx_v_nocc = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("check_matrix_coeffs", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 635, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.check_matrix_coeffs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_2check_matrix_coeffs(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_matrix, __pyx_v_nocc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_2check_matrix_coeffs(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_matrix, PyObject *__pyx_v_nocc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("check_matrix_coeffs", 0);

  /* "horton/gbasis/cext.pyx":636
 * 
 *     def check_matrix_coeffs(self, matrix, nocc=None):
 *         assert matrix.ndim == 2             # <<<<<<<<<<<<<<
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 636, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":637
 *     def check_matrix_coeffs(self, matrix, nocc=None):
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] <= self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 637, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":638
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis             # <<<<<<<<<<<<<<
 *         assert matrix.shape[1] <= self.nbasis
 *         if nocc is not None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 638, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":639
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] <= self.nbasis             # <<<<<<<<<<<<<<
 *         if nocc is not None:
 *             assert matrix.shape[1] >= nocc
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 639, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":640
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] <= self.nbasis
 *         if nocc is not None:             # <<<<<<<<<<<<<<
 *             assert matrix.shape[1] >= nocc
 * 
 */
  __pyx_t_3 = (__pyx_v_nocc != Py_None);
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "horton/gbasis/cext.pyx":641
 *         assert matrix.shape[1] <= self.nbasis
 *         if nocc is not None:
 *             assert matrix.shape[1] >= nocc             # <<<<<<<<<<<<<<
 * 
 *     def check_matrix_two_index(self, matrix):
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_v_nocc, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 641, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":640
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] <= self.nbasis
 *         if nocc is not None:             # <<<<<<<<<<<<<<
 *             assert matrix.shape[1] >= nocc
 * 
 */
  }

  /* "horton/gbasis/cext.pyx":635
 *         )
 * 
 *     def check_matrix_coeffs(self, matrix, nocc=None):             # <<<<<<<<<<<<<<
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.check_matrix_coeffs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":643
 *             assert matrix.shape[1] >= nocc
 * 
 *     def check_matrix_two_index(self, matrix):             # <<<<<<<<<<<<<<
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_5check_matrix_two_index(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_4check_matrix_two_index[] = "GOBasis.check_matrix_two_index(self, matrix)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_5check_matrix_two_index(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_matrix_two_index (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_4check_matrix_two_index(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), ((PyObject *)__pyx_v_matrix));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_4check_matrix_two_index(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check_matrix_two_index", 0);

  /* "horton/gbasis/cext.pyx":644
 * 
 *     def check_matrix_two_index(self, matrix):
 *         assert matrix.ndim == 2             # <<<<<<<<<<<<<<
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 644, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 644, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":645
 *     def check_matrix_two_index(self, matrix):
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] == self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 645, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":646
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis             # <<<<<<<<<<<<<<
 *         assert matrix.shape[1] == self.nbasis
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 646, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 646, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":647
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] == self.nbasis             # <<<<<<<<<<<<<<
 * 
 *     def check_matrix_four_index(self, matrix):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 647, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":643
 *             assert matrix.shape[1] >= nocc
 * 
 *     def check_matrix_two_index(self, matrix):             # <<<<<<<<<<<<<<
 *         assert matrix.ndim == 2
 *         assert matrix.flags['C_CONTIGUOUS']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.check_matrix_two_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":649
 *         assert matrix.shape[1] == self.nbasis
 * 
 *     def check_matrix_four_index(self, matrix):             # <<<<<<<<<<<<<<
 *         assert matrix.ndim == 4
 *         assert matrix.flags['C_CONTIGUOUS']
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_7check_matrix_four_index(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_6check_matrix_four_index[] = "GOBasis.check_matrix_four_index(self, matrix)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_7check_matrix_four_index(PyObject *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_matrix_four_index (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_6check_matrix_four_index(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), ((PyObject *)__pyx_v_matrix));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_6check_matrix_four_index(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_matrix) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("check_matrix_four_index", 0);

  /* "horton/gbasis/cext.pyx":650
 * 
 *     def check_matrix_four_index(self, matrix):
 *         assert matrix.ndim == 4             # <<<<<<<<<<<<<<
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 650, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":651
 *     def check_matrix_four_index(self, matrix):
 *         assert matrix.ndim == 4
 *         assert matrix.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] == self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 651, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":652
 *         assert matrix.ndim == 4
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis             # <<<<<<<<<<<<<<
 *         assert matrix.shape[1] == self.nbasis
 *         assert matrix.shape[2] == self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 652, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":653
 *         assert matrix.flags['C_CONTIGUOUS']
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] == self.nbasis             # <<<<<<<<<<<<<<
 *         assert matrix.shape[2] == self.nbasis
 *         assert matrix.shape[3] == self.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 653, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":654
 *         assert matrix.shape[0] == self.nbasis
 *         assert matrix.shape[1] == self.nbasis
 *         assert matrix.shape[2] == self.nbasis             # <<<<<<<<<<<<<<
 *         assert matrix.shape[3] == self.nbasis
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 654, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":655
 *         assert matrix.shape[1] == self.nbasis
 *         assert matrix.shape[2] == self.nbasis
 *         assert matrix.shape[3] == self.nbasis             # <<<<<<<<<<<<<<
 * 
 *     def compute_overlap(self, output):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_matrix, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 655, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":649
 *         assert matrix.shape[1] == self.nbasis
 * 
 *     def check_matrix_four_index(self, matrix):             # <<<<<<<<<<<<<<
 *         assert matrix.ndim == 4
 *         assert matrix.flags['C_CONTIGUOUS']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.check_matrix_four_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":657
 *         assert matrix.shape[3] == self.nbasis
 * 
 *     def compute_overlap(self, output):             # <<<<<<<<<<<<<<
 *         """Compute the overlap integrals in a Gaussian orbital basis
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_9compute_overlap(PyObject *__pyx_v_self, PyObject *__pyx_v_output); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_8compute_overlap[] = "GOBasis.compute_overlap(self, output)\nCompute the overlap integrals in a Gaussian orbital basis\n\n           **Arguments:**\n\n           output\n                When a ``TwoIndex`` instance is given, it is used as output\n                argument and its contents are overwritten. When ``LinalgFactory``\n                is given, it is used to construct the output ``TwoIndex``\n                object. In both cases, the output two-index object is returned.\n\n           **Returns:** ``TwoIndex`` object\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_9compute_overlap(PyObject *__pyx_v_self, PyObject *__pyx_v_output) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_overlap (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_8compute_overlap(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), ((PyObject *)__pyx_v_output));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_8compute_overlap(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output) {
  PyArrayObject *__pyx_v_output_array = 0;
  PyObject *__pyx_v_lf = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_RefNannySetupContext("compute_overlap", 0);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;

  /* "horton/gbasis/cext.pyx":672
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "horton/gbasis/cext.pyx":673
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":674
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_two_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":672
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":675
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 675, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 675, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":676
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_overlap(&output_array[0, 0])
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":678
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_overlap(&output_array[0, 0])             # <<<<<<<<<<<<<<
 *         # done
 *         return output
 */
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_8 = 1;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 678, __pyx_L1_error)
  }
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_overlap((&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_output_array.diminfo[1].strides))));

  /* "horton/gbasis/cext.pyx":680
 *         (<gbasis.GOBasis*>self._this).compute_overlap(&output_array[0, 0])
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_kinetic(self, output):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":657
 *         assert matrix.shape[3] == self.nbasis
 * 
 *     def compute_overlap(self, output):             # <<<<<<<<<<<<<<
 *         """Compute the overlap integrals in a Gaussian orbital basis
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_overlap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":682
 *         return output
 * 
 *     def compute_kinetic(self, output):             # <<<<<<<<<<<<<<
 *         """Compute the kinetic energy integrals in a Gaussian orbital basis
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_11compute_kinetic(PyObject *__pyx_v_self, PyObject *__pyx_v_output); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_10compute_kinetic[] = "GOBasis.compute_kinetic(self, output)\nCompute the kinetic energy integrals in a Gaussian orbital basis\n\n           **Arguments:**\n\n           output\n                When a ``TwoIndex`` instance is given, it is used as output\n                argument and its contents are overwritten. When ``LinalgFactory``\n                is given, it is used to construct the output ``TwoIndex``\n                object. In both cases, the output two-index object is returned.\n\n           **Returns:** ``TwoIndex`` object\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_11compute_kinetic(PyObject *__pyx_v_self, PyObject *__pyx_v_output) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_kinetic (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_10compute_kinetic(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), ((PyObject *)__pyx_v_output));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_10compute_kinetic(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output) {
  PyArrayObject *__pyx_v_output_array = 0;
  PyObject *__pyx_v_lf = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  __Pyx_RefNannySetupContext("compute_kinetic", 0);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;

  /* "horton/gbasis/cext.pyx":697
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "horton/gbasis/cext.pyx":698
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":699
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_two_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":697
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":700
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 700, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 700, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":701
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_kinetic(&output_array[0, 0])
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":703
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_kinetic(&output_array[0, 0])             # <<<<<<<<<<<<<<
 *         # done
 *         return output
 */
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_8 = 1;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 703, __pyx_L1_error)
  }
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_kinetic((&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_output_array.diminfo[1].strides))));

  /* "horton/gbasis/cext.pyx":705
 *         (<gbasis.GOBasis*>self._this).compute_kinetic(&output_array[0, 0])
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_nuclear_attraction(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":682
 *         return output
 * 
 *     def compute_kinetic(self, output):             # <<<<<<<<<<<<<<
 *         """Compute the kinetic energy integrals in a Gaussian orbital basis
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_kinetic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":707
 *         return output
 * 
 *     def compute_nuclear_attraction(self,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=2] coordinates not None,
 *                                    np.ndarray[double, ndim=1] charges not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_13compute_nuclear_attraction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_12compute_nuclear_attraction[] = "GOBasis.compute_nuclear_attraction(self, ndarray coordinates, ndarray charges, output)\nCompute the nuclear attraction integral in a Gaussian orbital basis\n\n           **Arguments:**\n\n           coordinates\n                A float array with shape (ncharge,3) with Cartesian coordinates\n                of point charges that define the external field.\n\n           charges\n                A float array with shape (ncharge,) with the values of the\n                charges.\n\n           output\n                When a ``TwoIndex`` instance is given, it is used as output\n                argument and its contents are overwritten. When ``LinalgFactory``\n                is given, it is used to construct the output ``TwoIndex``\n                object. In both cases, the output two-index object is returned.\n\n           **Returns:** ``TwoIndex`` object\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_13compute_nuclear_attraction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_coordinates = 0;
  PyArrayObject *__pyx_v_charges = 0;
  PyObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_nuclear_attraction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coordinates,&__pyx_n_s_charges,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coordinates)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_nuclear_attraction", 1, 3, 3, 1); __PYX_ERR(0, 707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_nuclear_attraction", 1, 3, 3, 2); __PYX_ERR(0, 707, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_nuclear_attraction") < 0)) __PYX_ERR(0, 707, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_coordinates = ((PyArrayObject *)values[0]);
    __pyx_v_charges = ((PyArrayObject *)values[1]);
    __pyx_v_output = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_nuclear_attraction", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 707, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_nuclear_attraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coordinates), __pyx_ptype_5numpy_ndarray, 0, "coordinates", 0))) __PYX_ERR(0, 708, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 0, "charges", 0))) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_12compute_nuclear_attraction(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_coordinates, __pyx_v_charges, __pyx_v_output);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_12compute_nuclear_attraction(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyObject *__pyx_v_output) {
  PyObject *__pyx_v_ncharge = NULL;
  PyArrayObject *__pyx_v_output_array = 0;
  PyObject *__pyx_v_lf = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coordinates;
  __Pyx_Buffer __pyx_pybuffer_coordinates;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyArrayObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  long __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_RefNannySetupContext("compute_nuclear_attraction", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_coordinates);
  __Pyx_INCREF((PyObject *)__pyx_v_charges);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;
  __pyx_pybuffer_coordinates.pybuffer.buf = NULL;
  __pyx_pybuffer_coordinates.refcount = 0;
  __pyx_pybuffernd_coordinates.data = NULL;
  __pyx_pybuffernd_coordinates.rcbuffer = &__pyx_pybuffer_coordinates;
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coordinates.diminfo[1].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coordinates.diminfo[1].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 707, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":732
 *         """
 *         # type checking
 *         assert coordinates.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert charges.flags['C_CONTIGUOUS']
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_coordinates), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 732, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 732, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":733
 *         # type checking
 *         assert coordinates.flags['C_CONTIGUOUS']
 *         assert charges.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)
 *         # prepare the output array
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_charges), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 733, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":734
 *         assert coordinates.flags['C_CONTIGUOUS']
 *         assert charges.flags['C_CONTIGUOUS']
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)             # <<<<<<<<<<<<<<
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_typecheck_geo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_coordinates));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_coordinates));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_coordinates));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __Pyx_INCREF(((PyObject *)__pyx_v_charges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_charges));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_charges));
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_need_numbers, Py_False) < 0) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 734, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_1 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(0, 734, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 734, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 734, __pyx_L1_error)
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_v_ncharge = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coordinates.diminfo[1].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coordinates.diminfo[1].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_coordinates, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      }
      __pyx_t_12 = __pyx_t_11 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 734, __pyx_L1_error)
  }
  __pyx_t_13 = 0;
  __Pyx_DECREF_SET(__pyx_v_charges, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":737
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = (__pyx_t_3 != 0);
  if (__pyx_t_14) {

    /* "horton/gbasis/cext.pyx":738
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":739
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_two_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":737
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":740
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 740, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 740, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":741
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_nuclear_attraction(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":744
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_nuclear_attraction(
 *             &charges[0], &coordinates[0, 0], ncharge,             # <<<<<<<<<<<<<<
 *             &output_array[0, 0],
 *         )
 */
  __pyx_t_16 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_charges.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_charges.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_17 < 0) {
    __pyx_t_17 += __pyx_pybuffernd_coordinates.diminfo[0].shape;
    if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_coordinates.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_18 < 0) {
    __pyx_t_18 += __pyx_pybuffernd_coordinates.diminfo[1].shape;
    if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_coordinates.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_t_19 = __Pyx_PyInt_As_long(__pyx_v_ncharge); if (unlikely((__pyx_t_19 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 744, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":745
 *         (<gbasis.GOBasis*>self._this).compute_nuclear_attraction(
 *             &charges[0], &coordinates[0, 0], ncharge,
 *             &output_array[0, 0],             # <<<<<<<<<<<<<<
 *         )
 *         # done
 */
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_20 < 0) {
    __pyx_t_20 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_21 < 0) {
    __pyx_t_21 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 745, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":743
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_nuclear_attraction(             # <<<<<<<<<<<<<<
 *             &charges[0], &coordinates[0, 0], ncharge,
 *             &output_array[0, 0],
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_nuclear_attraction((&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_charges.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_charges.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_coordinates.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_coordinates.diminfo[1].strides))), __pyx_t_19, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_output_array.diminfo[1].strides))));

  /* "horton/gbasis/cext.pyx":748
 *         )
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_erf_attraction(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":707
 *         return output
 * 
 *     def compute_nuclear_attraction(self,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=2] coordinates not None,
 *                                    np.ndarray[double, ndim=1] charges not None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_nuclear_attraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_ncharge);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF((PyObject *)__pyx_v_coordinates);
  __Pyx_XDECREF((PyObject *)__pyx_v_charges);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":750
 *         return output
 * 
 *     def compute_erf_attraction(self,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=2] coordinates not None,
 *                                    np.ndarray[double, ndim=1] charges not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_15compute_erf_attraction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_14compute_erf_attraction[] = "GOBasis.compute_erf_attraction(self, ndarray coordinates, ndarray charges, output, double mu=0.0)\nCompute the model nuclear attraction integral with the long-range potential\n\n        The potential has the following form:\n\n        .. math::\n            v = \\frac{\\mathrm{erf}(\\mu r)}{r}\n\n        Parameters\n        ----------\n        coordinates: np.ndarray, shape = (ncharge,3)\n            A float array with shape (ncharge,3) with Cartesian coordinates\n            of point charges that define the external field.\n\n        charges: np.ndarray, shape=(ncharge,)\n             A float array with shape (ncharge,) with the values of the\n             charges.\n\n        output: TwoIndex\n             When a ``TwoIndex`` instance is given, it is used as output\n             argument and its contents are overwritten. When ``LinalgFactory``\n             is given, it is used to construct the output ``TwoIndex``\n             object. In both cases, the output two-index object is returned.\n\n         mu : float\n             Parameter for the erf(mu r)/r potential. Default is zero.\n\n        Returns\n        -------\n        ``TwoIndex`` object\n\n        Keywords: :index:`two-center integrals`\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_15compute_erf_attraction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_coordinates = 0;
  PyArrayObject *__pyx_v_charges = 0;
  PyObject *__pyx_v_output = 0;
  double __pyx_v_mu;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_erf_attraction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coordinates,&__pyx_n_s_charges,&__pyx_n_s_output,&__pyx_n_s_mu,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coordinates)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_erf_attraction", 0, 3, 4, 1); __PYX_ERR(0, 750, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_erf_attraction", 0, 3, 4, 2); __PYX_ERR(0, 750, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mu);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_erf_attraction") < 0)) __PYX_ERR(0, 750, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coordinates = ((PyArrayObject *)values[0]);
    __pyx_v_charges = ((PyArrayObject *)values[1]);
    __pyx_v_output = values[2];
    if (values[3]) {
      __pyx_v_mu = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 753, __pyx_L3_error)
    } else {
      __pyx_v_mu = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_erf_attraction", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 750, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_erf_attraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coordinates), __pyx_ptype_5numpy_ndarray, 0, "coordinates", 0))) __PYX_ERR(0, 751, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 0, "charges", 0))) __PYX_ERR(0, 752, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_14compute_erf_attraction(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_coordinates, __pyx_v_charges, __pyx_v_output, __pyx_v_mu);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_14compute_erf_attraction(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyObject *__pyx_v_output, double __pyx_v_mu) {
  PyObject *__pyx_v_ncharge = NULL;
  PyArrayObject *__pyx_v_output_array = 0;
  PyObject *__pyx_v_lf = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coordinates;
  __Pyx_Buffer __pyx_pybuffer_coordinates;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyArrayObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  long __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_RefNannySetupContext("compute_erf_attraction", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_coordinates);
  __Pyx_INCREF((PyObject *)__pyx_v_charges);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;
  __pyx_pybuffer_coordinates.pybuffer.buf = NULL;
  __pyx_pybuffer_coordinates.refcount = 0;
  __pyx_pybuffernd_coordinates.data = NULL;
  __pyx_pybuffernd_coordinates.rcbuffer = &__pyx_pybuffer_coordinates;
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 750, __pyx_L1_error)
  }
  __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coordinates.diminfo[1].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coordinates.diminfo[1].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 750, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":787
 *         """
 *         # type checking
 *         assert coordinates.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert charges.flags['C_CONTIGUOUS']
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_coordinates), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 787, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 787, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":788
 *         # type checking
 *         assert coordinates.flags['C_CONTIGUOUS']
 *         assert charges.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)
 *         # prepare the output array
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_charges), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 788, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":789
 *         assert coordinates.flags['C_CONTIGUOUS']
 *         assert charges.flags['C_CONTIGUOUS']
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)             # <<<<<<<<<<<<<<
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_typecheck_geo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_coordinates));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_coordinates));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_coordinates));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __Pyx_INCREF(((PyObject *)__pyx_v_charges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_charges));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_charges));
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_need_numbers, Py_False) < 0) __PYX_ERR(0, 789, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 789, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 789, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_1 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(0, 789, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 789, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 789, __pyx_L1_error)
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 789, __pyx_L1_error)
  __pyx_v_ncharge = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coordinates.diminfo[1].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coordinates.diminfo[1].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 789, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_coordinates, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      }
      __pyx_t_12 = __pyx_t_11 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 789, __pyx_L1_error)
  }
  __pyx_t_13 = 0;
  __Pyx_DECREF_SET(__pyx_v_charges, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":792
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = (__pyx_t_3 != 0);
  if (__pyx_t_14) {

    /* "horton/gbasis/cext.pyx":793
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":794
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_two_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":792
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":795
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 795, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 795, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":796
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_erf_attraction(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":799
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_erf_attraction(
 *             &charges[0], &coordinates[0, 0], ncharge,             # <<<<<<<<<<<<<<
 *             &output_array[0, 0], mu
 *         )
 */
  __pyx_t_16 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_charges.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_charges.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 799, __pyx_L1_error)
  }
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_17 < 0) {
    __pyx_t_17 += __pyx_pybuffernd_coordinates.diminfo[0].shape;
    if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_coordinates.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_18 < 0) {
    __pyx_t_18 += __pyx_pybuffernd_coordinates.diminfo[1].shape;
    if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_coordinates.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 799, __pyx_L1_error)
  }
  __pyx_t_19 = __Pyx_PyInt_As_long(__pyx_v_ncharge); if (unlikely((__pyx_t_19 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":800
 *         (<gbasis.GOBasis*>self._this).compute_erf_attraction(
 *             &charges[0], &coordinates[0, 0], ncharge,
 *             &output_array[0, 0], mu             # <<<<<<<<<<<<<<
 *         )
 *         # done
 */
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_20 < 0) {
    __pyx_t_20 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_21 < 0) {
    __pyx_t_21 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 800, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":798
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_erf_attraction(             # <<<<<<<<<<<<<<
 *             &charges[0], &coordinates[0, 0], ncharge,
 *             &output_array[0, 0], mu
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_erf_attraction((&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_charges.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_charges.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_coordinates.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_coordinates.diminfo[1].strides))), __pyx_t_19, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_output_array.diminfo[1].strides))), __pyx_v_mu);

  /* "horton/gbasis/cext.pyx":803
 *         )
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_gauss_attraction(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":750
 *         return output
 * 
 *     def compute_erf_attraction(self,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=2] coordinates not None,
 *                                    np.ndarray[double, ndim=1] charges not None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_erf_attraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_ncharge);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF((PyObject *)__pyx_v_coordinates);
  __Pyx_XDECREF((PyObject *)__pyx_v_charges);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":805
 *         return output
 * 
 *     def compute_gauss_attraction(self,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=2] coordinates not None,
 *                                    np.ndarray[double, ndim=1] charges not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_17compute_gauss_attraction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_16compute_gauss_attraction[] = "GOBasis.compute_gauss_attraction(self, ndarray coordinates, ndarray charges, output, double c=1.0, double alpha=1.0)\nCompute the model nuclear attraction with a Gaussian potential.\n\n        The potential has the following form:\n\n        .. math::\n            v = c \\exp(-\\alpha r^2)\n\n        Parameters\n        ----------\n        output : TwoIndex\n            When a ``DenseTwoIndex`` object is given, it is used as output argument and\n            its contents are overwritten.\n        c : float\n            Coefficient of the gaussian.\n        alpha : float\n            Exponential parameter of the gaussian.\n\n        Returns\n        -------\n        output\n\n        Keywords: :index:`two-center integrals`\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_17compute_gauss_attraction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_coordinates = 0;
  PyArrayObject *__pyx_v_charges = 0;
  PyObject *__pyx_v_output = 0;
  double __pyx_v_c;
  double __pyx_v_alpha;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_gauss_attraction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coordinates,&__pyx_n_s_charges,&__pyx_n_s_output,&__pyx_n_s_c,&__pyx_n_s_alpha,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coordinates)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gauss_attraction", 0, 3, 5, 1); __PYX_ERR(0, 805, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_gauss_attraction", 0, 3, 5, 2); __PYX_ERR(0, 805, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_gauss_attraction") < 0)) __PYX_ERR(0, 805, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coordinates = ((PyArrayObject *)values[0]);
    __pyx_v_charges = ((PyArrayObject *)values[1]);
    __pyx_v_output = values[2];
    if (values[3]) {
      __pyx_v_c = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_c == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
    } else {
      __pyx_v_c = ((double)1.0);
    }
    if (values[4]) {
      __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 808, __pyx_L3_error)
    } else {
      __pyx_v_alpha = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_gauss_attraction", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 805, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_gauss_attraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coordinates), __pyx_ptype_5numpy_ndarray, 0, "coordinates", 0))) __PYX_ERR(0, 806, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 0, "charges", 0))) __PYX_ERR(0, 807, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_16compute_gauss_attraction(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_coordinates, __pyx_v_charges, __pyx_v_output, __pyx_v_c, __pyx_v_alpha);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_16compute_gauss_attraction(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyObject *__pyx_v_output, double __pyx_v_c, double __pyx_v_alpha) {
  PyObject *__pyx_v_ncharge = NULL;
  PyArrayObject *__pyx_v_output_array = 0;
  PyObject *__pyx_v_lf = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coordinates;
  __Pyx_Buffer __pyx_pybuffer_coordinates;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyArrayObject *__pyx_t_15 = NULL;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  long __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_RefNannySetupContext("compute_gauss_attraction", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_coordinates);
  __Pyx_INCREF((PyObject *)__pyx_v_charges);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;
  __pyx_pybuffer_coordinates.pybuffer.buf = NULL;
  __pyx_pybuffer_coordinates.refcount = 0;
  __pyx_pybuffernd_coordinates.data = NULL;
  __pyx_pybuffernd_coordinates.rcbuffer = &__pyx_pybuffer_coordinates;
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 805, __pyx_L1_error)
  }
  __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coordinates.diminfo[1].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coordinates.diminfo[1].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 805, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":833
 *         """
 *         # type checking
 *         assert coordinates.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert charges.flags['C_CONTIGUOUS']
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_coordinates), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 833, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 833, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":834
 *         # type checking
 *         assert coordinates.flags['C_CONTIGUOUS']
 *         assert charges.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)
 *         # prepare the output array
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_charges), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 834, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":835
 *         assert coordinates.flags['C_CONTIGUOUS']
 *         assert charges.flags['C_CONTIGUOUS']
 *         ncharge, coordinates, charges = typecheck_geo(coordinates, None, charges, need_numbers=False)             # <<<<<<<<<<<<<<
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_typecheck_geo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_coordinates));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_coordinates));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_coordinates));
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __Pyx_INCREF(((PyObject *)__pyx_v_charges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_charges));
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_charges));
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_need_numbers, Py_False) < 0) __PYX_ERR(0, 835, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
    PyObject* sequence = __pyx_t_5;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 835, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_6 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 835, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
    index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    index = 1; __pyx_t_2 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_1 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 3) < 0) __PYX_ERR(0, 835, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 835, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 835, __pyx_L1_error)
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 835, __pyx_L1_error)
  __pyx_v_ncharge = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coordinates.diminfo[1].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coordinates.diminfo[1].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 835, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_coordinates, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);
      }
      __pyx_t_12 = __pyx_t_11 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 835, __pyx_L1_error)
  }
  __pyx_t_13 = 0;
  __Pyx_DECREF_SET(__pyx_v_charges, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":838
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_5); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_14 = (__pyx_t_3 != 0);
  if (__pyx_t_14) {

    /* "horton/gbasis/cext.pyx":839
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":840
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_two_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 840, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":838
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":841
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 841, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 841, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":842
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_gauss_attraction(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":845
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_gauss_attraction(
 *             &charges[0], &coordinates[0, 0], ncharge,             # <<<<<<<<<<<<<<
 *             &output_array[0, 0], c, alpha
 *         )
 */
  __pyx_t_16 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_charges.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_charges.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 845, __pyx_L1_error)
  }
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_17 < 0) {
    __pyx_t_17 += __pyx_pybuffernd_coordinates.diminfo[0].shape;
    if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_coordinates.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_18 < 0) {
    __pyx_t_18 += __pyx_pybuffernd_coordinates.diminfo[1].shape;
    if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_coordinates.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 845, __pyx_L1_error)
  }
  __pyx_t_19 = __Pyx_PyInt_As_long(__pyx_v_ncharge); if (unlikely((__pyx_t_19 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 845, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":846
 *         (<gbasis.GOBasis*>self._this).compute_gauss_attraction(
 *             &charges[0], &coordinates[0, 0], ncharge,
 *             &output_array[0, 0], c, alpha             # <<<<<<<<<<<<<<
 *         )
 *         # done
 */
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_20 < 0) {
    __pyx_t_20 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_21 < 0) {
    __pyx_t_21 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 846, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":844
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_gauss_attraction(             # <<<<<<<<<<<<<<
 *             &charges[0], &coordinates[0, 0], ncharge,
 *             &output_array[0, 0], c, alpha
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_gauss_attraction((&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_charges.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_charges.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_coordinates.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_coordinates.diminfo[1].strides))), __pyx_t_19, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_output_array.diminfo[1].strides))), __pyx_v_c, __pyx_v_alpha);

  /* "horton/gbasis/cext.pyx":849
 *         )
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_multipole_moment(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":805
 *         return output
 * 
 *     def compute_gauss_attraction(self,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=2] coordinates not None,
 *                                    np.ndarray[double, ndim=1] charges not None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_gauss_attraction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_ncharge);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF((PyObject *)__pyx_v_coordinates);
  __Pyx_XDECREF((PyObject *)__pyx_v_charges);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":851
 *         return output
 * 
 *     def compute_multipole_moment(self,             # <<<<<<<<<<<<<<
 *                     np.ndarray[long, ndim=1] xyz not None,
 *                     np.ndarray[double, ndim=1] center not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_19compute_multipole_moment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_18compute_multipole_moment[] = "GOBasis.compute_multipole_moment(self, ndarray xyz, ndarray center, output)\nCompute the (multipole) moment integrals in a Gaussian orbital basis.\n\n        Calculates the integral < gto_a | (x - C_x)^l (y - C_y)^m (z - C_z)^n | gto_b >\n\n        Parameters\n        ----------\n        xyz : numpy-array of int, shape=(3,).\n            A integer (long) numpy-array with shape (3,) with the powers of x,y,z in the\n            integrals.\n        center : np.ndarray, shape = (3,)\n            A numpy array of shape (3,) with the center [C_x, C_y, C_z] around which the\n            moment integral is computed.\n        output : ``TwoIndex`` or ``LinalgFactory`` object\n            When a ``TwoIndex`` instance is given, it is used as output argument and its\n            contents are overwritten. When ``LinalgFactory`` is given, it is used to\n            construct the output ``TwoIndex`` object. In both cases, the output two-index\n            object is returned.\n\n        Returns\n        -------\n        output : ``TwoIndex`` object\n            The values of the integrals.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_19compute_multipole_moment(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_xyz = 0;
  PyArrayObject *__pyx_v_center = 0;
  PyObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_multipole_moment (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xyz,&__pyx_n_s_center,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xyz)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_multipole_moment", 1, 3, 3, 1); __PYX_ERR(0, 851, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_multipole_moment", 1, 3, 3, 2); __PYX_ERR(0, 851, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_multipole_moment") < 0)) __PYX_ERR(0, 851, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xyz = ((PyArrayObject *)values[0]);
    __pyx_v_center = ((PyArrayObject *)values[1]);
    __pyx_v_output = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_multipole_moment", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 851, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_multipole_moment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_xyz), __pyx_ptype_5numpy_ndarray, 0, "xyz", 0))) __PYX_ERR(0, 852, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_center), __pyx_ptype_5numpy_ndarray, 0, "center", 0))) __PYX_ERR(0, 853, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_18compute_multipole_moment(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_xyz, __pyx_v_center, __pyx_v_output);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_18compute_multipole_moment(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_xyz, PyArrayObject *__pyx_v_center, PyObject *__pyx_v_output) {
  PyArrayObject *__pyx_v_output_array = 0;
  PyObject *__pyx_v_lf = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_center;
  __Pyx_Buffer __pyx_pybuffer_center;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_xyz;
  __Pyx_Buffer __pyx_pybuffer_xyz;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  __Pyx_RefNannySetupContext("compute_multipole_moment", 0);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;
  __pyx_pybuffer_xyz.pybuffer.buf = NULL;
  __pyx_pybuffer_xyz.refcount = 0;
  __pyx_pybuffernd_xyz.data = NULL;
  __pyx_pybuffernd_xyz.rcbuffer = &__pyx_pybuffer_xyz;
  __pyx_pybuffer_center.pybuffer.buf = NULL;
  __pyx_pybuffer_center.refcount = 0;
  __pyx_pybuffernd_center.data = NULL;
  __pyx_pybuffernd_center.rcbuffer = &__pyx_pybuffer_center;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_xyz.rcbuffer->pybuffer, (PyObject*)__pyx_v_xyz, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 851, __pyx_L1_error)
  }
  __pyx_pybuffernd_xyz.diminfo[0].strides = __pyx_pybuffernd_xyz.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_xyz.diminfo[0].shape = __pyx_pybuffernd_xyz.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_center.rcbuffer->pybuffer, (PyObject*)__pyx_v_center, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 851, __pyx_L1_error)
  }
  __pyx_pybuffernd_center.diminfo[0].strides = __pyx_pybuffernd_center.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_center.diminfo[0].shape = __pyx_pybuffernd_center.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":879
 *         """
 *         # type checking
 *         assert xyz.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert xyz.min() >= 0
 *         assert xyz.sum() >= 0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_xyz), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 879, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":880
 *         # type checking
 *         assert xyz.flags['C_CONTIGUOUS']
 *         assert xyz.min() >= 0             # <<<<<<<<<<<<<<
 *         assert xyz.sum() >= 0
 *         assert center.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_xyz), __pyx_n_s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 880, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":881
 *         assert xyz.flags['C_CONTIGUOUS']
 *         assert xyz.min() >= 0
 *         assert xyz.sum() >= 0             # <<<<<<<<<<<<<<
 *         assert center.flags['C_CONTIGUOUS']
 *         # prepare the output array
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_xyz), __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 881, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 881, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":882
 *         assert xyz.min() >= 0
 *         assert xyz.sum() >= 0
 *         assert center.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_center), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 882, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":885
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 885, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "horton/gbasis/cext.pyx":886
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":887
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_two_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":885
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=2] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":888
 *             lf = output
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 888, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 888, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":889
 *             output = lf.create_two_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_two_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_multipole_moment(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":892
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_multipole_moment(
 *             &xyz[0], &center[0], &output_array[0, 0])             # <<<<<<<<<<<<<<
 *         # done
 *         return output
 */
  __pyx_t_12 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_xyz.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_xyz.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 892, __pyx_L1_error)
  }
  __pyx_t_13 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_center.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_center.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 892, __pyx_L1_error)
  }
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_8 = 1;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 892, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":891
 *         self.check_matrix_two_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_multipole_moment(             # <<<<<<<<<<<<<<
 *             &xyz[0], &center[0], &output_array[0, 0])
 *         # done
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_multipole_moment((&(*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_xyz.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_xyz.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_center.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_center.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_output_array.diminfo[1].strides))));

  /* "horton/gbasis/cext.pyx":894
 *             &xyz[0], &center[0], &output_array[0, 0])
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_electron_repulsion(self, output):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":851
 *         return output
 * 
 *     def compute_multipole_moment(self,             # <<<<<<<<<<<<<<
 *                     np.ndarray[long, ndim=1] xyz not None,
 *                     np.ndarray[double, ndim=1] center not None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_center.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xyz.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_multipole_moment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_center.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_xyz.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":896
 *         return output
 * 
 *     def compute_electron_repulsion(self, output):             # <<<<<<<<<<<<<<
 *         r'''Compute electron-electron repulsion integrals
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_21compute_electron_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_v_output); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_20compute_electron_repulsion[] = "GOBasis.compute_electron_repulsion(self, output)\nCompute electron-electron repulsion integrals\n\n        The potential has the following form:\n\n        .. math::\n            v = \\frac{1}{r}\n\n        Parameters\n        ----------\n        output : FourIndex\n            When a ``DenseFourIndex`` object is given, it is used as output argument and\n            its contents are overwritten. When a ``DenseLinalgFactory`` or\n            ``CholeskyLinalgFactory`` is given, it is used to construct the four-index\n            object in which the integrals are stored.\n\n        Returns\n        -------\n        output\n\n        Keywords: :index:`ERI`, :index:`four-center integrals`\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_21compute_electron_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_v_output) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_electron_repulsion (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_20compute_electron_repulsion(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), ((PyObject *)__pyx_v_output));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_20compute_electron_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output) {
  PyObject *__pyx_v_lf = NULL;
  PyArrayObject *__pyx_v_output_array = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  __Pyx_RefNannySetupContext("compute_electron_repulsion", 0);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;

  /* "horton/gbasis/cext.pyx":918
 *         Keywords: :index:`ERI`, :index:`four-center integrals`
 *         '''
 *         biblio.cite('valeev2014',             # <<<<<<<<<<<<<<
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         if isinstance(output, CholeskyLinalgFactory):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":920
 *         biblio.cite('valeev2014',
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4ElectronRepulsionIntegralLibInt(self.max_shell_type), lf=lf)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CholeskyLinalgFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 920, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "horton/gbasis/cext.pyx":921
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = compute_cholesky(self, GB4ElectronRepulsionIntegralLibInt(self.max_shell_type), lf=lf)
 *             return output
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":922
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output
 *             output = compute_cholesky(self, GB4ElectronRepulsionIntegralLibInt(self.max_shell_type), lf=lf)             # <<<<<<<<<<<<<<
 *             return output
 *         # prepare the output array
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_compute_cholesky); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt), __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_lf, __pyx_v_lf) < 0) __PYX_ERR(0, 922, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 922, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "horton/gbasis/cext.pyx":923
 *             lf = output
 *             output = compute_cholesky(self, GB4ElectronRepulsionIntegralLibInt(self.max_shell_type), lf=lf)
 *             return output             # <<<<<<<<<<<<<<
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_output);
    __pyx_r = __pyx_v_output;
    goto __pyx_L0;

    /* "horton/gbasis/cext.pyx":920
 *         biblio.cite('valeev2014',
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4ElectronRepulsionIntegralLibInt(self.max_shell_type), lf=lf)
 */
  }

  /* "horton/gbasis/cext.pyx":926
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_output, __pyx_t_6); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "horton/gbasis/cext.pyx":927
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":928
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_four_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "horton/gbasis/cext.pyx":926
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":929
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 929, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_output_array.diminfo[2].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_output_array.diminfo[2].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_output_array.diminfo[3].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_output_array.diminfo[3].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[3];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 929, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":930
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_electron_repulsion(&output_array[0, 0, 0, 0])
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_four_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "horton/gbasis/cext.pyx":932
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_electron_repulsion(&output_array[0, 0, 0, 0])             # <<<<<<<<<<<<<<
 *         # done
 *         return output
 */
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_8 = 1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_output_array.diminfo[2].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_8 = 2;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_output_array.diminfo[2].shape)) __pyx_t_8 = 2;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_output_array.diminfo[3].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_8 = 3;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_output_array.diminfo[3].shape)) __pyx_t_8 = 3;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 932, __pyx_L1_error)
  }
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_electron_repulsion((&(*__Pyx_BufPtrStrided4d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_output_array.diminfo[1].strides, __pyx_t_14, __pyx_pybuffernd_output_array.diminfo[2].strides, __pyx_t_15, __pyx_pybuffernd_output_array.diminfo[3].strides))));

  /* "horton/gbasis/cext.pyx":934
 *         (<gbasis.GOBasis*>self._this).compute_electron_repulsion(&output_array[0, 0, 0, 0])
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_erf_repulsion(self, output, double mu=0.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":896
 *         return output
 * 
 *     def compute_electron_repulsion(self, output):             # <<<<<<<<<<<<<<
 *         r'''Compute electron-electron repulsion integrals
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_electron_repulsion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":936
 *         return output
 * 
 *     def compute_erf_repulsion(self, output, double mu=0.0):             # <<<<<<<<<<<<<<
 *         r"""Compute short-range electron repulsion integrals.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_23compute_erf_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_22compute_erf_repulsion[] = "GOBasis.compute_erf_repulsion(self, output, double mu=0.0)\nCompute short-range electron repulsion integrals.\n\n        The potential has the following form:\n\n        .. math::\n            v = \\frac{\\mathrm{erf}(\\mu r)}{r}\n\n        Parameters\n        ----------\n        output : FourIndex\n            When a ``DenseFourIndex`` object is given, it is used as output argument and\n            its contents are overwritten. When a ``DenseLinalgFactory`` or\n            ``CholeskyLinalgFactory`` is given, it is used to construct the four-index\n            object in which the integrals are stored.\n        mu : float\n            Parameter for the erf(mu r)/r potential. Default is zero.\n\n        Returns\n        -------\n        output\n\n        Keywords: :index:`ERI`, :index:`four-center integrals`\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_23compute_erf_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_output = 0;
  double __pyx_v_mu;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_erf_repulsion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,&__pyx_n_s_mu,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mu);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_erf_repulsion") < 0)) __PYX_ERR(0, 936, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_output = values[0];
    if (values[1]) {
      __pyx_v_mu = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 936, __pyx_L3_error)
    } else {
      __pyx_v_mu = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_erf_repulsion", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 936, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_erf_repulsion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_22compute_erf_repulsion(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_output, __pyx_v_mu);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_22compute_erf_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output, double __pyx_v_mu) {
  PyObject *__pyx_v_lf = NULL;
  PyArrayObject *__pyx_v_output_array = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  __Pyx_RefNannySetupContext("compute_erf_repulsion", 0);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;

  /* "horton/gbasis/cext.pyx":960
 *         Keywords: :index:`ERI`, :index:`four-center integrals`
 *         """
 *         biblio.cite('valeev2014',             # <<<<<<<<<<<<<<
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         biblio.cite('ahlrichs2006',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":962
 *         biblio.cite('valeev2014',
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         biblio.cite('ahlrichs2006',             # <<<<<<<<<<<<<<
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":964
 *         biblio.cite('ahlrichs2006',
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4ErfIntegralLibInt(self.max_shell_type, mu), lf=lf)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CholeskyLinalgFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "horton/gbasis/cext.pyx":965
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = compute_cholesky(self, GB4ErfIntegralLibInt(self.max_shell_type, mu), lf=lf)
 *             return output
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":966
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output
 *             output = compute_cholesky(self, GB4ErfIntegralLibInt(self.max_shell_type, mu), lf=lf)             # <<<<<<<<<<<<<<
 *             return output
 *         # prepare the output array
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_compute_cholesky); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_mu); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB4ErfIntegralLibInt), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_lf, __pyx_v_lf) < 0) __PYX_ERR(0, 966, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":967
 *             lf = output
 *             output = compute_cholesky(self, GB4ErfIntegralLibInt(self.max_shell_type, mu), lf=lf)
 *             return output             # <<<<<<<<<<<<<<
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_output);
    __pyx_r = __pyx_v_output;
    goto __pyx_L0;

    /* "horton/gbasis/cext.pyx":964
 *         biblio.cite('ahlrichs2006',
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4ErfIntegralLibInt(self.max_shell_type, mu), lf=lf)
 */
  }

  /* "horton/gbasis/cext.pyx":970
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_output, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 970, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "horton/gbasis/cext.pyx":971
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":972
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_four_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":970
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":973
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 973, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_output_array.diminfo[2].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_output_array.diminfo[2].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_output_array.diminfo[3].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_output_array.diminfo[3].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[3];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 973, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":974
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_erf_repulsion(&output_array[0, 0, 0, 0], mu)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_four_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":976
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_erf_repulsion(&output_array[0, 0, 0, 0], mu)             # <<<<<<<<<<<<<<
 *         # done
 *         return output
 */
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_8 = 1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_output_array.diminfo[2].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_8 = 2;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_output_array.diminfo[2].shape)) __pyx_t_8 = 2;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_output_array.diminfo[3].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_8 = 3;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_output_array.diminfo[3].shape)) __pyx_t_8 = 3;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 976, __pyx_L1_error)
  }
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_erf_repulsion((&(*__Pyx_BufPtrStrided4d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_output_array.diminfo[1].strides, __pyx_t_14, __pyx_pybuffernd_output_array.diminfo[2].strides, __pyx_t_15, __pyx_pybuffernd_output_array.diminfo[3].strides))), __pyx_v_mu);

  /* "horton/gbasis/cext.pyx":978
 *         (<gbasis.GOBasis*>self._this).compute_erf_repulsion(&output_array[0, 0, 0, 0], mu)
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_gauss_repulsion(self, output, double c=1.0, double alpha=1.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":936
 *         return output
 * 
 *     def compute_erf_repulsion(self, output, double mu=0.0):             # <<<<<<<<<<<<<<
 *         r"""Compute short-range electron repulsion integrals.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_erf_repulsion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":980
 *         return output
 * 
 *     def compute_gauss_repulsion(self, output, double c=1.0, double alpha=1.0):             # <<<<<<<<<<<<<<
 *         r"""Compute gaussian repulsion four-center integrals.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_25compute_gauss_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_24compute_gauss_repulsion[] = "GOBasis.compute_gauss_repulsion(self, output, double c=1.0, double alpha=1.0)\nCompute gaussian repulsion four-center integrals.\n\n        The potential has the following form:\n\n        .. math::\n            v = c \\exp(-\\alpha r^2)\n\n        Parameters\n        ----------\n        output : FourIndex\n            When a ``DenseFourIndex`` object is given, it is used as output argument and\n            its contents are overwritten. When a ``DenseLinalgFactory`` or\n            ``CholeskyLinalgFactory`` is given, it is used to construct the four-index\n            object in which the integrals are stored.\n        c : float\n            Coefficient of the gaussian.\n        alpha : float\n            Exponential parameter of the gaussian.\n\n        Returns\n        -------\n        output\n\n        Keywords: :index:`ERI`, :index:`four-center integrals`\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_25compute_gauss_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_output = 0;
  double __pyx_v_c;
  double __pyx_v_alpha;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_gauss_repulsion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,&__pyx_n_s_c,&__pyx_n_s_alpha,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_gauss_repulsion") < 0)) __PYX_ERR(0, 980, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_output = values[0];
    if (values[1]) {
      __pyx_v_c = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_c == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 980, __pyx_L3_error)
    } else {
      __pyx_v_c = ((double)1.0);
    }
    if (values[2]) {
      __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 980, __pyx_L3_error)
    } else {
      __pyx_v_alpha = ((double)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_gauss_repulsion", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 980, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_gauss_repulsion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_24compute_gauss_repulsion(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_output, __pyx_v_c, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_24compute_gauss_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output, double __pyx_v_c, double __pyx_v_alpha) {
  PyObject *__pyx_v_lf = NULL;
  PyArrayObject *__pyx_v_output_array = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("compute_gauss_repulsion", 0);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;

  /* "horton/gbasis/cext.pyx":1006
 *         Keywords: :index:`ERI`, :index:`four-center integrals`
 *         """
 *         biblio.cite('valeev2014',             # <<<<<<<<<<<<<<
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         biblio.cite('ahlrichs2006',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1008
 *         biblio.cite('valeev2014',
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         biblio.cite('ahlrichs2006',             # <<<<<<<<<<<<<<
 *                  'the methodology to implement various types of four-center integrals.')
 *         biblio.cite('gill1996',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1010
 *         biblio.cite('ahlrichs2006',
 *                  'the methodology to implement various types of four-center integrals.')
 *         biblio.cite('gill1996',             # <<<<<<<<<<<<<<
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         biblio.cite('toulouse2004',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1012
 *         biblio.cite('gill1996',
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         biblio.cite('toulouse2004',             # <<<<<<<<<<<<<<
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         if isinstance(output, CholeskyLinalgFactory):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1014
 *         biblio.cite('toulouse2004',
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4GaussIntegralLibInt(self.max_shell_type, c, alpha), lf=lf)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CholeskyLinalgFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "horton/gbasis/cext.pyx":1015
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = compute_cholesky(self, GB4GaussIntegralLibInt(self.max_shell_type, c, alpha), lf=lf)
 *             return output
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":1016
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output
 *             output = compute_cholesky(self, GB4GaussIntegralLibInt(self.max_shell_type, c, alpha), lf=lf)             # <<<<<<<<<<<<<<
 *             return output
 *         # prepare the output array
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_compute_cholesky); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_c); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB4GaussIntegralLibInt), __pyx_t_7, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_lf, __pyx_v_lf) < 0) __PYX_ERR(0, 1016, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":1017
 *             lf = output
 *             output = compute_cholesky(self, GB4GaussIntegralLibInt(self.max_shell_type, c, alpha), lf=lf)
 *             return output             # <<<<<<<<<<<<<<
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_output);
    __pyx_r = __pyx_v_output;
    goto __pyx_L0;

    /* "horton/gbasis/cext.pyx":1014
 *         biblio.cite('toulouse2004',
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4GaussIntegralLibInt(self.max_shell_type, c, alpha), lf=lf)
 */
  }

  /* "horton/gbasis/cext.pyx":1020
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_output, __pyx_t_5); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "horton/gbasis/cext.pyx":1021
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":1022
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_four_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_1, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":1020
 *         # prepare the output array
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":1023
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1023, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_output_array.diminfo[2].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_output_array.diminfo[2].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_output_array.diminfo[3].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_output_array.diminfo[3].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[3];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1023, __pyx_L1_error)
  }
  __pyx_t_8 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":1024
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_gauss_repulsion(&output_array[0, 0, 0, 0], c, alpha)
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_four_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_5 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "horton/gbasis/cext.pyx":1026
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_gauss_repulsion(&output_array[0, 0, 0, 0], c, alpha)             # <<<<<<<<<<<<<<
 *         # done
 *         return output
 */
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_9 = 1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_output_array.diminfo[2].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 2;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_output_array.diminfo[2].shape)) __pyx_t_9 = 2;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_output_array.diminfo[3].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 3;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_output_array.diminfo[3].shape)) __pyx_t_9 = 3;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1026, __pyx_L1_error)
  }
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_gauss_repulsion((&(*__Pyx_BufPtrStrided4d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_output_array.diminfo[1].strides, __pyx_t_15, __pyx_pybuffernd_output_array.diminfo[2].strides, __pyx_t_16, __pyx_pybuffernd_output_array.diminfo[3].strides))), __pyx_v_c, __pyx_v_alpha);

  /* "horton/gbasis/cext.pyx":1028
 *         (<gbasis.GOBasis*>self._this).compute_gauss_repulsion(&output_array[0, 0, 0, 0], c, alpha)
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_ralpha_repulsion(self, output, double alpha=-1.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":980
 *         return output
 * 
 *     def compute_gauss_repulsion(self, output, double c=1.0, double alpha=1.0):             # <<<<<<<<<<<<<<
 *         r"""Compute gaussian repulsion four-center integrals.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_gauss_repulsion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1030
 *         return output
 * 
 *     def compute_ralpha_repulsion(self, output, double alpha=-1.0):             # <<<<<<<<<<<<<<
 *         r"""Compute r^alpha repulsion four-center integrals.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_27compute_ralpha_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_26compute_ralpha_repulsion[] = "GOBasis.compute_ralpha_repulsion(self, output, double alpha=-1.0)\nCompute r^alpha repulsion four-center integrals.\n\n        The potential has the following form:\n\n        .. math::\n            v = r^{\\alpha}\n\n        with :math:`\\alpha > -3`.\n\n        Parameters\n        ----------\n\n        output : FourIndex\n            When a ``DenseFourIndex`` object is given, it is used as output argument and\n            its contents are overwritten. When a ``DenseLinalgFactory`` or\n            ``CholeskyLinalgFactory`` is given, it is used to construct the four-index\n            object in which the integrals are stored.\n        alpha : float\n            The power of r in the interation potential.\n\n        Returns\n        -------\n        output\n\n        Keywords: :index:`ERI`, :index:`four-center integrals`\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_27compute_ralpha_repulsion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_output = 0;
  double __pyx_v_alpha;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_ralpha_repulsion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_output,&__pyx_n_s_alpha,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_ralpha_repulsion") < 0)) __PYX_ERR(0, 1030, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_output = values[0];
    if (values[1]) {
      __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1030, __pyx_L3_error)
    } else {
      __pyx_v_alpha = ((double)-1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_ralpha_repulsion", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1030, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_ralpha_repulsion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_26compute_ralpha_repulsion(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_output, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_26compute_ralpha_repulsion(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_output, double __pyx_v_alpha) {
  PyObject *__pyx_v_lf = NULL;
  PyArrayObject *__pyx_v_output_array = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output_array;
  __Pyx_Buffer __pyx_pybuffer_output_array;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  __Pyx_RefNannySetupContext("compute_ralpha_repulsion", 0);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_pybuffer_output_array.pybuffer.buf = NULL;
  __pyx_pybuffer_output_array.refcount = 0;
  __pyx_pybuffernd_output_array.data = NULL;
  __pyx_pybuffernd_output_array.rcbuffer = &__pyx_pybuffer_output_array;

  /* "horton/gbasis/cext.pyx":1057
 *         Keywords: :index:`ERI`, :index:`four-center integrals`
 *         """
 *         biblio.cite('valeev2014',             # <<<<<<<<<<<<<<
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         biblio.cite('ahlrichs2006',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1059
 *         biblio.cite('valeev2014',
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         biblio.cite('ahlrichs2006',             # <<<<<<<<<<<<<<
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cite); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1061
 *         biblio.cite('ahlrichs2006',
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4RAlphaIntegralLibInt(self.max_shell_type, alpha), lf=lf)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CholeskyLinalgFactory); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_output, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "horton/gbasis/cext.pyx":1062
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = compute_cholesky(self, GB4RAlphaIntegralLibInt(self.max_shell_type, alpha), lf=lf)
 *             return output
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":1063
 *         if isinstance(output, CholeskyLinalgFactory):
 *             lf = output
 *             output = compute_cholesky(self, GB4RAlphaIntegralLibInt(self.max_shell_type, alpha), lf=lf)             # <<<<<<<<<<<<<<
 *             return output
 *         cdef np.ndarray[double, ndim=4] output_array
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_compute_cholesky); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_alpha); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt), __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_lf, __pyx_v_lf) < 0) __PYX_ERR(0, 1063, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":1064
 *             lf = output
 *             output = compute_cholesky(self, GB4RAlphaIntegralLibInt(self.max_shell_type, alpha), lf=lf)
 *             return output             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_output);
    __pyx_r = __pyx_v_output;
    goto __pyx_L0;

    /* "horton/gbasis/cext.pyx":1061
 *         biblio.cite('ahlrichs2006',
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = compute_cholesky(self, GB4RAlphaIntegralLibInt(self.max_shell_type, alpha), lf=lf)
 */
  }

  /* "horton/gbasis/cext.pyx":1066
 *             return output
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_output, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "horton/gbasis/cext.pyx":1067
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):
 *             lf = output             # <<<<<<<<<<<<<<
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 */
    __Pyx_INCREF(__pyx_v_output);
    __pyx_v_lf = __pyx_v_output;

    /* "horton/gbasis/cext.pyx":1068
 *         if isinstance(output, LinalgFactory):
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)             # <<<<<<<<<<<<<<
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_lf, __pyx_n_s_create_four_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":1066
 *             return output
 *         cdef np.ndarray[double, ndim=4] output_array
 *         if isinstance(output, LinalgFactory):             # <<<<<<<<<<<<<<
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 */
  }

  /* "horton/gbasis/cext.pyx":1069
 *             lf = output
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_output, __pyx_n_s_array_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1069, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_output_array, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_output_array.diminfo[0].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output_array.diminfo[0].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output_array.diminfo[1].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output_array.diminfo[1].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_output_array.diminfo[2].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_output_array.diminfo[2].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_output_array.diminfo[3].strides = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_output_array.diminfo[3].shape = __pyx_pybuffernd_output_array.rcbuffer->pybuffer.shape[3];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1069, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_output_array = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":1070
 *             output = lf.create_four_index(self.nbasis)
 *         output_array = output._array
 *         self.check_matrix_four_index(output_array)             # <<<<<<<<<<<<<<
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_ralpha_repulsion(&output_array[0, 0, 0, 0], alpha)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_four_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, ((PyObject *)__pyx_v_output_array)) : __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_output_array));
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "horton/gbasis/cext.pyx":1072
 *         self.check_matrix_four_index(output_array)
 *         # call the low-level routine
 *         (<gbasis.GOBasis*>self._this).compute_ralpha_repulsion(&output_array[0, 0, 0, 0], alpha)             # <<<<<<<<<<<<<<
 *         # done
 *         return output
 */
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_output_array.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_output_array.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_output_array.diminfo[1].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_output_array.diminfo[1].shape)) __pyx_t_8 = 1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_output_array.diminfo[2].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_8 = 2;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_output_array.diminfo[2].shape)) __pyx_t_8 = 2;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_output_array.diminfo[3].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_8 = 3;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_output_array.diminfo[3].shape)) __pyx_t_8 = 3;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1072, __pyx_L1_error)
  }
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_ralpha_repulsion((&(*__Pyx_BufPtrStrided4d(double *, __pyx_pybuffernd_output_array.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_output_array.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_output_array.diminfo[1].strides, __pyx_t_14, __pyx_pybuffernd_output_array.diminfo[2].strides, __pyx_t_15, __pyx_pybuffernd_output_array.diminfo[3].strides))), __pyx_v_alpha);

  /* "horton/gbasis/cext.pyx":1074
 *         (<gbasis.GOBasis*>self._this).compute_ralpha_repulsion(&output_array[0, 0, 0, 0], alpha)
 *         # done
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_orbitals_exp(self, exp,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1030
 *         return output
 * 
 *     def compute_ralpha_repulsion(self, output, double alpha=-1.0):             # <<<<<<<<<<<<<<
 *         r"""Compute r^alpha repulsion four-center integrals.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_ralpha_repulsion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output_array.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_lf);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_array);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1076
 *         return output
 * 
 *     def compute_grid_orbitals_exp(self, exp,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_29compute_grid_orbitals_exp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_28compute_grid_orbitals_exp[] = "GOBasis.compute_grid_orbitals_exp(self, exp, ndarray points, ndarray iorbs, ndarray output=None)\nCompute the orbitals on a grid for a given set of expansion coefficients.\n\n        **Warning:** the results are added to the output array!\n\n        Parameters\n        ----------\n\n        exp : DenseExpansion\n            Orbitals.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        iorbs : np.ndarray, shape=(n,), dtype=int\n            Indexes of the orbitals to be computed. When not given, the orbitals with a\n            non-zero occupation number are computed.\n        output : np.ndarray, shape=(npoint, n), dtype=float\n            An output array. The results are added to this array. When not given, an\n            output array is allocated.\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint, n), dtype=float\n            the output array. (It is allocated when not given.)\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_29compute_grid_orbitals_exp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exp = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_iorbs = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_orbitals_exp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exp,&__pyx_n_s_points,&__pyx_n_s_iorbs,&__pyx_n_s_output,0};
    PyObject* values[4] = {0,0,0,0};

    /* "horton/gbasis/cext.pyx":1079
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 *                                   np.ndarray[double, ndim=2] output=None):             # <<<<<<<<<<<<<<
 *         r"""Compute the orbitals on a grid for a given set of expansion coefficients.
 * 
 */
    values[3] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_orbitals_exp", 0, 3, 4, 1); __PYX_ERR(0, 1076, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iorbs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_orbitals_exp", 0, 3, 4, 2); __PYX_ERR(0, 1076, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_orbitals_exp") < 0)) __PYX_ERR(0, 1076, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_exp = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_iorbs = ((PyArrayObject *)values[2]);
    __pyx_v_output = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_orbitals_exp", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1076, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_orbitals_exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1077, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_iorbs), __pyx_ptype_5numpy_ndarray, 0, "iorbs", 0))) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_28compute_grid_orbitals_exp(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_exp, __pyx_v_points, __pyx_v_iorbs, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1076
 *         return output
 * 
 *     def compute_grid_orbitals_exp(self, exp,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_28compute_grid_orbitals_exp(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_exp, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_iorbs, PyArrayObject *__pyx_v_output) {
  PyArrayObject *__pyx_v_coeffs = 0;
  npy_intp __pyx_v_nfn;
  npy_intp __pyx_v_npoint;
  npy_intp __pyx_v_norb;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coeffs;
  __Pyx_Buffer __pyx_pybuffer_coeffs;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_iorbs;
  __Pyx_Buffer __pyx_pybuffer_iorbs;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyArrayObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  __Pyx_RefNannySetupContext("compute_grid_orbitals_exp", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_coeffs.pybuffer.buf = NULL;
  __pyx_pybuffer_coeffs.refcount = 0;
  __pyx_pybuffernd_coeffs.data = NULL;
  __pyx_pybuffernd_coeffs.rcbuffer = &__pyx_pybuffer_coeffs;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_iorbs.pybuffer.buf = NULL;
  __pyx_pybuffer_iorbs.refcount = 0;
  __pyx_pybuffernd_iorbs.data = NULL;
  __pyx_pybuffernd_iorbs.rcbuffer = &__pyx_pybuffer_iorbs;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_iorbs.rcbuffer->pybuffer, (PyObject*)__pyx_v_iorbs, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  }
  __pyx_pybuffernd_iorbs.diminfo[0].strides = __pyx_pybuffernd_iorbs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_iorbs.diminfo[0].shape = __pyx_pybuffernd_iorbs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1104
 *         """
 *         # Do some type checking
 *         cdef np.ndarray[double, ndim=2] coeffs = exp.coeffs             # <<<<<<<<<<<<<<
 *         self.check_matrix_coeffs(coeffs)
 *         nfn = coeffs.shape[1]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_exp, __pyx_n_s_coeffs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1104, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coeffs.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_coeffs = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1104, __pyx_L1_error)
    } else {__pyx_pybuffernd_coeffs.diminfo[0].strides = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coeffs.diminfo[0].shape = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coeffs.diminfo[1].strides = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coeffs.diminfo[1].shape = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_coeffs = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1105
 *         # Do some type checking
 *         cdef np.ndarray[double, ndim=2] coeffs = exp.coeffs
 *         self.check_matrix_coeffs(coeffs)             # <<<<<<<<<<<<<<
 *         nfn = coeffs.shape[1]
 *         assert points.flags['C_CONTIGUOUS']
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_coeffs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_coeffs)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_coeffs));
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1106
 *         cdef np.ndarray[double, ndim=2] coeffs = exp.coeffs
 *         self.check_matrix_coeffs(coeffs)
 *         nfn = coeffs.shape[1]             # <<<<<<<<<<<<<<
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 */
  __pyx_v_nfn = (__pyx_v_coeffs->dimensions[1]);

  /* "horton/gbasis/cext.pyx":1107
 *         self.check_matrix_coeffs(coeffs)
 *         nfn = coeffs.shape[1]
 *         assert points.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_points), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1107, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1108
 *         nfn = coeffs.shape[1]
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]             # <<<<<<<<<<<<<<
 *         assert points.shape[1] == 3
 *         assert iorbs.flags['C_CONTIGUOUS']
 */
  __pyx_v_npoint = (__pyx_v_points->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1109
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3             # <<<<<<<<<<<<<<
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_points->dimensions[1]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1109, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1110
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 *         assert iorbs.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         norb = iorbs.shape[0]
 *         if output is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iorbs), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1110, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1111
 *         assert points.shape[1] == 3
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]             # <<<<<<<<<<<<<<
 *         if output is None:
 *             output = np.zeros((npoint, norb), float)
 */
  __pyx_v_norb = (__pyx_v_iorbs->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1112
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((npoint, norb), float)
 *         else:
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "horton/gbasis/cext.pyx":1113
 *         norb = iorbs.shape[0]
 *         if output is None:
 *             output = np.zeros((npoint, norb), float)             # <<<<<<<<<<<<<<
 *         else:
 *             assert output.flags['C_CONTIGUOUS']
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_npoint); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_norb); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_3 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_9, __pyx_t_8);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_9, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1113, __pyx_L1_error)
    __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        }
        __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1113, __pyx_L1_error)
    }
    __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":1112
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((npoint, norb), float)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "horton/gbasis/cext.pyx":1115
 *             output = np.zeros((npoint, norb), float)
 *         else:
 *             assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *             assert output.shape[0] == npoint
 *             assert output.shape[1] == norb
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1115, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1115, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1116
 *         else:
 *             assert output.flags['C_CONTIGUOUS']
 *             assert output.shape[0] == npoint             # <<<<<<<<<<<<<<
 *             assert output.shape[1] == norb
 *         # compute
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(((__pyx_v_output->dimensions[0]) == __pyx_v_npoint) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1116, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1117
 *             assert output.flags['C_CONTIGUOUS']
 *             assert output.shape[0] == npoint
 *             assert output.shape[1] == norb             # <<<<<<<<<<<<<<
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid1_exp(
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(((__pyx_v_output->dimensions[1]) == __pyx_v_norb) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1117, __pyx_L1_error)
      }
    }
    #endif
  }
  __pyx_L3:;

  /* "horton/gbasis/cext.pyx":1120
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid1_exp(
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],             # <<<<<<<<<<<<<<
 *             norb, &iorbs[0], &output[0, 0])
 *         return output
 */
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_coeffs.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_coeffs.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_coeffs.diminfo[1].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_coeffs.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1120, __pyx_L1_error)
  }
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_points.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_points.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_17 < 0) {
    __pyx_t_17 += __pyx_pybuffernd_points.diminfo[1].shape;
    if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_points.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1120, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1121
 *         (<gbasis.GOBasis*>self._this).compute_grid1_exp(
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],
 *             norb, &iorbs[0], &output[0, 0])             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_18 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_18 < 0) {
    __pyx_t_18 += __pyx_pybuffernd_iorbs.diminfo[0].shape;
    if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_iorbs.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1121, __pyx_L1_error)
  }
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_19 < 0) {
    __pyx_t_19 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_20 < 0) {
    __pyx_t_20 += __pyx_pybuffernd_output.diminfo[1].shape;
    if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_output.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1121, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1119
 *             assert output.shape[1] == norb
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid1_exp(             # <<<<<<<<<<<<<<
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],
 *             norb, &iorbs[0], &output[0, 0])
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_grid1_exp(__pyx_v_nfn, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_coeffs.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_coeffs.diminfo[1].strides))), __pyx_v_npoint, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_points.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_points.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_points.diminfo[1].strides))), __pyx_v_norb, (&(*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_iorbs.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_iorbs.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_output.diminfo[1].strides))));

  /* "horton/gbasis/cext.pyx":1122
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],
 *             norb, &iorbs[0], &output[0, 0])
 *         return output             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1076
 *         return output
 * 
 *     def compute_grid_orbitals_exp(self, exp,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coeffs.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_iorbs.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_orbitals_exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coeffs.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_iorbs.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_coeffs);
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1125
 * 
 * 
 *     def compute_grid_orb_gradient_exp(self, exp,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_31compute_grid_orb_gradient_exp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_30compute_grid_orb_gradient_exp[] = "GOBasis.compute_grid_orb_gradient_exp(self, exp, ndarray points, ndarray iorbs, ndarray output=None)\nCompute the orbital gradient on a grid for a given set of expansion coefficients.\n\n        **Warning:** the results are added to the output array!\n\n        Parameters\n        ----------\n\n        exp : DenseExpansion\n            Orbitals.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        iorbs : np.ndarray, shape=(n,), dtype=int\n            Indexes of the orbitals to be computed.\n        output : np.ndarray, shape=(npoint, n, 3), dtype=float\n            An output array. The results are added to this array. When not given, an\n            output array is allocated.\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint, n, 3), dtype=float\n            the output array. (It is allocated when not given.)\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_31compute_grid_orb_gradient_exp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_exp = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_iorbs = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_orb_gradient_exp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exp,&__pyx_n_s_points,&__pyx_n_s_iorbs,&__pyx_n_s_output,0};
    PyObject* values[4] = {0,0,0,0};

    /* "horton/gbasis/cext.pyx":1128
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 *                                   np.ndarray[double, ndim=3] output=None):             # <<<<<<<<<<<<<<
 * 
 *         r"""Compute the orbital gradient on a grid for a given set of expansion coefficients.
 */
    values[3] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_orb_gradient_exp", 0, 3, 4, 1); __PYX_ERR(0, 1125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_iorbs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_orb_gradient_exp", 0, 3, 4, 2); __PYX_ERR(0, 1125, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_orb_gradient_exp") < 0)) __PYX_ERR(0, 1125, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_exp = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_iorbs = ((PyArrayObject *)values[2]);
    __pyx_v_output = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_orb_gradient_exp", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1125, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_orb_gradient_exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1126, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_iorbs), __pyx_ptype_5numpy_ndarray, 0, "iorbs", 0))) __PYX_ERR(0, 1127, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1128, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_30compute_grid_orb_gradient_exp(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_exp, __pyx_v_points, __pyx_v_iorbs, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1125
 * 
 * 
 *     def compute_grid_orb_gradient_exp(self, exp,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_30compute_grid_orb_gradient_exp(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_exp, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_iorbs, PyArrayObject *__pyx_v_output) {
  PyArrayObject *__pyx_v_coeffs = 0;
  npy_intp __pyx_v_nfn;
  npy_intp __pyx_v_npoint;
  npy_intp __pyx_v_norb;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coeffs;
  __Pyx_Buffer __pyx_pybuffer_coeffs;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_iorbs;
  __Pyx_Buffer __pyx_pybuffer_iorbs;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyArrayObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_RefNannySetupContext("compute_grid_orb_gradient_exp", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_coeffs.pybuffer.buf = NULL;
  __pyx_pybuffer_coeffs.refcount = 0;
  __pyx_pybuffernd_coeffs.data = NULL;
  __pyx_pybuffernd_coeffs.rcbuffer = &__pyx_pybuffer_coeffs;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_iorbs.pybuffer.buf = NULL;
  __pyx_pybuffer_iorbs.refcount = 0;
  __pyx_pybuffernd_iorbs.data = NULL;
  __pyx_pybuffernd_iorbs.rcbuffer = &__pyx_pybuffer_iorbs;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_iorbs.rcbuffer->pybuffer, (PyObject*)__pyx_v_iorbs, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  }
  __pyx_pybuffernd_iorbs.diminfo[0].strides = __pyx_pybuffernd_iorbs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_iorbs.diminfo[0].shape = __pyx_pybuffernd_iorbs.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 3, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_output.diminfo[2].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_output.diminfo[2].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[2];

  /* "horton/gbasis/cext.pyx":1153
 *         """
 *         # Do some type checking
 *         cdef np.ndarray[double, ndim=2] coeffs = exp.coeffs             # <<<<<<<<<<<<<<
 *         self.check_matrix_coeffs(coeffs)
 *         nfn = coeffs.shape[1]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_exp, __pyx_n_s_coeffs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1153, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coeffs.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_coeffs = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1153, __pyx_L1_error)
    } else {__pyx_pybuffernd_coeffs.diminfo[0].strides = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coeffs.diminfo[0].shape = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coeffs.diminfo[1].strides = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coeffs.diminfo[1].shape = __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_coeffs = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1154
 *         # Do some type checking
 *         cdef np.ndarray[double, ndim=2] coeffs = exp.coeffs
 *         self.check_matrix_coeffs(coeffs)             # <<<<<<<<<<<<<<
 *         nfn = coeffs.shape[1]
 *         assert points.flags['C_CONTIGUOUS']
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_coeffs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_coeffs)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_coeffs));
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1155
 *         cdef np.ndarray[double, ndim=2] coeffs = exp.coeffs
 *         self.check_matrix_coeffs(coeffs)
 *         nfn = coeffs.shape[1]             # <<<<<<<<<<<<<<
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 */
  __pyx_v_nfn = (__pyx_v_coeffs->dimensions[1]);

  /* "horton/gbasis/cext.pyx":1156
 *         self.check_matrix_coeffs(coeffs)
 *         nfn = coeffs.shape[1]
 *         assert points.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_points), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1156, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1157
 *         nfn = coeffs.shape[1]
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]             # <<<<<<<<<<<<<<
 *         assert points.shape[1] == 3
 *         assert iorbs.flags['C_CONTIGUOUS']
 */
  __pyx_v_npoint = (__pyx_v_points->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1158
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3             # <<<<<<<<<<<<<<
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_points->dimensions[1]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1158, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1159
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 *         assert iorbs.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         norb = iorbs.shape[0]
 *         if output is None:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_iorbs), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1159, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1160
 *         assert points.shape[1] == 3
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]             # <<<<<<<<<<<<<<
 *         if output is None:
 *             output = np.zeros((npoint, norb, 3), float)
 */
  __pyx_v_norb = (__pyx_v_iorbs->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1161
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((npoint, norb, 3), float)
 *         else:
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "horton/gbasis/cext.pyx":1162
 *         norb = iorbs.shape[0]
 *         if output is None:
 *             output = np.zeros((npoint, norb, 3), float)             # <<<<<<<<<<<<<<
 *         else:
 *             assert output.flags['C_CONTIGUOUS']
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_npoint); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_norb); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_int_3);
    __pyx_t_3 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_9 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_9, __pyx_t_8);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_9, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_8 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1162, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1162, __pyx_L1_error)
    __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 3, 0, __pyx_stack);
      if (unlikely(__pyx_t_9 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 3, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        }
        __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_output.diminfo[2].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_output.diminfo[2].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[2];
      if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 1162, __pyx_L1_error)
    }
    __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":1161
 *         assert iorbs.flags['C_CONTIGUOUS']
 *         norb = iorbs.shape[0]
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((npoint, norb, 3), float)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "horton/gbasis/cext.pyx":1164
 *             output = np.zeros((npoint, norb, 3), float)
 *         else:
 *             assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *             assert output.shape[0] == npoint
 *             assert output.shape[1] == norb
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1164, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1165
 *         else:
 *             assert output.flags['C_CONTIGUOUS']
 *             assert output.shape[0] == npoint             # <<<<<<<<<<<<<<
 *             assert output.shape[1] == norb
 *             assert output.shape[3] == 3
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(((__pyx_v_output->dimensions[0]) == __pyx_v_npoint) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1165, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1166
 *             assert output.flags['C_CONTIGUOUS']
 *             assert output.shape[0] == npoint
 *             assert output.shape[1] == norb             # <<<<<<<<<<<<<<
 *             assert output.shape[3] == 3
 *         # compute
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(((__pyx_v_output->dimensions[1]) == __pyx_v_norb) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1166, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1167
 *             assert output.shape[0] == npoint
 *             assert output.shape[1] == norb
 *             assert output.shape[3] == 3             # <<<<<<<<<<<<<<
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid1_grad_exp(
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(((__pyx_v_output->dimensions[3]) == 3) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1167, __pyx_L1_error)
      }
    }
    #endif
  }
  __pyx_L3:;

  /* "horton/gbasis/cext.pyx":1170
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid1_grad_exp(
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],             # <<<<<<<<<<<<<<
 *             norb, &iorbs[0], &output[0, 0, 0])
 *         return output
 */
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_coeffs.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_coeffs.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_coeffs.diminfo[1].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_coeffs.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1170, __pyx_L1_error)
  }
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_points.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_points.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_17 < 0) {
    __pyx_t_17 += __pyx_pybuffernd_points.diminfo[1].shape;
    if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_points.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1170, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1171
 *         (<gbasis.GOBasis*>self._this).compute_grid1_grad_exp(
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],
 *             norb, &iorbs[0], &output[0, 0, 0])             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_18 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_18 < 0) {
    __pyx_t_18 += __pyx_pybuffernd_iorbs.diminfo[0].shape;
    if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_iorbs.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1171, __pyx_L1_error)
  }
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_19 < 0) {
    __pyx_t_19 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_20 < 0) {
    __pyx_t_20 += __pyx_pybuffernd_output.diminfo[1].shape;
    if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_output.diminfo[1].shape)) __pyx_t_9 = 1;
  if (__pyx_t_21 < 0) {
    __pyx_t_21 += __pyx_pybuffernd_output.diminfo[2].shape;
    if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 2;
  } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_output.diminfo[2].shape)) __pyx_t_9 = 2;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1171, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1169
 *             assert output.shape[3] == 3
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid1_grad_exp(             # <<<<<<<<<<<<<<
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],
 *             norb, &iorbs[0], &output[0, 0, 0])
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_grid1_grad_exp(__pyx_v_nfn, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_coeffs.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_coeffs.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_coeffs.diminfo[1].strides))), __pyx_v_npoint, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_points.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_points.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_points.diminfo[1].strides))), __pyx_v_norb, (&(*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_iorbs.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_iorbs.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided3d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_output.diminfo[1].strides, __pyx_t_21, __pyx_pybuffernd_output.diminfo[2].strides))));

  /* "horton/gbasis/cext.pyx":1172
 *             nfn, &coeffs[0, 0], npoint, &points[0, 0],
 *             norb, &iorbs[0], &output[0, 0, 0])
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def _compute_grid1_dm(self, dm, np.ndarray[double, ndim=2] points not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1125
 * 
 * 
 *     def compute_grid_orb_gradient_exp(self, exp,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=2] points not None,
 *                                   np.ndarray[long, ndim=1] iorbs not None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coeffs.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_iorbs.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_orb_gradient_exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coeffs.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_iorbs.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_coeffs);
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1174
 *         return output
 * 
 *     def _compute_grid1_dm(self, dm, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                           GB1DMGridFn grid_fn not None, np.ndarray output not None,
 *                           double epsilon=0):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_33_compute_grid1_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_32_compute_grid1_dm[] = "GOBasis._compute_grid1_dm(self, dm, ndarray points, GB1DMGridFn grid_fn, ndarray output, double epsilon=0)\nCompute some density function on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        grid_fn : GB1DMGridFn\n            Implements the function to be evaluated on the grid.\n        output : np.ndarray, shape=(npoint, n), dtype=float\n            Output array. The second dimension depends on grid_fn.\n        epsilon : float\n            Allow errors on the density of this magnitude for the sake of\n            efficiency. Some grid_fn implementations may ignore this.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_33_compute_grid1_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn = 0;
  PyArrayObject *__pyx_v_output = 0;
  double __pyx_v_epsilon;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compute_grid1_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_grid_fn,&__pyx_n_s_output,&__pyx_n_s_epsilon,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compute_grid1_dm", 0, 4, 5, 1); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grid_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compute_grid1_dm", 0, 4, 5, 2); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compute_grid1_dm", 0, 4, 5, 3); __PYX_ERR(0, 1174, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_compute_grid1_dm") < 0)) __PYX_ERR(0, 1174, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_grid_fn = ((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)values[2]);
    __pyx_v_output = ((PyArrayObject *)values[3]);
    if (values[4]) {
      __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L3_error)
    } else {
      __pyx_v_epsilon = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compute_grid1_dm", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis._compute_grid1_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1174, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_grid_fn), __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn, 0, "grid_fn", 0))) __PYX_ERR(0, 1175, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 0, "output", 0))) __PYX_ERR(0, 1175, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_32_compute_grid1_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_grid_fn, __pyx_v_output, __pyx_v_epsilon);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_32_compute_grid1_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn, PyArrayObject *__pyx_v_output, double __pyx_v_epsilon) {
  PyArrayObject *__pyx_v_dmar = 0;
  PyArrayObject *__pyx_v_dmmaxrow = 0;
  npy_intp __pyx_v_npoint;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dmar;
  __Pyx_Buffer __pyx_pybuffer_dmar;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dmmaxrow;
  __Pyx_Buffer __pyx_pybuffer_dmmaxrow;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("_compute_grid1_dm", 0);
  __pyx_pybuffer_dmar.pybuffer.buf = NULL;
  __pyx_pybuffer_dmar.refcount = 0;
  __pyx_pybuffernd_dmar.data = NULL;
  __pyx_pybuffernd_dmar.rcbuffer = &__pyx_pybuffer_dmar;
  __pyx_pybuffer_dmmaxrow.pybuffer.buf = NULL;
  __pyx_pybuffer_dmmaxrow.refcount = 0;
  __pyx_pybuffernd_dmmaxrow.data = NULL;
  __pyx_pybuffernd_dmmaxrow.rcbuffer = &__pyx_pybuffer_dmmaxrow;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1174, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1199
 *         # Get the array of the density matrix
 *         #print('dm=',dm)
 *         cdef np.ndarray[double, ndim=2] dmar = dm._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(dmar)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dm, __pyx_n_s_array_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1199, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dmar.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_dmar = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dmar.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1199, __pyx_L1_error)
    } else {__pyx_pybuffernd_dmar.diminfo[0].strides = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dmar.diminfo[0].shape = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dmar.diminfo[1].strides = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dmar.diminfo[1].shape = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_dmar = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1200
 *         #print('dm=',dm)
 *         cdef np.ndarray[double, ndim=2] dmar = dm._array
 *         self.check_matrix_two_index(dmar)             # <<<<<<<<<<<<<<
 * 
 *         # Get the maximum of the absolute value over the rows
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_dmar)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_dmar));
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1203
 * 
 *         # Get the maximum of the absolute value over the rows
 *         cdef np.ndarray[double, ndim=1] dmmaxrow = np.abs(dmar).max(axis=0)             # <<<<<<<<<<<<<<
 * 
 *         # Check the output array
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_abs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, ((PyObject *)__pyx_v_dmar)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_dmar));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 1203, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1203, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dmmaxrow.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_dmmaxrow = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dmmaxrow.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1203, __pyx_L1_error)
    } else {__pyx_pybuffernd_dmmaxrow.diminfo[0].strides = __pyx_pybuffernd_dmmaxrow.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dmmaxrow.diminfo[0].shape = __pyx_pybuffernd_dmmaxrow.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_5 = 0;
  __pyx_v_dmmaxrow = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":1206
 * 
 *         # Check the output array
 *         assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert output.dtype == np.double
 *         npoint = output.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1206, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1206, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1207
 *         # Check the output array
 *         assert output.flags['C_CONTIGUOUS']
 *         assert output.dtype == np.double             # <<<<<<<<<<<<<<
 *         npoint = output.shape[0]
 *         if grid_fn.dim_output == 1:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1207, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1208
 *         assert output.flags['C_CONTIGUOUS']
 *         assert output.dtype == np.double
 *         npoint = output.shape[0]             # <<<<<<<<<<<<<<
 *         if grid_fn.dim_output == 1:
 *             assert output.ndim == 1
 */
  __pyx_v_npoint = (__pyx_v_output->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1209
 *         assert output.dtype == np.double
 *         npoint = output.shape[0]
 *         if grid_fn.dim_output == 1:             # <<<<<<<<<<<<<<
 *             assert output.ndim == 1
 *         else:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_grid_fn), __pyx_n_s_dim_output); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {

    /* "horton/gbasis/cext.pyx":1210
 *         npoint = output.shape[0]
 *         if grid_fn.dim_output == 1:
 *             assert output.ndim == 1             # <<<<<<<<<<<<<<
 *         else:
 *             assert output.ndim == 2
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_output->nd == 1) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1210, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1209
 *         assert output.dtype == np.double
 *         npoint = output.shape[0]
 *         if grid_fn.dim_output == 1:             # <<<<<<<<<<<<<<
 *             assert output.ndim == 1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "horton/gbasis/cext.pyx":1212
 *             assert output.ndim == 1
 *         else:
 *             assert output.ndim == 2             # <<<<<<<<<<<<<<
 *             assert output.shape[1] == grid_fn.dim_output
 * 
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_output->nd == 2) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1212, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1213
 *         else:
 *             assert output.ndim == 2
 *             assert output.shape[1] == grid_fn.dim_output             # <<<<<<<<<<<<<<
 * 
 *         # Check the points array
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_grid_fn), __pyx_n_s_dim_output); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1213, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_6)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1213, __pyx_L1_error)
      }
    }
    #endif
  }
  __pyx_L3:;

  /* "horton/gbasis/cext.pyx":1216
 * 
 *         # Check the points array
 *         assert points.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert points.shape[0] == npoint
 *         assert points.shape[1] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_points), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1216, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1217
 *         # Check the points array
 *         assert points.flags['C_CONTIGUOUS']
 *         assert points.shape[0] == npoint             # <<<<<<<<<<<<<<
 *         assert points.shape[1] == 3
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_points->dimensions[0]) == __pyx_v_npoint) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1217, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1218
 *         assert points.flags['C_CONTIGUOUS']
 *         assert points.shape[0] == npoint
 *         assert points.shape[1] == 3             # <<<<<<<<<<<<<<
 * 
 *         # Go!
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_points->dimensions[1]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1218, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1222
 *         # Go!
 *         (<gbasis.GOBasis*>self._this).compute_grid1_dm(
 *             &dmar[0, 0], npoint, &points[0, 0],             # <<<<<<<<<<<<<<
 *             grid_fn._this, <double*>np.PyArray_DATA(output), epsilon,
 *             &dmmaxrow[0])
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_dmar.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_dmar.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_pybuffernd_dmar.diminfo[1].shape;
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_dmar.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1222, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_points.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_points.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_points.diminfo[1].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_points.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1222, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1224
 *             &dmar[0, 0], npoint, &points[0, 0],
 *             grid_fn._this, <double*>np.PyArray_DATA(output), epsilon,
 *             &dmmaxrow[0])             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_density_dm(self, dm,
 */
  __pyx_t_12 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_dmmaxrow.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_dmmaxrow.diminfo[0].shape)) __pyx_t_9 = 0;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 1224, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1221
 * 
 *         # Go!
 *         (<gbasis.GOBasis*>self._this).compute_grid1_dm(             # <<<<<<<<<<<<<<
 *             &dmar[0, 0], npoint, &points[0, 0],
 *             grid_fn._this, <double*>np.PyArray_DATA(output), epsilon,
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_grid1_dm((&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_dmar.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_dmar.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_dmar.diminfo[1].strides))), __pyx_v_npoint, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_points.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_points.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_points.diminfo[1].strides))), __pyx_v_grid_fn->_this, ((double *)PyArray_DATA(__pyx_v_output)), __pyx_v_epsilon, (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_dmmaxrow.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_dmmaxrow.diminfo[0].strides))));

  /* "horton/gbasis/cext.pyx":1174
 *         return output
 * 
 *     def _compute_grid1_dm(self, dm, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                           GB1DMGridFn grid_fn not None, np.ndarray output not None,
 *                           double epsilon=0):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dmar.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dmmaxrow.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis._compute_grid1_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dmar.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dmmaxrow.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dmar);
  __Pyx_XDECREF((PyObject *)__pyx_v_dmmaxrow);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1226
 *             &dmmaxrow[0])
 * 
 *     def compute_grid_density_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_35compute_grid_density_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_34compute_grid_density_dm[] = "GOBasis.compute_grid_density_dm(self, dm, ndarray points, ndarray output=None, double epsilon=0)\nCompute the electron density on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint,), dtype=float\n            Output array. When not given, it is allocated and returned.\n        epsilon : float\n            Allow errors on the density of this magnitude for the sake of\n            efficiency. Some grid_fn implementations may ignore this.\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint,), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_35compute_grid_density_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  double __pyx_v_epsilon;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_density_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_output,&__pyx_n_s_epsilon,0};
    PyObject* values[4] = {0,0,0,0};

    /* "horton/gbasis/cext.pyx":1228
 *     def compute_grid_density_dm(self, dm,
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None,             # <<<<<<<<<<<<<<
 *                                 double epsilon=0):
 *         """Compute the electron density on a grid for a given density matrix.
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_density_dm", 0, 2, 4, 1); __PYX_ERR(0, 1226, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_epsilon);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_density_dm") < 0)) __PYX_ERR(0, 1226, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_output = ((PyArrayObject *)values[2]);
    if (values[3]) {
      __pyx_v_epsilon = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_epsilon == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1229, __pyx_L3_error)
    } else {
      __pyx_v_epsilon = ((double)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_density_dm", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1226, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_density_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1227, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1228, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_34compute_grid_density_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_output, __pyx_v_epsilon);

  /* "horton/gbasis/cext.pyx":1226
 *             &dmmaxrow[0])
 * 
 *     def compute_grid_density_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_34compute_grid_density_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output, double __pyx_v_epsilon) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_density_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1226, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1226, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1253
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros(points.shape[0])
 *         self._compute_grid1_dm(dm, points, GB1DMGridDensityFn(self.max_shell_type), output, epsilon)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "horton/gbasis/cext.pyx":1254
 *         """
 *         if output is None:
 *             output = np.zeros(points.shape[0])             # <<<<<<<<<<<<<<
 *         self._compute_grid1_dm(dm, points, GB1DMGridDensityFn(self.max_shell_type), output, epsilon)
 *         return output
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_points->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1254, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        }
        __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1254, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1253
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros(points.shape[0])
 *         self._compute_grid1_dm(dm, points, GB1DMGridDensityFn(self.max_shell_type), output, epsilon)
 */
  }

  /* "horton/gbasis/cext.pyx":1255
 *         if output is None:
 *             output = np.zeros(points.shape[0])
 *         self._compute_grid1_dm(dm, points, GB1DMGridDensityFn(self.max_shell_type), output, epsilon)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_dm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridDensityFn), __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_epsilon); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[6] = {__pyx_t_12, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output), __pyx_t_4};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 5+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[6] = {__pyx_t_12, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output), __pyx_t_4};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 5+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_13 = PyTuple_New(5+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dm);
    __Pyx_GIVEREF(__pyx_v_dm);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_8, __pyx_v_dm);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_8, ((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_8, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_8, ((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 4+__pyx_t_8, __pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":1256
 *             output = np.zeros(points.shape[0])
 *         self._compute_grid1_dm(dm, points, GB1DMGridDensityFn(self.max_shell_type), output, epsilon)
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_gradient_dm(self, dm,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1226
 *             &dmmaxrow[0])
 * 
 *     def compute_grid_density_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_density_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1258
 *         return output
 * 
 *     def compute_grid_gradient_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                  np.ndarray[double, ndim=2] points not None,
 *                                  np.ndarray[double, ndim=2] output=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_37compute_grid_gradient_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_36compute_grid_gradient_dm[] = "GOBasis.compute_grid_gradient_dm(self, dm, ndarray points, ndarray output=None)\nCompute the electron density gradient on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint, 3), dtype=float\n            Output array. When not given, it is allocated and returned.\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint, 3), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_37compute_grid_gradient_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_gradient_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};

    /* "horton/gbasis/cext.pyx":1260
 *     def compute_grid_gradient_dm(self, dm,
 *                                  np.ndarray[double, ndim=2] points not None,
 *                                  np.ndarray[double, ndim=2] output=None):             # <<<<<<<<<<<<<<
 *         """Compute the electron density gradient on a grid for a given density matrix.
 * 
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gradient_dm", 0, 2, 3, 1); __PYX_ERR(0, 1258, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_gradient_dm") < 0)) __PYX_ERR(0, 1258, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_output = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_gradient_dm", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1258, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gradient_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1259, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1260, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_36compute_grid_gradient_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1258
 *         return output
 * 
 *     def compute_grid_gradient_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                  np.ndarray[double, ndim=2] points not None,
 *                                  np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_36compute_grid_gradient_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_gradient_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1281
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 3), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGradientFn(self.max_shell_type), output)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "horton/gbasis/cext.pyx":1282
 *         """
 *         if output is None:
 *             output = np.zeros((points.shape[0], 3), float)             # <<<<<<<<<<<<<<
 *         self._compute_grid1_dm(dm, points, GB1DMGridGradientFn(self.max_shell_type), output)
 *         return output
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_points->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_3);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_6);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1282, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1282, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1282, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1281
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 3), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGradientFn(self.max_shell_type), output)
 */
  }

  /* "horton/gbasis/cext.pyx":1283
 *         if output is None:
 *             output = np.zeros((points.shape[0], 3), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGradientFn(self.max_shell_type), output)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_dm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGradientFn), __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dm);
    __Pyx_GIVEREF(__pyx_v_dm);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_dm);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, ((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_7, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_7, ((PyObject *)__pyx_v_output));
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":1284
 *             output = np.zeros((points.shape[0], 3), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGradientFn(self.max_shell_type), output)
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_gga_dm(self, dm,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1258
 *         return output
 * 
 *     def compute_grid_gradient_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                  np.ndarray[double, ndim=2] points not None,
 *                                  np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gradient_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1286
 *         return output
 * 
 *     def compute_grid_gga_dm(self, dm,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=2] points not None,
 *                             np.ndarray[double, ndim=2] output=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_39compute_grid_gga_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_38compute_grid_gga_dm[] = "GOBasis.compute_grid_gga_dm(self, dm, ndarray points, ndarray output=None)\nCompute the electron density and gradient on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint, 4), dtype=float\n            Output array. When not given, it is allocated and returned. The first column\n            contains the density. The last three columns contain the gradient.\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint, 4), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_39compute_grid_gga_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_gga_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};

    /* "horton/gbasis/cext.pyx":1288
 *     def compute_grid_gga_dm(self, dm,
 *                             np.ndarray[double, ndim=2] points not None,
 *                             np.ndarray[double, ndim=2] output=None):             # <<<<<<<<<<<<<<
 *         """Compute the electron density and gradient on a grid for a given density matrix.
 * 
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gga_dm", 0, 2, 3, 1); __PYX_ERR(0, 1286, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_gga_dm") < 0)) __PYX_ERR(0, 1286, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_output = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_gga_dm", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1286, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gga_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1287, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1288, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_38compute_grid_gga_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1286
 *         return output
 * 
 *     def compute_grid_gga_dm(self, dm,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=2] points not None,
 *                             np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_38compute_grid_gga_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_gga_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1286, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1286, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1310
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 4), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGGAFn(self.max_shell_type), output)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "horton/gbasis/cext.pyx":1311
 *         """
 *         if output is None:
 *             output = np.zeros((points.shape[0], 4), float)             # <<<<<<<<<<<<<<
 *         self._compute_grid1_dm(dm, points, GB1DMGridGGAFn(self.max_shell_type), output)
 *         return output
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_points->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_6);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1311, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1311, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1311, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1310
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 4), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGGAFn(self.max_shell_type), output)
 */
  }

  /* "horton/gbasis/cext.pyx":1312
 *         if output is None:
 *             output = np.zeros((points.shape[0], 4), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGGAFn(self.max_shell_type), output)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_dm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGGAFn), __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dm);
    __Pyx_GIVEREF(__pyx_v_dm);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_dm);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, ((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_7, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_7, ((PyObject *)__pyx_v_output));
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":1313
 *             output = np.zeros((points.shape[0], 4), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridGGAFn(self.max_shell_type), output)
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_kinetic_dm(self, dm,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1286
 *         return output
 * 
 *     def compute_grid_gga_dm(self, dm,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=2] points not None,
 *                             np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gga_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1315
 *         return output
 * 
 *     def compute_grid_kinetic_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_41compute_grid_kinetic_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_40compute_grid_kinetic_dm[] = "GOBasis.compute_grid_kinetic_dm(self, dm, ndarray points, ndarray output=None)\nCompute the kinetic energy density on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint,), dtype=float\n            Output array. When not given, it is allocated and returned.\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint,), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_41compute_grid_kinetic_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_kinetic_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};

    /* "horton/gbasis/cext.pyx":1317
 *     def compute_grid_kinetic_dm(self, dm,
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):             # <<<<<<<<<<<<<<
 *         """Compute the kinetic energy density on a grid for a given density matrix.
 * 
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_kinetic_dm", 0, 2, 3, 1); __PYX_ERR(0, 1315, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_kinetic_dm") < 0)) __PYX_ERR(0, 1315, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_output = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_kinetic_dm", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1315, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_kinetic_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1316, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1317, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_40compute_grid_kinetic_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1315
 *         return output
 * 
 *     def compute_grid_kinetic_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_40compute_grid_kinetic_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_kinetic_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1315, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1315, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1338
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0],), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridKineticFn(self.max_shell_type), output)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "horton/gbasis/cext.pyx":1339
 *         """
 *         if output is None:
 *             output = np.zeros((points.shape[0],), float)             # <<<<<<<<<<<<<<
 *         self._compute_grid1_dm(dm, points, GB1DMGridKineticFn(self.max_shell_type), output)
 *         return output
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_points->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_6);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1339, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1339, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1339, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1338
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0],), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridKineticFn(self.max_shell_type), output)
 */
  }

  /* "horton/gbasis/cext.pyx":1340
 *         if output is None:
 *             output = np.zeros((points.shape[0],), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridKineticFn(self.max_shell_type), output)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_dm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridKineticFn), __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dm);
    __Pyx_GIVEREF(__pyx_v_dm);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_dm);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, ((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_7, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_7, ((PyObject *)__pyx_v_output));
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":1341
 *             output = np.zeros((points.shape[0],), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridKineticFn(self.max_shell_type), output)
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_hessian_dm(self, dm,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1315
 *         return output
 * 
 *     def compute_grid_kinetic_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_kinetic_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1343
 *         return output
 * 
 *     def compute_grid_hessian_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=2] output=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_43compute_grid_hessian_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_42compute_grid_hessian_dm[] = "GOBasis.compute_grid_hessian_dm(self, dm, ndarray points, ndarray output=None)\nCompute the electron density Hessian on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint, 6), dtype=float\n            Output array. When not given, it is allocated and returned. The columns are\n            assigned as follows:\n\n            * 0: element (0, 0) of the Hessian\n            * 1: element (0, 1) of the Hessian\n            * 2: element (0, 2) of the Hessian\n            * 3: element (1, 1) of the Hessian\n            * 4: element (1, 2) of the Hessian\n            * 5: element (2, 2) of the Hessian\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint, 6), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_43compute_grid_hessian_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_hessian_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};

    /* "horton/gbasis/cext.pyx":1345
 *     def compute_grid_hessian_dm(self, dm,
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=2] output=None):             # <<<<<<<<<<<<<<
 *         """Compute the electron density Hessian on a grid for a given density matrix.
 * 
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_hessian_dm", 0, 2, 3, 1); __PYX_ERR(0, 1343, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_hessian_dm") < 0)) __PYX_ERR(0, 1343, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_output = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_hessian_dm", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1343, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_hessian_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1344, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1345, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_42compute_grid_hessian_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1343
 *         return output
 * 
 *     def compute_grid_hessian_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_42compute_grid_hessian_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_hessian_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1343, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1343, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1374
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridHessianFn(self.max_shell_type), output)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "horton/gbasis/cext.pyx":1375
 *         """
 *         if output is None:
 *             output = np.zeros((points.shape[0], 6), float)             # <<<<<<<<<<<<<<
 *         self._compute_grid1_dm(dm, points, GB1DMGridHessianFn(self.max_shell_type), output)
 *         return output
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_points->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_6);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_6);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1375, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1375, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1374
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridHessianFn(self.max_shell_type), output)
 */
  }

  /* "horton/gbasis/cext.pyx":1376
 *         if output is None:
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridHessianFn(self.max_shell_type), output)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_dm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridHessianFn), __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dm);
    __Pyx_GIVEREF(__pyx_v_dm);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_dm);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, ((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_7, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_7, ((PyObject *)__pyx_v_output));
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":1377
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridHessianFn(self.max_shell_type), output)
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_mgga_dm(self, dm,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1343
 *         return output
 * 
 *     def compute_grid_hessian_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_hessian_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1379
 *         return output
 * 
 *     def compute_grid_mgga_dm(self, dm,             # <<<<<<<<<<<<<<
 *                              np.ndarray[double, ndim=2] points not None,
 *                              np.ndarray[double, ndim=2] output=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_45compute_grid_mgga_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_44compute_grid_mgga_dm[] = "GOBasis.compute_grid_mgga_dm(self, dm, ndarray points, ndarray output=None)\nCompute the MGGA quantities for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        This includes the density, the gradient, the Laplacian and the\n        kinetic energy density.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint, 6), dtype=float\n            Output array. When not given, it is allocated and returned. The assignment of\n            the columns is as follows:\n\n            * 0: density\n            * 1: gradient x\n            * 2: gradient y\n            * 3: gradient z\n            * 4: laplacian\n            * 5: kinetic energy density\n\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint, 6), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_45compute_grid_mgga_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_mgga_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};

    /* "horton/gbasis/cext.pyx":1381
 *     def compute_grid_mgga_dm(self, dm,
 *                              np.ndarray[double, ndim=2] points not None,
 *                              np.ndarray[double, ndim=2] output=None):             # <<<<<<<<<<<<<<
 *         """Compute the MGGA quantities for a given density matrix.
 * 
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_mgga_dm", 0, 2, 3, 1); __PYX_ERR(0, 1379, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_mgga_dm") < 0)) __PYX_ERR(0, 1379, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_output = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_mgga_dm", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1379, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_mgga_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1380, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1381, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_44compute_grid_mgga_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1379
 *         return output
 * 
 *     def compute_grid_mgga_dm(self, dm,             # <<<<<<<<<<<<<<
 *                              np.ndarray[double, ndim=2] points not None,
 *                              np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_44compute_grid_mgga_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_mgga_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1379, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1379, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1414
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridMGGAFn(self.max_shell_type), output)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "horton/gbasis/cext.pyx":1415
 *         """
 *         if output is None:
 *             output = np.zeros((points.shape[0], 6), float)             # <<<<<<<<<<<<<<
 *         self._compute_grid1_dm(dm, points, GB1DMGridMGGAFn(self.max_shell_type), output)
 *         return output
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_points->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_int_6);
    __Pyx_GIVEREF(__pyx_int_6);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_6);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1415, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1415, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_6);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1415, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1415, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        }
        __pyx_t_10 = __pyx_t_11 = __pyx_t_12 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1415, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1414
 *             The output array.
 *         """
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridMGGAFn(self.max_shell_type), output)
 */
  }

  /* "horton/gbasis/cext.pyx":1416
 *         if output is None:
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridMGGAFn(self.max_shell_type), output)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_dm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridMGGAFn), __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_v_dm, ((PyObject *)__pyx_v_points), __pyx_t_6, ((PyObject *)__pyx_v_output)};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 4+__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(4+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dm);
    __Pyx_GIVEREF(__pyx_v_dm);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_7, __pyx_v_dm);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_7, ((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_7, __pyx_t_6);
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_7, ((PyObject *)__pyx_v_output));
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":1417
 *             output = np.zeros((points.shape[0], 6), float)
 *         self._compute_grid1_dm(dm, points, GB1DMGridMGGAFn(self.max_shell_type), output)
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_hartree_dm(self, dm,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1379
 *         return output
 * 
 *     def compute_grid_mgga_dm(self, dm,             # <<<<<<<<<<<<<<
 *                              np.ndarray[double, ndim=2] points not None,
 *                              np.ndarray[double, ndim=2] output=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_mgga_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1419
 *         return output
 * 
 *     def compute_grid_hartree_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_47compute_grid_hartree_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_46compute_grid_hartree_dm[] = "GOBasis.compute_grid_hartree_dm(self, dm, ndarray points, ndarray output=None)\nCompute the Hartree potential on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint,), dtype=float\n            Output array. When not given, it is allocated and returned.\n\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint,), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_47compute_grid_hartree_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_hartree_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_points,&__pyx_n_s_output,0};
    PyObject* values[3] = {0,0,0};

    /* "horton/gbasis/cext.pyx":1421
 *     def compute_grid_hartree_dm(self, dm,
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):             # <<<<<<<<<<<<<<
 *         """Compute the Hartree potential on a grid for a given density matrix.
 * 
 */
    values[2] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_hartree_dm", 0, 2, 3, 1); __PYX_ERR(0, 1419, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_hartree_dm") < 0)) __PYX_ERR(0, 1419, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_points = ((PyArrayObject *)values[1]);
    __pyx_v_output = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_hartree_dm", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1419, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_hartree_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1420, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1421, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_46compute_grid_hartree_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_points, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1419
 *         return output
 * 
 *     def compute_grid_hartree_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_46compute_grid_hartree_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output) {
  PyArrayObject *__pyx_v_dmar = 0;
  npy_intp __pyx_v_npoint;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_dmar;
  __Pyx_Buffer __pyx_pybuffer_dmar;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  __Pyx_RefNannySetupContext("compute_grid_hartree_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_dmar.pybuffer.buf = NULL;
  __pyx_pybuffer_dmar.refcount = 0;
  __pyx_pybuffernd_dmar.data = NULL;
  __pyx_pybuffernd_dmar.rcbuffer = &__pyx_pybuffer_dmar;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1444
 *         """
 *         # type checking
 *         cdef np.ndarray[double, ndim=2] dmar = dm._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(dmar)
 *         assert points.flags['C_CONTIGUOUS']
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dm, __pyx_n_s_array_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1444, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_dmar.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_dmar = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_dmar.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1444, __pyx_L1_error)
    } else {__pyx_pybuffernd_dmar.diminfo[0].strides = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_dmar.diminfo[0].shape = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_dmar.diminfo[1].strides = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_dmar.diminfo[1].shape = __pyx_pybuffernd_dmar.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_dmar = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1445
 *         # type checking
 *         cdef np.ndarray[double, ndim=2] dmar = dm._array
 *         self.check_matrix_two_index(dmar)             # <<<<<<<<<<<<<<
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_dmar)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_dmar));
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1446
 *         cdef np.ndarray[double, ndim=2] dmar = dm._array
 *         self.check_matrix_two_index(dmar)
 *         assert points.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_points), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1446, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1446, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1447
 *         self.check_matrix_two_index(dmar)
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]             # <<<<<<<<<<<<<<
 *         assert points.shape[1] == 3
 *         if output is None:
 */
  __pyx_v_npoint = (__pyx_v_points->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1448
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3             # <<<<<<<<<<<<<<
 *         if output is None:
 *             output = np.zeros(npoint, float)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_points->dimensions[1]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1448, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1449
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros(npoint, float)
 *         else:
 */
  __pyx_t_5 = (((PyObject *)__pyx_v_output) == Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "horton/gbasis/cext.pyx":1450
 *         assert points.shape[1] == 3
 *         if output is None:
 *             output = np.zeros(npoint, float)             # <<<<<<<<<<<<<<
 *         else:
 *             assert output.flags['C_CONTIGUOUS']
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t(__pyx_v_npoint); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_1, ((PyObject *)(&PyFloat_Type))};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_1);
      __Pyx_INCREF(((PyObject *)(&PyFloat_Type)));
      __Pyx_GIVEREF(((PyObject *)(&PyFloat_Type)));
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, ((PyObject *)(&PyFloat_Type)));
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1450, __pyx_L1_error)
    __pyx_t_10 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        }
        __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
      }
      __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1450, __pyx_L1_error)
    }
    __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1449
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 *         if output is None:             # <<<<<<<<<<<<<<
 *             output = np.zeros(npoint, float)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "horton/gbasis/cext.pyx":1452
 *             output = np.zeros(npoint, float)
 *         else:
 *             assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *             assert output.shape[0] == npoint
 *         # compute
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1452, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_6)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1452, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1453
 *         else:
 *             assert output.flags['C_CONTIGUOUS']
 *             assert output.shape[0] == npoint             # <<<<<<<<<<<<<<
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid2_dm(
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(((__pyx_v_output->dimensions[0]) == __pyx_v_npoint) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1453, __pyx_L1_error)
      }
    }
    #endif
  }
  __pyx_L3:;

  /* "horton/gbasis/cext.pyx":1456
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid2_dm(
 *             &dmar[0, 0], npoint, &points[0, 0],             # <<<<<<<<<<<<<<
 *             &output[0])
 *         return output
 */
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_dmar.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_dmar.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_dmar.diminfo[1].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_dmar.diminfo[1].shape)) __pyx_t_8 = 1;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1456, __pyx_L1_error)
  }
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_points.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_points.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_17 < 0) {
    __pyx_t_17 += __pyx_pybuffernd_points.diminfo[1].shape;
    if (unlikely(__pyx_t_17 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_points.diminfo[1].shape)) __pyx_t_8 = 1;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1456, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1457
 *         (<gbasis.GOBasis*>self._this).compute_grid2_dm(
 *             &dmar[0, 0], npoint, &points[0, 0],
 *             &output[0])             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __pyx_t_18 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_18 < 0) {
    __pyx_t_18 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_18 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1457, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1455
 *             assert output.shape[0] == npoint
 *         # compute
 *         (<gbasis.GOBasis*>self._this).compute_grid2_dm(             # <<<<<<<<<<<<<<
 *             &dmar[0, 0], npoint, &points[0, 0],
 *             &output[0])
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_grid2_dm((&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_dmar.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_dmar.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_dmar.diminfo[1].strides))), __pyx_v_npoint, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_points.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_points.diminfo[0].strides, __pyx_t_17, __pyx_pybuffernd_points.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_output.diminfo[0].strides))));

  /* "horton/gbasis/cext.pyx":1458
 *             &dmar[0, 0], npoint, &points[0, 0],
 *             &output[0])
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_esp_dm(self, dm,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1419
 *         return output
 * 
 *     def compute_grid_hartree_dm(self, dm,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=2] points not None,
 *                                 np.ndarray[double, ndim=1] output=None):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dmar.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_hartree_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_dmar.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_dmar);
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1460
 *         return output
 * 
 *     def compute_grid_esp_dm(self, dm,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=2] coordinates not None,
 *                             np.ndarray[double, ndim=1] charges not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_49compute_grid_esp_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_48compute_grid_esp_dm[] = "GOBasis.compute_grid_esp_dm(self, dm, ndarray coordinates, ndarray charges, ndarray points, ndarray output=None)\nCompute the electrostatic potential on a grid for a given density matrix.\n\n        **Warning:** the results are added to the output array! This may be useful to\n        combine results from different spin components.\n\n        Parameters\n        ----------\n\n        dm : DenseTwoIndex\n            Density matrix, assumed to be symmetric.\n        coordinates : np.ndarray, shape=(natom, 3), dtype=float\n            Cartesian coordinates of the atoms.\n        charges : np.ndarray, shape=(natom,), dtype=float\n            Atomic charges.\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        output : np.ndarray, shape=(npoint,), dtype=float\n            Output array. When not given, it is allocated and returned.\n\n\n        Returns\n        -------\n        output : np.ndarray, shape=(npoint,), dtype=float\n            The output array.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_49compute_grid_esp_dm(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dm = 0;
  PyArrayObject *__pyx_v_coordinates = 0;
  PyArrayObject *__pyx_v_charges = 0;
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_esp_dm (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dm,&__pyx_n_s_coordinates,&__pyx_n_s_charges,&__pyx_n_s_points,&__pyx_n_s_output,0};
    PyObject* values[5] = {0,0,0,0,0};

    /* "horton/gbasis/cext.pyx":1464
 *                             np.ndarray[double, ndim=1] charges not None,
 *                             np.ndarray[double, ndim=2] points not None,
 *                             np.ndarray[double, ndim=1] output=None):             # <<<<<<<<<<<<<<
 *         """Compute the electrostatic potential on a grid for a given density matrix.
 * 
 */
    values[4] = (PyObject *)((PyArrayObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dm)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coordinates)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_esp_dm", 0, 4, 5, 1); __PYX_ERR(0, 1460, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_esp_dm", 0, 4, 5, 2); __PYX_ERR(0, 1460, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_esp_dm", 0, 4, 5, 3); __PYX_ERR(0, 1460, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_esp_dm") < 0)) __PYX_ERR(0, 1460, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dm = values[0];
    __pyx_v_coordinates = ((PyArrayObject *)values[1]);
    __pyx_v_charges = ((PyArrayObject *)values[2]);
    __pyx_v_points = ((PyArrayObject *)values[3]);
    __pyx_v_output = ((PyArrayObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_esp_dm", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1460, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_esp_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coordinates), __pyx_ptype_5numpy_ndarray, 0, "coordinates", 0))) __PYX_ERR(0, 1461, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 0, "charges", 0))) __PYX_ERR(0, 1462, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1463, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 1, "output", 0))) __PYX_ERR(0, 1464, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_48compute_grid_esp_dm(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_dm, __pyx_v_coordinates, __pyx_v_charges, __pyx_v_points, __pyx_v_output);

  /* "horton/gbasis/cext.pyx":1460
 *         return output
 * 
 *     def compute_grid_esp_dm(self, dm,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=2] coordinates not None,
 *                             np.ndarray[double, ndim=1] charges not None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_48compute_grid_esp_dm(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyObject *__pyx_v_dm, PyArrayObject *__pyx_v_coordinates, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_output) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coordinates;
  __Pyx_Buffer __pyx_pybuffer_coordinates;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_esp_dm", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_output);
  __pyx_pybuffer_coordinates.pybuffer.buf = NULL;
  __pyx_pybuffer_coordinates.refcount = 0;
  __pyx_pybuffernd_coordinates.data = NULL;
  __pyx_pybuffernd_coordinates.rcbuffer = &__pyx_pybuffer_coordinates;
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer, (PyObject*)__pyx_v_coordinates, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1460, __pyx_L1_error)
  }
  __pyx_pybuffernd_coordinates.diminfo[0].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coordinates.diminfo[0].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coordinates.diminfo[1].strides = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coordinates.diminfo[1].shape = __pyx_pybuffernd_coordinates.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1460, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1460, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1460, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1490
 *             The output array.
 *         """
 *         output = self.compute_grid_hartree_dm(dm, points, output)             # <<<<<<<<<<<<<<
 *         output *= -1
 *         compute_grid_nucpot(coordinates, charges, points, output)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid_hartree_dm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_dm, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_output)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_dm, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_output)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_dm);
    __Pyx_GIVEREF(__pyx_v_dm);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_dm);
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, ((PyObject *)__pyx_v_output));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1490, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_4 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1490, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1491
 *         """
 *         output = self.compute_grid_hartree_dm(dm, points, output)
 *         output *= -1             # <<<<<<<<<<<<<<
 *         compute_grid_nucpot(coordinates, charges, points, output)
 *         return output
 */
  __pyx_t_1 = PyNumber_InPlaceMultiply(((PyObject *)__pyx_v_output), __pyx_int_neg_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1491, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_4 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_7);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __pyx_t_9 = __pyx_t_8 = __pyx_t_7 = 0;
    }
    __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1491, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_output, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1492
 *         output = self.compute_grid_hartree_dm(dm, points, output)
 *         output *= -1
 *         compute_grid_nucpot(coordinates, charges, points, output)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute_grid_nucpot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_coordinates), ((PyObject *)__pyx_v_charges), ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_output)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_5, ((PyObject *)__pyx_v_coordinates), ((PyObject *)__pyx_v_charges), ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_output)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_coordinates));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_coordinates));
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_4, ((PyObject *)__pyx_v_coordinates));
    __Pyx_INCREF(((PyObject *)__pyx_v_charges));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_charges));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_4, ((PyObject *)__pyx_v_charges));
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_3, 2+__pyx_t_4, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_output));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_output));
    PyTuple_SET_ITEM(__pyx_t_3, 3+__pyx_t_4, ((PyObject *)__pyx_v_output));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1492, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1493
 *         output *= -1
 *         compute_grid_nucpot(coordinates, charges, points, output)
 *         return output             # <<<<<<<<<<<<<<
 * 
 *     def _compute_grid1_fock(self, np.ndarray[double, ndim=2] points not None,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_output));
  __pyx_r = ((PyObject *)__pyx_v_output);
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1460
 *         return output
 * 
 *     def compute_grid_esp_dm(self, dm,             # <<<<<<<<<<<<<<
 *                             np.ndarray[double, ndim=2] coordinates not None,
 *                             np.ndarray[double, ndim=1] charges not None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_esp_dm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coordinates.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1495
 *         return output
 * 
 *     def _compute_grid1_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                            np.ndarray[double, ndim=1] weights not None,
 *                            np.ndarray pots not None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_51_compute_grid1_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_50_compute_grid1_fock[] = "GOBasis._compute_grid1_fock(self, ndarray points, ndarray weights, ndarray pots, GB1DMGridFn grid_fn, fock)\nCompute a Fock operator from a some sort of potential.\n\n        **Warning:** the results are added to the Fock operator!\n\n        Parameters\n        ----------\n\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        weights : np.ndarray, shape=(npoint,), dtype=float\n            Integration weights.\n        pots : np.ndarray, shape=(npoint, n)\n            Derivative of the energy toward the density-related quantities\n            at all grid points. The number of columns depends on grid_fn.\n        grid_fn : GB1DMGridFn\n            Implements the function to be evaluated on the grid.\n        fock : DenseTwoIndex\n            Output dense two-index object.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_51_compute_grid1_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_weights = 0;
  PyArrayObject *__pyx_v_pots = 0;
  struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn = 0;
  PyObject *__pyx_v_fock = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_compute_grid1_fock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_weights,&__pyx_n_s_pots,&__pyx_n_s_grid_fn,&__pyx_n_s_fock,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compute_grid1_fock", 1, 5, 5, 1); __PYX_ERR(0, 1495, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compute_grid1_fock", 1, 5, 5, 2); __PYX_ERR(0, 1495, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_grid_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compute_grid1_fock", 1, 5, 5, 3); __PYX_ERR(0, 1495, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_compute_grid1_fock", 1, 5, 5, 4); __PYX_ERR(0, 1495, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_compute_grid1_fock") < 0)) __PYX_ERR(0, 1495, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
    __pyx_v_weights = ((PyArrayObject *)values[1]);
    __pyx_v_pots = ((PyArrayObject *)values[2]);
    __pyx_v_grid_fn = ((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)values[3]);
    __pyx_v_fock = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_compute_grid1_fock", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1495, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis._compute_grid1_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1495, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 0, "weights", 0))) __PYX_ERR(0, 1496, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pots), __pyx_ptype_5numpy_ndarray, 0, "pots", 0))) __PYX_ERR(0, 1497, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_grid_fn), __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn, 0, "grid_fn", 0))) __PYX_ERR(0, 1498, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_50_compute_grid1_fock(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_points, __pyx_v_weights, __pyx_v_pots, __pyx_v_grid_fn, __pyx_v_fock);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_50_compute_grid1_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_grid_fn, PyObject *__pyx_v_fock) {
  PyArrayObject *__pyx_v_output = 0;
  npy_intp __pyx_v_npoint;
  PyObject *__pyx_v_pot_stride = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  long __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("_compute_grid1_fock", 0);
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1495, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1495, __pyx_L1_error)
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1518
 *             Output dense two-index object.
 *         """
 *         cdef np.ndarray[double, ndim=2] output = fock._array             # <<<<<<<<<<<<<<
 *         self.check_matrix_two_index(output)
 *         assert points.flags['C_CONTIGUOUS']
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fock, __pyx_n_s_array_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1518, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_output = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_output.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1518, __pyx_L1_error)
    } else {__pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_2 = 0;
  __pyx_v_output = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1519
 *         """
 *         cdef np.ndarray[double, ndim=2] output = fock._array
 *         self.check_matrix_two_index(output)             # <<<<<<<<<<<<<<
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_check_matrix_two_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, ((PyObject *)__pyx_v_output)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_output));
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1520
 *         cdef np.ndarray[double, ndim=2] output = fock._array
 *         self.check_matrix_two_index(output)
 *         assert points.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_points), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1520, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1520, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1521
 *         self.check_matrix_two_index(output)
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]             # <<<<<<<<<<<<<<
 *         assert points.shape[1] == 3
 *         assert weights.flags['C_CONTIGUOUS']
 */
  __pyx_v_npoint = (__pyx_v_points->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1522
 *         assert points.flags['C_CONTIGUOUS']
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3             # <<<<<<<<<<<<<<
 *         assert weights.flags['C_CONTIGUOUS']
 *         assert npoint == weights.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_points->dimensions[1]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1522, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1523
 *         npoint = points.shape[0]
 *         assert points.shape[1] == 3
 *         assert weights.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert npoint == weights.shape[0]
 *         assert pots.strides[0] % 8 == 0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_weights), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1523, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1523, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1524
 *         assert points.shape[1] == 3
 *         assert weights.flags['C_CONTIGUOUS']
 *         assert npoint == weights.shape[0]             # <<<<<<<<<<<<<<
 *         assert pots.strides[0] % 8 == 0
 *         pot_stride = pots.strides[0]/8
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_npoint == (__pyx_v_weights->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1524, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1525
 *         assert weights.flags['C_CONTIGUOUS']
 *         assert npoint == weights.shape[0]
 *         assert pots.strides[0] % 8 == 0             # <<<<<<<<<<<<<<
 *         pot_stride = pots.strides[0]/8
 *         assert npoint == pots.shape[0]
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__Pyx_mod_long((__pyx_v_pots->strides[0]), 8) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1525, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1526
 *         assert npoint == weights.shape[0]
 *         assert pots.strides[0] % 8 == 0
 *         pot_stride = pots.strides[0]/8             # <<<<<<<<<<<<<<
 *         assert npoint == pots.shape[0]
 *         if grid_fn.dim_output == 1:
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__Pyx_div_long((__pyx_v_pots->strides[0]), 8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pot_stride = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1527
 *         assert pots.strides[0] % 8 == 0
 *         pot_stride = pots.strides[0]/8
 *         assert npoint == pots.shape[0]             # <<<<<<<<<<<<<<
 *         if grid_fn.dim_output == 1:
 *             assert pots.ndim == 1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_npoint == (__pyx_v_pots->dimensions[0])) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1527, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1528
 *         pot_stride = pots.strides[0]/8
 *         assert npoint == pots.shape[0]
 *         if grid_fn.dim_output == 1:             # <<<<<<<<<<<<<<
 *             assert pots.ndim == 1
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_grid_fn), __pyx_n_s_dim_output); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "horton/gbasis/cext.pyx":1529
 *         assert npoint == pots.shape[0]
 *         if grid_fn.dim_output == 1:
 *             assert pots.ndim == 1             # <<<<<<<<<<<<<<
 *         else:
 *             assert pots.ndim == 2
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_pots->nd == 1) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1529, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1528
 *         pot_stride = pots.strides[0]/8
 *         assert npoint == pots.shape[0]
 *         if grid_fn.dim_output == 1:             # <<<<<<<<<<<<<<
 *             assert pots.ndim == 1
 *         else:
 */
    goto __pyx_L3;
  }

  /* "horton/gbasis/cext.pyx":1531
 *             assert pots.ndim == 1
 *         else:
 *             assert pots.ndim == 2             # <<<<<<<<<<<<<<
 *             assert pots.shape[1] == grid_fn.dim_output
 *             assert pots.strides[1] % 8 == 0
 */
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__pyx_v_pots->nd == 2) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1531, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1532
 *         else:
 *             assert pots.ndim == 2
 *             assert pots.shape[1] == grid_fn.dim_output             # <<<<<<<<<<<<<<
 *             assert pots.strides[1] % 8 == 0
 *             pot_stride *= (pots.strides[1] / 8)
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_pots->dimensions[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_grid_fn), __pyx_n_s_dim_output); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 1532, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1532, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1533
 *             assert pots.ndim == 2
 *             assert pots.shape[1] == grid_fn.dim_output
 *             assert pots.strides[1] % 8 == 0             # <<<<<<<<<<<<<<
 *             pot_stride *= (pots.strides[1] / 8)
 *         (<gbasis.GOBasis*>self._this).compute_grid1_fock(
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!((__Pyx_mod_long((__pyx_v_pots->strides[1]), 8) == 0) != 0))) {
        PyErr_SetNone(PyExc_AssertionError);
        __PYX_ERR(0, 1533, __pyx_L1_error)
      }
    }
    #endif

    /* "horton/gbasis/cext.pyx":1534
 *             assert pots.shape[1] == grid_fn.dim_output
 *             assert pots.strides[1] % 8 == 0
 *             pot_stride *= (pots.strides[1] / 8)             # <<<<<<<<<<<<<<
 *         (<gbasis.GOBasis*>self._this).compute_grid1_fock(
 *             npoint, &points[0, 0], &weights[0],
 */
    __pyx_t_4 = __Pyx_PyInt_From_long(__Pyx_div_long((__pyx_v_pots->strides[1]), 8)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyNumber_InPlaceMultiply(__pyx_v_pot_stride, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_pot_stride, __pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "horton/gbasis/cext.pyx":1536
 *             pot_stride *= (pots.strides[1] / 8)
 *         (<gbasis.GOBasis*>self._this).compute_grid1_fock(
 *             npoint, &points[0, 0], &weights[0],             # <<<<<<<<<<<<<<
 *             pot_stride, <double*>np.PyArray_DATA(pots),
 *             grid_fn._this, &output[0, 0])
 */
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_points.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_points.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_points.diminfo[1].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_points.diminfo[1].shape)) __pyx_t_8 = 1;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1536, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_weights.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1536, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1537
 *         (<gbasis.GOBasis*>self._this).compute_grid1_fock(
 *             npoint, &points[0, 0], &weights[0],
 *             pot_stride, <double*>np.PyArray_DATA(pots),             # <<<<<<<<<<<<<<
 *             grid_fn._this, &output[0, 0])
 * 
 */
  __pyx_t_10 = __Pyx_PyInt_As_long(__pyx_v_pot_stride); if (unlikely((__pyx_t_10 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1537, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":1538
 *             npoint, &points[0, 0], &weights[0],
 *             pot_stride, <double*>np.PyArray_DATA(pots),
 *             grid_fn._this, &output[0, 0])             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_density_fock(self, np.ndarray[double, ndim=2] points not None,
 */
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_8 = 0;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_output.diminfo[1].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_8 = 1;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_output.diminfo[1].shape)) __pyx_t_8 = 1;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1538, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1535
 *             assert pots.strides[1] % 8 == 0
 *             pot_stride *= (pots.strides[1] / 8)
 *         (<gbasis.GOBasis*>self._this).compute_grid1_fock(             # <<<<<<<<<<<<<<
 *             npoint, &points[0, 0], &weights[0],
 *             pot_stride, <double*>np.PyArray_DATA(pots),
 */
  ((GOBasis *)__pyx_v_self->__pyx_base._this)->compute_grid1_fock(__pyx_v_npoint, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_points.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_points.diminfo[0].strides, __pyx_t_7, __pyx_pybuffernd_points.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_weights.diminfo[0].strides))), __pyx_t_10, ((double *)PyArray_DATA(__pyx_v_pots)), __pyx_v_grid_fn->_this, (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_output.diminfo[1].strides))));

  /* "horton/gbasis/cext.pyx":1495
 *         return output
 * 
 *     def _compute_grid1_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                            np.ndarray[double, ndim=1] weights not None,
 *                            np.ndarray pots not None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis._compute_grid1_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XDECREF(__pyx_v_pot_stride);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1540
 *             grid_fn._this, &output[0, 0])
 * 
 *     def compute_grid_density_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=1] weights not None,
 *                                   np.ndarray[double, ndim=1] pots not None, fock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_53compute_grid_density_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_52compute_grid_density_fock[] = "GOBasis.compute_grid_density_fock(self, ndarray points, ndarray weights, ndarray pots, fock)\nCompute a Fock operator from a density potential.\n\n        **Warning:** the results are added to the Fock operator!\n\n        Parameters\n        ----------\n\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        weights : np.ndarray, shape=(npoint,), dtype=float\n            Integration weights.\n        pots : np.ndarray, shape=(npoint,), dtype=float\n            Derivative of the energy toward the density at all grid points.\n        fock : DenseTwoIndex\n            Output dense two-index object.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_53compute_grid_density_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_weights = 0;
  PyArrayObject *__pyx_v_pots = 0;
  PyObject *__pyx_v_fock = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_density_fock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_weights,&__pyx_n_s_pots,&__pyx_n_s_fock,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_density_fock", 1, 4, 4, 1); __PYX_ERR(0, 1540, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_density_fock", 1, 4, 4, 2); __PYX_ERR(0, 1540, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_density_fock", 1, 4, 4, 3); __PYX_ERR(0, 1540, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_density_fock") < 0)) __PYX_ERR(0, 1540, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
    __pyx_v_weights = ((PyArrayObject *)values[1]);
    __pyx_v_pots = ((PyArrayObject *)values[2]);
    __pyx_v_fock = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_density_fock", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1540, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_density_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1540, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 0, "weights", 0))) __PYX_ERR(0, 1541, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pots), __pyx_ptype_5numpy_ndarray, 0, "pots", 0))) __PYX_ERR(0, 1542, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_52compute_grid_density_fock(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_points, __pyx_v_weights, __pyx_v_pots, __pyx_v_fock);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_52compute_grid_density_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pots;
  __Pyx_Buffer __pyx_pybuffer_pots;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_density_fock", 0);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  __pyx_pybuffer_pots.pybuffer.buf = NULL;
  __pyx_pybuffer_pots.refcount = 0;
  __pyx_pybuffernd_pots.data = NULL;
  __pyx_pybuffernd_pots.rcbuffer = &__pyx_pybuffer_pots;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1540, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1540, __pyx_L1_error)
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pots.rcbuffer->pybuffer, (PyObject*)__pyx_v_pots, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1540, __pyx_L1_error)
  }
  __pyx_pybuffernd_pots.diminfo[0].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pots.diminfo[0].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1559
 *             Output dense two-index object.
 *         """
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridDensityFn(self.max_shell_type), fock)             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_gradient_fock(self, np.ndarray[double, ndim=2] points not None,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_fock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridDensityFn), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_weights));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_weights));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_weights));
    __Pyx_INCREF(((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_pots));
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_fock);
    __Pyx_GIVEREF(__pyx_v_fock);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fock);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1540
 *             grid_fn._this, &output[0, 0])
 * 
 *     def compute_grid_density_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=1] weights not None,
 *                                   np.ndarray[double, ndim=1] pots not None, fock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_density_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1561
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridDensityFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_gradient_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=1] weights not None,
 *                                    np.ndarray[double, ndim=2] pots not None, fock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_55compute_grid_gradient_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_54compute_grid_gradient_fock[] = "GOBasis.compute_grid_gradient_fock(self, ndarray points, ndarray weights, ndarray pots, fock)\nCompute a Fock operator from a density gradient potential.\n\n        **Warning:** the results are added to the Fock operator!\n\n        Parameters\n        ----------\n\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        weights : np.ndarray, shape=(npoint,), dtype=float\n            Integration weights.\n        pots : np.ndarray, shape=(npoint, 3), dtype=float\n            Derivative of the energy toward the density gradient components at all grid\n            points.\n        fock : DenseTwoIndex\n            Output dense two-index object.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_55compute_grid_gradient_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_weights = 0;
  PyArrayObject *__pyx_v_pots = 0;
  PyObject *__pyx_v_fock = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_gradient_fock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_weights,&__pyx_n_s_pots,&__pyx_n_s_fock,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gradient_fock", 1, 4, 4, 1); __PYX_ERR(0, 1561, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gradient_fock", 1, 4, 4, 2); __PYX_ERR(0, 1561, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gradient_fock", 1, 4, 4, 3); __PYX_ERR(0, 1561, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_gradient_fock") < 0)) __PYX_ERR(0, 1561, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
    __pyx_v_weights = ((PyArrayObject *)values[1]);
    __pyx_v_pots = ((PyArrayObject *)values[2]);
    __pyx_v_fock = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_gradient_fock", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1561, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gradient_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1561, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 0, "weights", 0))) __PYX_ERR(0, 1562, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pots), __pyx_ptype_5numpy_ndarray, 0, "pots", 0))) __PYX_ERR(0, 1563, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_54compute_grid_gradient_fock(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_points, __pyx_v_weights, __pyx_v_pots, __pyx_v_fock);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_54compute_grid_gradient_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pots;
  __Pyx_Buffer __pyx_pybuffer_pots;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_gradient_fock", 0);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  __pyx_pybuffer_pots.pybuffer.buf = NULL;
  __pyx_pybuffer_pots.refcount = 0;
  __pyx_pybuffernd_pots.data = NULL;
  __pyx_pybuffernd_pots.rcbuffer = &__pyx_pybuffer_pots;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1561, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1561, __pyx_L1_error)
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pots.rcbuffer->pybuffer, (PyObject*)__pyx_v_pots, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1561, __pyx_L1_error)
  }
  __pyx_pybuffernd_pots.diminfo[0].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pots.diminfo[0].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pots.diminfo[1].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pots.diminfo[1].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1581
 *             Output dense two-index object.
 *         """
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridGradientFn(self.max_shell_type), fock)             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_gga_fock(self, np.ndarray[double, ndim=2] points not None,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_fock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGradientFn), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_weights));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_weights));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_weights));
    __Pyx_INCREF(((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_pots));
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_fock);
    __Pyx_GIVEREF(__pyx_v_fock);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fock);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1561
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridDensityFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_gradient_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                    np.ndarray[double, ndim=1] weights not None,
 *                                    np.ndarray[double, ndim=2] pots not None, fock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gradient_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1583
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridGradientFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_gga_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                     np.ndarray[double, ndim=1] weights not None,
 *                                     np.ndarray[double, ndim=2] pots not None, fock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_57compute_grid_gga_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_56compute_grid_gga_fock[] = "GOBasis.compute_grid_gga_fock(self, ndarray points, ndarray weights, ndarray pots, fock)\nCompute a Fock operator from GGA potential data.\n\n        **Warning:** the results are added to the Fock operator!\n\n        Parameters\n        ----------\n\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        weights : np.ndarray, shape=(npoint,), dtype=float\n            Integration weights.\n        pots : np.ndarray, shape=(npoint, 4), dtype=float\n            Derivative of the energy toward GGA ingredients (density and gradient) at all\n            grid points.\n        fock : DenseTwoIndex\n            Output dense two-index object.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_57compute_grid_gga_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_weights = 0;
  PyArrayObject *__pyx_v_pots = 0;
  PyObject *__pyx_v_fock = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_gga_fock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_weights,&__pyx_n_s_pots,&__pyx_n_s_fock,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gga_fock", 1, 4, 4, 1); __PYX_ERR(0, 1583, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gga_fock", 1, 4, 4, 2); __PYX_ERR(0, 1583, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_gga_fock", 1, 4, 4, 3); __PYX_ERR(0, 1583, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_gga_fock") < 0)) __PYX_ERR(0, 1583, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
    __pyx_v_weights = ((PyArrayObject *)values[1]);
    __pyx_v_pots = ((PyArrayObject *)values[2]);
    __pyx_v_fock = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_gga_fock", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1583, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gga_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1583, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 0, "weights", 0))) __PYX_ERR(0, 1584, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pots), __pyx_ptype_5numpy_ndarray, 0, "pots", 0))) __PYX_ERR(0, 1585, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_56compute_grid_gga_fock(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_points, __pyx_v_weights, __pyx_v_pots, __pyx_v_fock);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_56compute_grid_gga_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pots;
  __Pyx_Buffer __pyx_pybuffer_pots;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_gga_fock", 0);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  __pyx_pybuffer_pots.pybuffer.buf = NULL;
  __pyx_pybuffer_pots.refcount = 0;
  __pyx_pybuffernd_pots.data = NULL;
  __pyx_pybuffernd_pots.rcbuffer = &__pyx_pybuffer_pots;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1583, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1583, __pyx_L1_error)
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pots.rcbuffer->pybuffer, (PyObject*)__pyx_v_pots, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1583, __pyx_L1_error)
  }
  __pyx_pybuffernd_pots.diminfo[0].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pots.diminfo[0].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pots.diminfo[1].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pots.diminfo[1].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1604
 *         """
 *         # To be replaced by something more efficient
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridGGAFn(self.max_shell_type), fock)             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_kinetic_fock(self, np.ndarray[double, ndim=2] points not None,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_fock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGGAFn), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_weights));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_weights));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_weights));
    __Pyx_INCREF(((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_pots));
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_fock);
    __Pyx_GIVEREF(__pyx_v_fock);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fock);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1583
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridGradientFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_gga_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                     np.ndarray[double, ndim=1] weights not None,
 *                                     np.ndarray[double, ndim=2] pots not None, fock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_gga_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1606
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridGGAFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_kinetic_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=1] weights not None,
 *                                   np.ndarray[double, ndim=1] pots not None, fock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_59compute_grid_kinetic_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_58compute_grid_kinetic_fock[] = "GOBasis.compute_grid_kinetic_fock(self, ndarray points, ndarray weights, ndarray pots, fock)\nCompute a Fock operator from a kientic-energy-density potential.\n\n        **Warning:** the results are added to the Fock operator!\n\n        Parameters\n        ----------\n\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        weights : np.ndarray, shape=(npoint,), dtype=float\n            Integration weights.\n        pots : np.ndarray, shape=(npoint,), dtype=float\n            Derivative of the energy toward the kinetic energy density at all grid points.\n        fock : DenseTwoIndex\n            Output dense two-index object.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_59compute_grid_kinetic_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_weights = 0;
  PyArrayObject *__pyx_v_pots = 0;
  PyObject *__pyx_v_fock = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_kinetic_fock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_weights,&__pyx_n_s_pots,&__pyx_n_s_fock,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_kinetic_fock", 1, 4, 4, 1); __PYX_ERR(0, 1606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_kinetic_fock", 1, 4, 4, 2); __PYX_ERR(0, 1606, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_kinetic_fock", 1, 4, 4, 3); __PYX_ERR(0, 1606, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_kinetic_fock") < 0)) __PYX_ERR(0, 1606, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
    __pyx_v_weights = ((PyArrayObject *)values[1]);
    __pyx_v_pots = ((PyArrayObject *)values[2]);
    __pyx_v_fock = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_kinetic_fock", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1606, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_kinetic_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1606, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 0, "weights", 0))) __PYX_ERR(0, 1607, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pots), __pyx_ptype_5numpy_ndarray, 0, "pots", 0))) __PYX_ERR(0, 1608, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_58compute_grid_kinetic_fock(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_points, __pyx_v_weights, __pyx_v_pots, __pyx_v_fock);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_58compute_grid_kinetic_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pots;
  __Pyx_Buffer __pyx_pybuffer_pots;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_kinetic_fock", 0);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  __pyx_pybuffer_pots.pybuffer.buf = NULL;
  __pyx_pybuffer_pots.refcount = 0;
  __pyx_pybuffernd_pots.data = NULL;
  __pyx_pybuffernd_pots.rcbuffer = &__pyx_pybuffer_pots;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1606, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1606, __pyx_L1_error)
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pots.rcbuffer->pybuffer, (PyObject*)__pyx_v_pots, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1606, __pyx_L1_error)
  }
  __pyx_pybuffernd_pots.diminfo[0].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pots.diminfo[0].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1625
 *             Output dense two-index object.
 *         """
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridKineticFn(self.max_shell_type), fock)             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_hessian_fock(self, np.ndarray[double, ndim=2] points not None,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_fock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridKineticFn), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_weights));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_weights));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_weights));
    __Pyx_INCREF(((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_pots));
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_fock);
    __Pyx_GIVEREF(__pyx_v_fock);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fock);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1606
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridGGAFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_kinetic_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=1] weights not None,
 *                                   np.ndarray[double, ndim=1] pots not None, fock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_kinetic_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1627
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridKineticFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_hessian_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=1] weights not None,
 *                                   np.ndarray[double, ndim=2] pots not None, fock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_61compute_grid_hessian_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_60compute_grid_hessian_fock[] = "GOBasis.compute_grid_hessian_fock(self, ndarray points, ndarray weights, ndarray pots, fock)\nCompute a Fock operator from a density hessian potential.\n\n        **Warning:** the results are added to the Fock operator!\n\n        Parameters\n        ----------\n\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        weights : np.ndarray, shape=(npoint,), dtype=float\n            Integration weights.\n        pots : np.ndarray, shape=(npoint, 6), dtype=float\n            Derivative of energy toward components of the Hessian at all grid points. The\n            columns are assigned as follows:\n\n            * 0: element (0, 0) of the Hessian\n            * 1: element (0, 1) of the Hessian\n            * 2: element (0, 2) of the Hessian\n            * 3: element (1, 1) of the Hessian\n            * 4: element (1, 2) of the Hessian\n            * 5: element (2, 2) of the Hessian\n        fock : DenseTwoIndex\n            Output dense two-index object.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_61compute_grid_hessian_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_weights = 0;
  PyArrayObject *__pyx_v_pots = 0;
  PyObject *__pyx_v_fock = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_hessian_fock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_weights,&__pyx_n_s_pots,&__pyx_n_s_fock,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_hessian_fock", 1, 4, 4, 1); __PYX_ERR(0, 1627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_hessian_fock", 1, 4, 4, 2); __PYX_ERR(0, 1627, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_hessian_fock", 1, 4, 4, 3); __PYX_ERR(0, 1627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_hessian_fock") < 0)) __PYX_ERR(0, 1627, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
    __pyx_v_weights = ((PyArrayObject *)values[1]);
    __pyx_v_pots = ((PyArrayObject *)values[2]);
    __pyx_v_fock = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_hessian_fock", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_hessian_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1627, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 0, "weights", 0))) __PYX_ERR(0, 1628, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pots), __pyx_ptype_5numpy_ndarray, 0, "pots", 0))) __PYX_ERR(0, 1629, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_60compute_grid_hessian_fock(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_points, __pyx_v_weights, __pyx_v_pots, __pyx_v_fock);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_60compute_grid_hessian_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pots;
  __Pyx_Buffer __pyx_pybuffer_pots;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_hessian_fock", 0);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  __pyx_pybuffer_pots.pybuffer.buf = NULL;
  __pyx_pybuffer_pots.refcount = 0;
  __pyx_pybuffernd_pots.data = NULL;
  __pyx_pybuffernd_pots.rcbuffer = &__pyx_pybuffer_pots;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1627, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1627, __pyx_L1_error)
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pots.rcbuffer->pybuffer, (PyObject*)__pyx_v_pots, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1627, __pyx_L1_error)
  }
  __pyx_pybuffernd_pots.diminfo[0].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pots.diminfo[0].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pots.diminfo[1].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pots.diminfo[1].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1654
 *             Output dense two-index object.
 *         """
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridHessianFn(self.max_shell_type), fock)             # <<<<<<<<<<<<<<
 * 
 *     def compute_grid_mgga_fock(self, np.ndarray[double, ndim=2] points not None,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_fock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridHessianFn), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_weights));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_weights));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_weights));
    __Pyx_INCREF(((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_pots));
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_fock);
    __Pyx_GIVEREF(__pyx_v_fock);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fock);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1627
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridKineticFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_hessian_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                   np.ndarray[double, ndim=1] weights not None,
 *                                   np.ndarray[double, ndim=2] pots not None, fock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_hessian_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1656
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridHessianFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_mgga_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=1] weights not None,
 *                                 np.ndarray[double, ndim=2] pots not None, fock):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_63compute_grid_mgga_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_62compute_grid_mgga_fock[] = "GOBasis.compute_grid_mgga_fock(self, ndarray points, ndarray weights, ndarray pots, fock)\nCompute a Fock operator from MGGA potential data.\n\n        **Warning:** the results are added to the Fock operator!\n\n        Parameters\n        ----------\n\n        points : np.ndarray, shape=(npoint, 3), dtype=float\n            Cartesian grid points.\n        weights : np.ndarray, shape=(npoint,), dtype=float\n            Integration weights.\n        pots : np.ndarray, shape=(npoint, 6), dtype=float\n            Derivative of the energy toward density, gradient, Laplacian and kinetic\n            energy density. The assignment of the columns is as follows:\n\n            * 0: density\n            * 1: gradient x\n            * 2: gradient y\n            * 3: gradient z\n            * 4: laplacian\n            * 5: kinetic energy density\n        fock : DenseTwoIndex\n            Output dense two-index object.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_63compute_grid_mgga_fock(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_points = 0;
  PyArrayObject *__pyx_v_weights = 0;
  PyArrayObject *__pyx_v_pots = 0;
  PyObject *__pyx_v_fock = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_grid_mgga_fock (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_weights,&__pyx_n_s_pots,&__pyx_n_s_fock,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_mgga_fock", 1, 4, 4, 1); __PYX_ERR(0, 1656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pots)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_mgga_fock", 1, 4, 4, 2); __PYX_ERR(0, 1656, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fock)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_grid_mgga_fock", 1, 4, 4, 3); __PYX_ERR(0, 1656, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_grid_mgga_fock") < 0)) __PYX_ERR(0, 1656, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
    __pyx_v_weights = ((PyArrayObject *)values[1]);
    __pyx_v_pots = ((PyArrayObject *)values[2]);
    __pyx_v_fock = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_grid_mgga_fock", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1656, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_mgga_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 0, "points", 0))) __PYX_ERR(0, 1656, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 0, "weights", 0))) __PYX_ERR(0, 1657, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pots), __pyx_ptype_5numpy_ndarray, 0, "pots", 0))) __PYX_ERR(0, 1658, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_62compute_grid_mgga_fock(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), __pyx_v_points, __pyx_v_weights, __pyx_v_pots, __pyx_v_fock);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_62compute_grid_mgga_fock(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_weights, PyArrayObject *__pyx_v_pots, PyObject *__pyx_v_fock) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pots;
  __Pyx_Buffer __pyx_pybuffer_pots;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights;
  __Pyx_Buffer __pyx_pybuffer_weights;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("compute_grid_mgga_fock", 0);
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_weights.pybuffer.buf = NULL;
  __pyx_pybuffer_weights.refcount = 0;
  __pyx_pybuffernd_weights.data = NULL;
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;
  __pyx_pybuffer_pots.pybuffer.buf = NULL;
  __pyx_pybuffer_pots.refcount = 0;
  __pyx_pybuffernd_pots.data = NULL;
  __pyx_pybuffernd_pots.rcbuffer = &__pyx_pybuffer_pots;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1656, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1656, __pyx_L1_error)
  }
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pots.rcbuffer->pybuffer, (PyObject*)__pyx_v_pots, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1656, __pyx_L1_error)
  }
  __pyx_pybuffernd_pots.diminfo[0].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pots.diminfo[0].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pots.diminfo[1].strides = __pyx_pybuffernd_pots.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pots.diminfo[1].shape = __pyx_pybuffernd_pots.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1683
 *             Output dense two-index object.
 *         """
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridMGGAFn(self.max_shell_type), fock)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_compute_grid1_fock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GB1DMGridMGGAFn), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1683, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[6] = {__pyx_t_3, ((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_weights), ((PyObject *)__pyx_v_pots), __pyx_t_4, __pyx_v_fock};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 5+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1683, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(5+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_points));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_points));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_points));
    __Pyx_INCREF(((PyObject *)__pyx_v_weights));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_weights));
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, ((PyObject *)__pyx_v_weights));
    __Pyx_INCREF(((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_pots));
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, ((PyObject *)__pyx_v_pots));
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 3+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_fock);
    __Pyx_GIVEREF(__pyx_v_fock);
    PyTuple_SET_ITEM(__pyx_t_6, 4+__pyx_t_5, __pyx_v_fock);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1656
 *         self._compute_grid1_fock(points, weights, pots, GB1DMGridHessianFn(self.max_shell_type), fock)
 * 
 *     def compute_grid_mgga_fock(self, np.ndarray[double, ndim=2] points not None,             # <<<<<<<<<<<<<<
 *                                 np.ndarray[double, ndim=1] weights not None,
 *                                 np.ndarray[double, ndim=2] pots not None, fock):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.compute_grid_mgga_fock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pots.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_64__reduce_cython__[] = "GOBasis.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_64__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7GOBasis_66__setstate_cython__[] = "GOBasis.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7GOBasis_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7GOBasis_66__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7GOBasis_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GOBasis.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1690
 * #
 * 
 * def select_2index(GOBasis gobasis, long index0, long index2):             # <<<<<<<<<<<<<<
 *     assert index0 >= 0 and index0 < gobasis.nbasis
 *     assert index2 >= 0 and index2 < gobasis.nbasis
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_35select_2index(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_34select_2index[] = "select_2index(GOBasis gobasis, long index0, long index2)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_35select_2index = {"select_2index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_35select_2index, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_34select_2index};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_35select_2index(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis = 0;
  long __pyx_v_index0;
  long __pyx_v_index2;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("select_2index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gobasis,&__pyx_n_s_index0,&__pyx_n_s_index2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gobasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("select_2index", 1, 3, 3, 1); __PYX_ERR(0, 1690, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("select_2index", 1, 3, 3, 2); __PYX_ERR(0, 1690, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "select_2index") < 0)) __PYX_ERR(0, 1690, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_gobasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)values[0]);
    __pyx_v_index0 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_index0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1690, __pyx_L3_error)
    __pyx_v_index2 = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_index2 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1690, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("select_2index", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1690, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.select_2index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gobasis), __pyx_ptype_6horton_6gbasis_4cext_GOBasis, 1, "gobasis", 0))) __PYX_ERR(0, 1690, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_34select_2index(__pyx_self, __pyx_v_gobasis, __pyx_v_index0, __pyx_v_index2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_34select_2index(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, long __pyx_v_index0, long __pyx_v_index2) {
  GB4ElectronRepulsionIntegralLibInt *__pyx_v_gb4int;
  GB4IntegralWrapper *__pyx_v_gb4w;
  long __pyx_v_pbegin0;
  long __pyx_v_pend0;
  long __pyx_v_pbegin2;
  long __pyx_v_pend2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  GB4ElectronRepulsionIntegralLibInt *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  char const *__pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("select_2index", 0);

  /* "horton/gbasis/cext.pyx":1691
 * 
 * def select_2index(GOBasis gobasis, long index0, long index2):
 *     assert index0 >= 0 and index0 < gobasis.nbasis             # <<<<<<<<<<<<<<
 *     assert index2 >= 0 and index2 < gobasis.nbasis
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((__pyx_v_index0 >= 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L3_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_index0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1691, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L3_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1691, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1692
 * def select_2index(GOBasis gobasis, long index0, long index2):
 *     assert index0 >= 0 and index0 < gobasis.nbasis
 *     assert index2 >= 0 and index2 < gobasis.nbasis             # <<<<<<<<<<<<<<
 * 
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = ((__pyx_v_index2 >= 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_index2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;
    if (unlikely(!__pyx_t_1)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1692, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1694
 *     assert index2 >= 0 and index2 < gobasis.nbasis
 * 
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL             # <<<<<<<<<<<<<<
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 * 
 */
  __pyx_v_gb4int = NULL;

  /* "horton/gbasis/cext.pyx":1695
 * 
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef long pbegin0
 */
  __pyx_v_gb4w = NULL;

  /* "horton/gbasis/cext.pyx":1702
 *     cdef long pend2
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)
 */
  /*try:*/ {

    /* "horton/gbasis/cext.pyx":1704
 *     try:
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)             # <<<<<<<<<<<<<<
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 *                             <ints.GB4Integral*> gb4int)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1704, __pyx_L8_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1704, __pyx_L8_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "horton/gbasis/cext.pyx":1703
 * 
 *     try:
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(             # <<<<<<<<<<<<<<
 *                             gobasis.max_shell_type)
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 */
    try {
      __pyx_t_7 = new GB4ElectronRepulsionIntegralLibInt(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1703, __pyx_L8_error)
    }
    __pyx_v_gb4int = __pyx_t_7;

    /* "horton/gbasis/cext.pyx":1705
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),             # <<<<<<<<<<<<<<
 *                             <ints.GB4Integral*> gb4int)
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 */
    __pyx_v_gb4w = new GB4IntegralWrapper(((GOBasis *)__pyx_v_gobasis->__pyx_base._this), ((GB4Integral *)__pyx_v_gb4int));

    /* "horton/gbasis/cext.pyx":1707
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 *                             <ints.GB4Integral*> gb4int)
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)             # <<<<<<<<<<<<<<
 *     finally:
 *         if gb4int is not NULL:
 */
    __pyx_v_gb4w->select_2index(__pyx_v_index0, __pyx_v_index2, (&__pyx_v_pbegin0), (&__pyx_v_pend0), (&__pyx_v_pbegin2), (&__pyx_v_pend2));
  }

  /* "horton/gbasis/cext.pyx":1709
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_1 = ((__pyx_v_gb4int != NULL) != 0);
      if (__pyx_t_1) {

        /* "horton/gbasis/cext.pyx":1710
 *     finally:
 *         if gb4int is not NULL:
 *             del gb4int             # <<<<<<<<<<<<<<
 *         if gb4w is not NULL:
 *             del gb4w
 */
        delete __pyx_v_gb4int;

        /* "horton/gbasis/cext.pyx":1709
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
      }

      /* "horton/gbasis/cext.pyx":1711
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 *     return pbegin0, pend0, pbegin2, pend2
 */
      __pyx_t_1 = ((__pyx_v_gb4w != NULL) != 0);
      if (__pyx_t_1) {

        /* "horton/gbasis/cext.pyx":1712
 *             del gb4int
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 *     return pbegin0, pend0, pbegin2, pend2
 * 
 */
        delete __pyx_v_gb4w;

        /* "horton/gbasis/cext.pyx":1711
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 *     return pbegin0, pend0, pbegin2, pend2
 */
      }
      goto __pyx_L9;
    }
    __pyx_L8_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13) < 0)) __Pyx_ErrFetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_10 = __pyx_filename;
      {

        /* "horton/gbasis/cext.pyx":1709
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
        __pyx_t_1 = ((__pyx_v_gb4int != NULL) != 0);
        if (__pyx_t_1) {

          /* "horton/gbasis/cext.pyx":1710
 *     finally:
 *         if gb4int is not NULL:
 *             del gb4int             # <<<<<<<<<<<<<<
 *         if gb4w is not NULL:
 *             del gb4w
 */
          delete __pyx_v_gb4int;

          /* "horton/gbasis/cext.pyx":1709
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
        }

        /* "horton/gbasis/cext.pyx":1711
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 *     return pbegin0, pend0, pbegin2, pend2
 */
        __pyx_t_1 = ((__pyx_v_gb4w != NULL) != 0);
        if (__pyx_t_1) {

          /* "horton/gbasis/cext.pyx":1712
 *             del gb4int
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 *     return pbegin0, pend0, pbegin2, pend2
 * 
 */
          delete __pyx_v_gb4w;

          /* "horton/gbasis/cext.pyx":1711
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 *     return pbegin0, pend0, pbegin2, pend2
 */
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ErrRestore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_10;
      goto __pyx_L1_error;
    }
    __pyx_L9:;
  }

  /* "horton/gbasis/cext.pyx":1713
 *         if gb4w is not NULL:
 *             del gb4w
 *     return pbegin0, pend0, pbegin2, pend2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_pbegin0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_pend0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_pbegin2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_17 = __Pyx_PyInt_From_long(__pyx_v_pend2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyTuple_New(4); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_18, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_18, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_18, 3, __pyx_t_17);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_17 = 0;
  __pyx_r = __pyx_t_18;
  __pyx_t_18 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1690
 * #
 * 
 * def select_2index(GOBasis gobasis, long index0, long index2):             # <<<<<<<<<<<<<<
 *     assert index0 >= 0 and index0 < gobasis.nbasis
 *     assert index2 >= 0 and index2 < gobasis.nbasis
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("horton.gbasis.cext.select_2index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1716
 * 
 * 
 * def compute_diagonal(GOBasis gobasis, np.ndarray[double, ndim=2] diagonal not             # <<<<<<<<<<<<<<
 *         None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_37compute_diagonal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_36compute_diagonal[] = "compute_diagonal(GOBasis gobasis, ndarray diagonal)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_37compute_diagonal = {"compute_diagonal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_37compute_diagonal, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_36compute_diagonal};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_37compute_diagonal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis = 0;
  PyArrayObject *__pyx_v_diagonal = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_diagonal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gobasis,&__pyx_n_s_diagonal,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gobasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_diagonal)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_diagonal", 1, 2, 2, 1); __PYX_ERR(0, 1716, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_diagonal") < 0)) __PYX_ERR(0, 1716, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_gobasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)values[0]);
    __pyx_v_diagonal = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_diagonal", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1716, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.compute_diagonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gobasis), __pyx_ptype_6horton_6gbasis_4cext_GOBasis, 1, "gobasis", 0))) __PYX_ERR(0, 1716, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_diagonal), __pyx_ptype_5numpy_ndarray, 0, "diagonal", 0))) __PYX_ERR(0, 1716, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_36compute_diagonal(__pyx_self, __pyx_v_gobasis, __pyx_v_diagonal);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_36compute_diagonal(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, PyArrayObject *__pyx_v_diagonal) {
  GB4ElectronRepulsionIntegralLibInt *__pyx_v_gb4int;
  GB4IntegralWrapper *__pyx_v_gb4w;
  PyArrayObject *__pyx_v_output = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_diagonal;
  __Pyx_Buffer __pyx_pybuffer_diagonal;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  GB4ElectronRepulsionIntegralLibInt *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  char const *__pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("compute_diagonal", 0);
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  __pyx_pybuffer_diagonal.pybuffer.buf = NULL;
  __pyx_pybuffer_diagonal.refcount = 0;
  __pyx_pybuffernd_diagonal.data = NULL;
  __pyx_pybuffernd_diagonal.rcbuffer = &__pyx_pybuffer_diagonal;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_diagonal.rcbuffer->pybuffer, (PyObject*)__pyx_v_diagonal, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1716, __pyx_L1_error)
  }
  __pyx_pybuffernd_diagonal.diminfo[0].strides = __pyx_pybuffernd_diagonal.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_diagonal.diminfo[0].shape = __pyx_pybuffernd_diagonal.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_diagonal.diminfo[1].strides = __pyx_pybuffernd_diagonal.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_diagonal.diminfo[1].shape = __pyx_pybuffernd_diagonal.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1718
 * def compute_diagonal(GOBasis gobasis, np.ndarray[double, ndim=2] diagonal not
 *         None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL             # <<<<<<<<<<<<<<
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     cdef np.ndarray[double, ndim=2] output
 */
  __pyx_v_gb4int = NULL;

  /* "horton/gbasis/cext.pyx":1719
 *         None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[double, ndim=2] output
 *     output = diagonal
 */
  __pyx_v_gb4w = NULL;

  /* "horton/gbasis/cext.pyx":1721
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     cdef np.ndarray[double, ndim=2] output
 *     output = diagonal             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_v_diagonal), &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_2); Py_XDECREF(__pyx_t_3); Py_XDECREF(__pyx_t_4);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      }
      __pyx_t_2 = __pyx_t_3 = __pyx_t_4 = 0;
    }
    __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1721, __pyx_L1_error)
  }
  __Pyx_INCREF(((PyObject *)__pyx_v_diagonal));
  __pyx_v_output = ((PyArrayObject *)__pyx_v_diagonal);

  /* "horton/gbasis/cext.pyx":1723
 *     output = diagonal
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)
 */
  /*try:*/ {

    /* "horton/gbasis/cext.pyx":1725
 *     try:
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)             # <<<<<<<<<<<<<<
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 *                             <ints.GB4Integral*> gb4int)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1725, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_6 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1725, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "horton/gbasis/cext.pyx":1724
 * 
 *     try:
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(             # <<<<<<<<<<<<<<
 *                             gobasis.max_shell_type)
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 */
    try {
      __pyx_t_7 = new GB4ElectronRepulsionIntegralLibInt(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1724, __pyx_L4_error)
    }
    __pyx_v_gb4int = __pyx_t_7;

    /* "horton/gbasis/cext.pyx":1726
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),             # <<<<<<<<<<<<<<
 *                             <ints.GB4Integral*> gb4int)
 *         gb4w.compute_diagonal(&output[0, 0])
 */
    __pyx_v_gb4w = new GB4IntegralWrapper(((GOBasis *)__pyx_v_gobasis->__pyx_base._this), ((GB4Integral *)__pyx_v_gb4int));

    /* "horton/gbasis/cext.pyx":1728
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 *                             <ints.GB4Integral*> gb4int)
 *         gb4w.compute_diagonal(&output[0, 0])             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_1 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_pybuffernd_output.diminfo[0].shape;
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_1 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_1 = 0;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_pybuffernd_output.diminfo[1].shape;
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_1 = 1;
    } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_output.diminfo[1].shape)) __pyx_t_1 = 1;
    if (unlikely(__pyx_t_1 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_1);
      __PYX_ERR(0, 1728, __pyx_L4_error)
    }
    __pyx_v_gb4w->compute_diagonal((&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_9, __pyx_pybuffernd_output.diminfo[1].strides))));
  }

  /* "horton/gbasis/cext.pyx":1731
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_10 = ((__pyx_v_gb4int != NULL) != 0);
      if (__pyx_t_10) {

        /* "horton/gbasis/cext.pyx":1732
 *     finally:
 *         if gb4int is not NULL:
 *             del gb4int             # <<<<<<<<<<<<<<
 *         if gb4w is not NULL:
 *             del gb4w
 */
        delete __pyx_v_gb4int;

        /* "horton/gbasis/cext.pyx":1731
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
      }

      /* "horton/gbasis/cext.pyx":1733
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
      __pyx_t_10 = ((__pyx_v_gb4w != NULL) != 0);
      if (__pyx_t_10) {

        /* "horton/gbasis/cext.pyx":1734
 *             del gb4int
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 * 
 * def get_2index_slice(GOBasis gobasis, long index0, long index2,
 */
        delete __pyx_v_gb4w;

        /* "horton/gbasis/cext.pyx":1733
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
      }
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2) < 0)) __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __pyx_t_1 = __pyx_lineno; __pyx_t_11 = __pyx_clineno; __pyx_t_12 = __pyx_filename;
      {

        /* "horton/gbasis/cext.pyx":1731
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
        __pyx_t_10 = ((__pyx_v_gb4int != NULL) != 0);
        if (__pyx_t_10) {

          /* "horton/gbasis/cext.pyx":1732
 *     finally:
 *         if gb4int is not NULL:
 *             del gb4int             # <<<<<<<<<<<<<<
 *         if gb4w is not NULL:
 *             del gb4w
 */
          delete __pyx_v_gb4int;

          /* "horton/gbasis/cext.pyx":1731
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
        }

        /* "horton/gbasis/cext.pyx":1733
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
        __pyx_t_10 = ((__pyx_v_gb4w != NULL) != 0);
        if (__pyx_t_10) {

          /* "horton/gbasis/cext.pyx":1734
 *             del gb4int
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 * 
 * def get_2index_slice(GOBasis gobasis, long index0, long index2,
 */
          delete __pyx_v_gb4w;

          /* "horton/gbasis/cext.pyx":1733
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
      }
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_3, __pyx_t_2);
      __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
      __pyx_lineno = __pyx_t_1; __pyx_clineno = __pyx_t_11; __pyx_filename = __pyx_t_12;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "horton/gbasis/cext.pyx":1716
 * 
 * 
 * def compute_diagonal(GOBasis gobasis, np.ndarray[double, ndim=2] diagonal not             # <<<<<<<<<<<<<<
 *         None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_diagonal.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.compute_diagonal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_diagonal.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1736
 *             del gb4w
 * 
 * def get_2index_slice(GOBasis gobasis, long index0, long index2,             # <<<<<<<<<<<<<<
 *                         np.ndarray[double, ndim=2] slice not None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_39get_2index_slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_38get_2index_slice[] = "get_2index_slice(GOBasis gobasis, long index0, long index2, ndarray slice)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_39get_2index_slice = {"get_2index_slice", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_39get_2index_slice, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_38get_2index_slice};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_39get_2index_slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis = 0;
  long __pyx_v_index0;
  long __pyx_v_index2;
  PyArrayObject *__pyx_v_slice = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_2index_slice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gobasis,&__pyx_n_s_index0,&__pyx_n_s_index2,&__pyx_n_s_slice,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gobasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_2index_slice", 1, 4, 4, 1); __PYX_ERR(0, 1736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_2index_slice", 1, 4, 4, 2); __PYX_ERR(0, 1736, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_slice)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_2index_slice", 1, 4, 4, 3); __PYX_ERR(0, 1736, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_2index_slice") < 0)) __PYX_ERR(0, 1736, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_gobasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *)values[0]);
    __pyx_v_index0 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_index0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1736, __pyx_L3_error)
    __pyx_v_index2 = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_index2 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1736, __pyx_L3_error)
    __pyx_v_slice = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_2index_slice", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1736, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.get_2index_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gobasis), __pyx_ptype_6horton_6gbasis_4cext_GOBasis, 1, "gobasis", 0))) __PYX_ERR(0, 1736, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_slice), __pyx_ptype_5numpy_ndarray, 0, "slice", 0))) __PYX_ERR(0, 1737, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_38get_2index_slice(__pyx_self, __pyx_v_gobasis, __pyx_v_index0, __pyx_v_index2, __pyx_v_slice);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_38get_2index_slice(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6horton_6gbasis_4cext_GOBasis *__pyx_v_gobasis, long __pyx_v_index0, long __pyx_v_index2, PyArrayObject *__pyx_v_slice) {
  GB4ElectronRepulsionIntegralLibInt *__pyx_v_gb4int;
  GB4IntegralWrapper *__pyx_v_gb4w;
  long __pyx_v_pbegin0;
  long __pyx_v_pend0;
  long __pyx_v_pbegin2;
  long __pyx_v_pend2;
  double *__pyx_v_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_slice;
  __Pyx_Buffer __pyx_pybuffer_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  GB4ElectronRepulsionIntegralLibInt *__pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  __Pyx_RefNannySetupContext("get_2index_slice", 0);
  __pyx_pybuffer_slice.pybuffer.buf = NULL;
  __pyx_pybuffer_slice.refcount = 0;
  __pyx_pybuffernd_slice.data = NULL;
  __pyx_pybuffernd_slice.rcbuffer = &__pyx_pybuffer_slice;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_slice.rcbuffer->pybuffer, (PyObject*)__pyx_v_slice, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1736, __pyx_L1_error)
  }
  __pyx_pybuffernd_slice.diminfo[0].strides = __pyx_pybuffernd_slice.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_slice.diminfo[0].shape = __pyx_pybuffernd_slice.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_slice.diminfo[1].strides = __pyx_pybuffernd_slice.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_slice.diminfo[1].shape = __pyx_pybuffernd_slice.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1738
 * def get_2index_slice(GOBasis gobasis, long index0, long index2,
 *                         np.ndarray[double, ndim=2] slice not None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL             # <<<<<<<<<<<<<<
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     assert slice.flags['C_CONTIGUOUS']
 */
  __pyx_v_gb4int = NULL;

  /* "horton/gbasis/cext.pyx":1739
 *                         np.ndarray[double, ndim=2] slice not None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL             # <<<<<<<<<<<<<<
 *     assert slice.flags['C_CONTIGUOUS']
 *     assert slice.shape[0] == gobasis.nbasis
 */
  __pyx_v_gb4w = NULL;

  /* "horton/gbasis/cext.pyx":1740
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     assert slice.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *     assert slice.shape[0] == gobasis.nbasis
 *     assert slice.shape[1] == gobasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_slice), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1740, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1740, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1741
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     assert slice.flags['C_CONTIGUOUS']
 *     assert slice.shape[0] == gobasis.nbasis             # <<<<<<<<<<<<<<
 *     assert slice.shape[1] == gobasis.nbasis
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_slice->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1741, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1742
 *     assert slice.flags['C_CONTIGUOUS']
 *     assert slice.shape[0] == gobasis.nbasis
 *     assert slice.shape[1] == gobasis.nbasis             # <<<<<<<<<<<<<<
 * 
 *     cdef long pbegin0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_slice->dimensions[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1742, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1749
 *     cdef long pend2
 *     cdef double* output
 *     try:             # <<<<<<<<<<<<<<
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)
 */
  /*try:*/ {

    /* "horton/gbasis/cext.pyx":1751
 *     try:
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)             # <<<<<<<<<<<<<<
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 *                             <ints.GB4Integral*> gb4int)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1751, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_5 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1751, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":1750
 *     cdef double* output
 *     try:
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(             # <<<<<<<<<<<<<<
 *                             gobasis.max_shell_type)
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 */
    try {
      __pyx_t_6 = new GB4ElectronRepulsionIntegralLibInt(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1750, __pyx_L4_error)
    }
    __pyx_v_gb4int = __pyx_t_6;

    /* "horton/gbasis/cext.pyx":1752
 *         gb4int = new ints.GB4ElectronRepulsionIntegralLibInt(
 *                             gobasis.max_shell_type)
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),             # <<<<<<<<<<<<<<
 *                             <ints.GB4Integral*> gb4int)
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 */
    __pyx_v_gb4w = new GB4IntegralWrapper(((GOBasis *)__pyx_v_gobasis->__pyx_base._this), ((GB4Integral *)__pyx_v_gb4int));

    /* "horton/gbasis/cext.pyx":1754
 *         gb4w = new gbw.GB4IntegralWrapper((<gbasis.GOBasis* > gobasis._this),
 *                             <ints.GB4Integral*> gb4int)
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)             # <<<<<<<<<<<<<<
 *         gb4w.compute()
 *         output = gb4w.get_2index_slice(index0, index2)
 */
    __pyx_v_gb4w->select_2index(__pyx_v_index0, __pyx_v_index2, (&__pyx_v_pbegin0), (&__pyx_v_pend0), (&__pyx_v_pbegin2), (&__pyx_v_pend2));

    /* "horton/gbasis/cext.pyx":1755
 *                             <ints.GB4Integral*> gb4int)
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 *         gb4w.compute()             # <<<<<<<<<<<<<<
 *         output = gb4w.get_2index_slice(index0, index2)
 *         print output[0]
 */
    __pyx_v_gb4w->compute();

    /* "horton/gbasis/cext.pyx":1756
 *         gb4w.select_2index(index0, index2, &pbegin0, &pend0, &pbegin2, &pend2)
 *         gb4w.compute()
 *         output = gb4w.get_2index_slice(index0, index2)             # <<<<<<<<<<<<<<
 *         print output[0]
 *         print sizeof(double)*gobasis.nbasis*gobasis.nbasis
 */
    __pyx_v_output = __pyx_v_gb4w->get_2index_slice(__pyx_v_index0, __pyx_v_index2);

    /* "horton/gbasis/cext.pyx":1757
 *         gb4w.compute()
 *         output = gb4w.get_2index_slice(index0, index2)
 *         print output[0]             # <<<<<<<<<<<<<<
 *         print sizeof(double)*gobasis.nbasis*gobasis.nbasis
 *         libc.string.memcpy(&slice[0,0], output,
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_output[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1757, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 1757, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":1758
 *         output = gb4w.get_2index_slice(index0, index2)
 *         print output[0]
 *         print sizeof(double)*gobasis.nbasis*gobasis.nbasis             # <<<<<<<<<<<<<<
 *         libc.string.memcpy(&slice[0,0], output,
 *                 sizeof(double)*gobasis.nbasis*gobasis.nbasis)
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1758, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 1758, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":1759
 *         print output[0]
 *         print sizeof(double)*gobasis.nbasis*gobasis.nbasis
 *         libc.string.memcpy(&slice[0,0], output,             # <<<<<<<<<<<<<<
 *                 sizeof(double)*gobasis.nbasis*gobasis.nbasis)
 *         print slice[0,0]
 */
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_7 < 0) {
      __pyx_t_7 += __pyx_pybuffernd_slice.diminfo[0].shape;
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_slice.diminfo[0].shape)) __pyx_t_9 = 0;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_pybuffernd_slice.diminfo[1].shape;
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_slice.diminfo[1].shape)) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1759, __pyx_L4_error)
    }

    /* "horton/gbasis/cext.pyx":1760
 *         print sizeof(double)*gobasis.nbasis*gobasis.nbasis
 *         libc.string.memcpy(&slice[0,0], output,
 *                 sizeof(double)*gobasis.nbasis*gobasis.nbasis)             # <<<<<<<<<<<<<<
 *         print slice[0,0]
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(double))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1760, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1760, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1760, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_gobasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1760, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1760, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_10 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1760, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "horton/gbasis/cext.pyx":1759
 *         print output[0]
 *         print sizeof(double)*gobasis.nbasis*gobasis.nbasis
 *         libc.string.memcpy(&slice[0,0], output,             # <<<<<<<<<<<<<<
 *                 sizeof(double)*gobasis.nbasis*gobasis.nbasis)
 *         print slice[0,0]
 */
    (void)(memcpy((&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_slice.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_slice.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_slice.diminfo[1].strides))), __pyx_v_output, __pyx_t_10));

    /* "horton/gbasis/cext.pyx":1761
 *         libc.string.memcpy(&slice[0,0], output,
 *                 sizeof(double)*gobasis.nbasis*gobasis.nbasis)
 *         print slice[0,0]             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */
    __pyx_t_11 = 0;
    __pyx_t_12 = 0;
    __pyx_t_9 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_pybuffernd_slice.diminfo[0].shape;
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_9 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_slice.diminfo[0].shape)) __pyx_t_9 = 0;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_pybuffernd_slice.diminfo[1].shape;
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_9 = 1;
    } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_slice.diminfo[1].shape)) __pyx_t_9 = 1;
    if (unlikely(__pyx_t_9 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_9);
      __PYX_ERR(0, 1761, __pyx_L4_error)
    }
    __pyx_t_2 = PyFloat_FromDouble((*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_slice.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_slice.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_slice.diminfo[1].strides))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1761, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_PrintOne(0, __pyx_t_2) < 0) __PYX_ERR(0, 1761, __pyx_L4_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "horton/gbasis/cext.pyx":1764
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_3 = ((__pyx_v_gb4int != NULL) != 0);
      if (__pyx_t_3) {

        /* "horton/gbasis/cext.pyx":1765
 *     finally:
 *         if gb4int is not NULL:
 *             del gb4int             # <<<<<<<<<<<<<<
 *         if gb4w is not NULL:
 *             del gb4w
 */
        delete __pyx_v_gb4int;

        /* "horton/gbasis/cext.pyx":1764
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
      }

      /* "horton/gbasis/cext.pyx":1766
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
      __pyx_t_3 = ((__pyx_v_gb4w != NULL) != 0);
      if (__pyx_t_3) {

        /* "horton/gbasis/cext.pyx":1767
 *             del gb4int
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 * 
 * 
 */
        delete __pyx_v_gb4w;

        /* "horton/gbasis/cext.pyx":1766
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
      }
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __pyx_t_9 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
      {

        /* "horton/gbasis/cext.pyx":1764
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
        __pyx_t_3 = ((__pyx_v_gb4int != NULL) != 0);
        if (__pyx_t_3) {

          /* "horton/gbasis/cext.pyx":1765
 *     finally:
 *         if gb4int is not NULL:
 *             del gb4int             # <<<<<<<<<<<<<<
 *         if gb4w is not NULL:
 *             del gb4w
 */
          delete __pyx_v_gb4int;

          /* "horton/gbasis/cext.pyx":1764
 * 
 *     finally:
 *         if gb4int is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4int
 *         if gb4w is not NULL:
 */
        }

        /* "horton/gbasis/cext.pyx":1766
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
        __pyx_t_3 = ((__pyx_v_gb4w != NULL) != 0);
        if (__pyx_t_3) {

          /* "horton/gbasis/cext.pyx":1767
 *             del gb4int
 *         if gb4w is not NULL:
 *             del gb4w             # <<<<<<<<<<<<<<
 * 
 * 
 */
          delete __pyx_v_gb4w;

          /* "horton/gbasis/cext.pyx":1766
 *         if gb4int is not NULL:
 *             del gb4int
 *         if gb4w is not NULL:             # <<<<<<<<<<<<<<
 *             del gb4w
 * 
 */
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_14;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "horton/gbasis/cext.pyx":1736
 *             del gb4w
 * 
 * def get_2index_slice(GOBasis gobasis, long index0, long index2,             # <<<<<<<<<<<<<<
 *                         np.ndarray[double, ndim=2] slice not None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slice.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.get_2index_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slice.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1779
 *     cdef ints.GB2Integral* _this
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_11GB2Integral_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_11GB2Integral_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_11GB2Integral___dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_11GB2Integral___dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":1780
 * 
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 * 
 *     property nwork:
 */
  delete __pyx_v_self->_this;

  /* "horton/gbasis/cext.pyx":1779
 *     cdef ints.GB2Integral* _this
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":1783
 * 
 *     property nwork:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nwork()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_5nwork_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_5nwork_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_5nwork___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_5nwork___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1784
 *     property nwork:
 *         def __get__(self):
 *             return self._this.get_nwork()             # <<<<<<<<<<<<<<
 * 
 *     property max_shell_type:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_nwork()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1783
 * 
 *     property nwork:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nwork()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.nwork.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1787
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_14max_shell_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_14max_shell_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_14max_shell_type___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1788
 *     property max_shell_type:
 *         def __get__(self):
 *             return self._this.get_max_shell_type()             # <<<<<<<<<<<<<<
 * 
 *     property max_nbasis:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_max_shell_type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1787
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.max_shell_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1791
 * 
 *     property max_nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_nbasis()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_10max_nbasis_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_10max_nbasis_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_10max_nbasis___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_10max_nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1792
 *     property max_nbasis:
 *         def __get__(self):
 *             return self._this.get_max_nbasis()             # <<<<<<<<<<<<<<
 * 
 *     def reset(self, long shell_type0, long shell_type1,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_max_nbasis()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1791
 * 
 *     property max_nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_nbasis()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.max_nbasis.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1794
 *             return self._this.get_max_nbasis()
 * 
 *     def reset(self, long shell_type0, long shell_type1,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=1] r0 not None,
 *               np.ndarray[double, ndim=1] r1 not None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_3reset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_2reset[] = "GB2Integral.reset(self, long shell_type0, long shell_type1, ndarray r0, ndarray r1)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_3reset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_shell_type0;
  long __pyx_v_shell_type1;
  PyArrayObject *__pyx_v_r0 = 0;
  PyArrayObject *__pyx_v_r1 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shell_type0,&__pyx_n_s_shell_type1,&__pyx_n_s_r0,&__pyx_n_s_r1,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 4, 4, 1); __PYX_ERR(0, 1794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 4, 4, 2); __PYX_ERR(0, 1794, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 4, 4, 3); __PYX_ERR(0, 1794, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset") < 0)) __PYX_ERR(0, 1794, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_shell_type0 = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_shell_type0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1794, __pyx_L3_error)
    __pyx_v_shell_type1 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_shell_type1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1794, __pyx_L3_error)
    __pyx_v_r0 = ((PyArrayObject *)values[2]);
    __pyx_v_r1 = ((PyArrayObject *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1794, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r0), __pyx_ptype_5numpy_ndarray, 0, "r0", 0))) __PYX_ERR(0, 1795, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r1), __pyx_ptype_5numpy_ndarray, 0, "r1", 0))) __PYX_ERR(0, 1796, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_2reset(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self), __pyx_v_shell_type0, __pyx_v_shell_type1, __pyx_v_r0, __pyx_v_r1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_2reset(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, long __pyx_v_shell_type0, long __pyx_v_shell_type1, PyArrayObject *__pyx_v_r0, PyArrayObject *__pyx_v_r1) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r0;
  __Pyx_Buffer __pyx_pybuffer_r0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r1;
  __Pyx_Buffer __pyx_pybuffer_r1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("reset", 0);
  __pyx_pybuffer_r0.pybuffer.buf = NULL;
  __pyx_pybuffer_r0.refcount = 0;
  __pyx_pybuffernd_r0.data = NULL;
  __pyx_pybuffernd_r0.rcbuffer = &__pyx_pybuffer_r0;
  __pyx_pybuffer_r1.pybuffer.buf = NULL;
  __pyx_pybuffer_r1.refcount = 0;
  __pyx_pybuffernd_r1.data = NULL;
  __pyx_pybuffernd_r1.rcbuffer = &__pyx_pybuffer_r1;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r0.rcbuffer->pybuffer, (PyObject*)__pyx_v_r0, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1794, __pyx_L1_error)
  }
  __pyx_pybuffernd_r0.diminfo[0].strides = __pyx_pybuffernd_r0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r0.diminfo[0].shape = __pyx_pybuffernd_r0.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r1.rcbuffer->pybuffer, (PyObject*)__pyx_v_r1, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1794, __pyx_L1_error)
  }
  __pyx_pybuffernd_r1.diminfo[0].strides = __pyx_pybuffernd_r1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r1.diminfo[0].shape = __pyx_pybuffernd_r1.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1797
 *               np.ndarray[double, ndim=1] r0 not None,
 *               np.ndarray[double, ndim=1] r1 not None):
 *         assert r0.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert r0.shape[0] == 3
 *         assert r1.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_r0), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1797, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1797, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1798
 *               np.ndarray[double, ndim=1] r1 not None):
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3             # <<<<<<<<<<<<<<
 *         assert r1.flags['C_CONTIGUOUS']
 *         assert r1.shape[0] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_r0->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1798, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1799
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3
 *         assert r1.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert r1.shape[0] == 3
 *         self._this.reset(shell_type0, shell_type1, <double*>r0.data, <double*>r1.data)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_r1), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1799, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1799, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1800
 *         assert r0.shape[0] == 3
 *         assert r1.flags['C_CONTIGUOUS']
 *         assert r1.shape[0] == 3             # <<<<<<<<<<<<<<
 *         self._this.reset(shell_type0, shell_type1, <double*>r0.data, <double*>r1.data)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_r1->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1800, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1801
 *         assert r1.flags['C_CONTIGUOUS']
 *         assert r1.shape[0] == 3
 *         self._this.reset(shell_type0, shell_type1, <double*>r0.data, <double*>r1.data)             # <<<<<<<<<<<<<<
 * 
 *     def add(self, double coeff, double alpha0, double alpha1,
 */
  try {
    __pyx_v_self->_this->reset(__pyx_v_shell_type0, __pyx_v_shell_type1, ((double *)__pyx_v_r0->data), ((double *)__pyx_v_r1->data));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1801, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1794
 *             return self._this.get_max_nbasis()
 * 
 *     def reset(self, long shell_type0, long shell_type1,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=1] r0 not None,
 *               np.ndarray[double, ndim=1] r1 not None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r0.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r1.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r0.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r1.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1803
 *         self._this.reset(shell_type0, shell_type1, <double*>r0.data, <double*>r1.data)
 * 
 *     def add(self, double coeff, double alpha0, double alpha1,             # <<<<<<<<<<<<<<
 *             np.ndarray[double, ndim=1] scales0 not None,
 *             np.ndarray[double, ndim=1] scales1 not None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_4add[] = "GB2Integral.add(self, double coeff, double alpha0, double alpha1, ndarray scales0, ndarray scales1)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_coeff;
  double __pyx_v_alpha0;
  double __pyx_v_alpha1;
  PyArrayObject *__pyx_v_scales0 = 0;
  PyArrayObject *__pyx_v_scales1 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeff,&__pyx_n_s_alpha0,&__pyx_n_s_alpha1,&__pyx_n_s_scales0,&__pyx_n_s_scales1,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 5, 5, 1); __PYX_ERR(0, 1803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 5, 5, 2); __PYX_ERR(0, 1803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scales0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 5, 5, 3); __PYX_ERR(0, 1803, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scales1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 5, 5, 4); __PYX_ERR(0, 1803, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(0, 1803, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_coeff = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_coeff == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
    __pyx_v_alpha0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
    __pyx_v_alpha1 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1803, __pyx_L3_error)
    __pyx_v_scales0 = ((PyArrayObject *)values[3]);
    __pyx_v_scales1 = ((PyArrayObject *)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1803, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scales0), __pyx_ptype_5numpy_ndarray, 0, "scales0", 0))) __PYX_ERR(0, 1804, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scales1), __pyx_ptype_5numpy_ndarray, 0, "scales1", 0))) __PYX_ERR(0, 1805, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_4add(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self), __pyx_v_coeff, __pyx_v_alpha0, __pyx_v_alpha1, __pyx_v_scales0, __pyx_v_scales1);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_4add(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, double __pyx_v_coeff, double __pyx_v_alpha0, double __pyx_v_alpha1, PyArrayObject *__pyx_v_scales0, PyArrayObject *__pyx_v_scales1) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_scales0;
  __Pyx_Buffer __pyx_pybuffer_scales0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_scales1;
  __Pyx_Buffer __pyx_pybuffer_scales1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("add", 0);
  __pyx_pybuffer_scales0.pybuffer.buf = NULL;
  __pyx_pybuffer_scales0.refcount = 0;
  __pyx_pybuffernd_scales0.data = NULL;
  __pyx_pybuffernd_scales0.rcbuffer = &__pyx_pybuffer_scales0;
  __pyx_pybuffer_scales1.pybuffer.buf = NULL;
  __pyx_pybuffer_scales1.refcount = 0;
  __pyx_pybuffernd_scales1.data = NULL;
  __pyx_pybuffernd_scales1.rcbuffer = &__pyx_pybuffer_scales1;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer, (PyObject*)__pyx_v_scales0, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1803, __pyx_L1_error)
  }
  __pyx_pybuffernd_scales0.diminfo[0].strides = __pyx_pybuffernd_scales0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_scales0.diminfo[0].shape = __pyx_pybuffernd_scales0.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_scales1.rcbuffer->pybuffer, (PyObject*)__pyx_v_scales1, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1803, __pyx_L1_error)
  }
  __pyx_pybuffernd_scales1.diminfo[0].strides = __pyx_pybuffernd_scales1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_scales1.diminfo[0].shape = __pyx_pybuffernd_scales1.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1806
 *             np.ndarray[double, ndim=1] scales0 not None,
 *             np.ndarray[double, ndim=1] scales1 not None):
 *         assert scales0.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         assert scales1.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scales0), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1806, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1807
 *             np.ndarray[double, ndim=1] scales1 not None):
 *         assert scales0.flags['C_CONTIGUOUS']
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))             # <<<<<<<<<<<<<<
 *         assert scales1.flags['C_CONTIGUOUS']
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_scales0->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = labs(__pyx_v_self->_this->get_shell_type0()); if (unlikely(__pyx_t_5 == ((long)-1))) __PYX_ERR(0, 1807, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1807, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1807, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1807, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1807, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1808
 *         assert scales0.flags['C_CONTIGUOUS']
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         assert scales1.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))
 *         self._this.add(coeff, alpha0, alpha1, <double*>scales0.data, <double*>scales1.data)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scales1), __pyx_n_s_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1808, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1808, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1809
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         assert scales1.flags['C_CONTIGUOUS']
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))             # <<<<<<<<<<<<<<
 *         self._this.add(coeff, alpha0, alpha1, <double*>scales0.data, <double*>scales1.data)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_scales1->dimensions[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = labs(__pyx_v_self->_this->get_shell_type1()); if (unlikely(__pyx_t_5 == ((long)-1))) __PYX_ERR(0, 1809, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1809, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1809, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1810
 *         assert scales1.flags['C_CONTIGUOUS']
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))
 *         self._this.add(coeff, alpha0, alpha1, <double*>scales0.data, <double*>scales1.data)             # <<<<<<<<<<<<<<
 * 
 *     def cart_to_pure(self):
 */
  __pyx_v_self->_this->add(__pyx_v_coeff, __pyx_v_alpha0, __pyx_v_alpha1, ((double *)__pyx_v_scales0->data), ((double *)__pyx_v_scales1->data));

  /* "horton/gbasis/cext.pyx":1803
 *         self._this.reset(shell_type0, shell_type1, <double*>r0.data, <double*>r1.data)
 * 
 *     def add(self, double coeff, double alpha0, double alpha1,             # <<<<<<<<<<<<<<
 *             np.ndarray[double, ndim=1] scales0 not None,
 *             np.ndarray[double, ndim=1] scales1 not None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales1.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales1.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1812
 *         self._this.add(coeff, alpha0, alpha1, <double*>scales0.data, <double*>scales1.data)
 * 
 *     def cart_to_pure(self):             # <<<<<<<<<<<<<<
 *         self._this.cart_to_pure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_7cart_to_pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_6cart_to_pure[] = "GB2Integral.cart_to_pure(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_7cart_to_pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cart_to_pure (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_6cart_to_pure(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_6cart_to_pure(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cart_to_pure", 0);

  /* "horton/gbasis/cext.pyx":1813
 * 
 *     def cart_to_pure(self):
 *         self._this.cart_to_pure()             # <<<<<<<<<<<<<<
 * 
 *     def get_work(self, shape0, shape1):
 */
  try {
    __pyx_v_self->_this->cart_to_pure();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1813, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1812
 *         self._this.add(coeff, alpha0, alpha1, <double*>scales0.data, <double*>scales1.data)
 * 
 *     def cart_to_pure(self):             # <<<<<<<<<<<<<<
 *         self._this.cart_to_pure()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.cart_to_pure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1815
 *         self._this.cart_to_pure()
 * 
 *     def get_work(self, shape0, shape1):             # <<<<<<<<<<<<<<
 *         '''This returns a **copy** of the c++ work array.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_9get_work(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_8get_work[] = "GB2Integral.get_work(self, shape0, shape1)\nThis returns a **copy** of the c++ work array.\n\n           Returning a numpy array with a buffer created in c++ is dangerous.\n           If the c++ array becomes deallocated, the numpy array may still\n           point to the deallocated memory. For that reason, a copy is returned.\n           Speed is not an issue as this class is only used for testing.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_9get_work(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape0 = 0;
  PyObject *__pyx_v_shape1 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_work (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape0,&__pyx_n_s_shape1,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_work", 1, 2, 2, 1); __PYX_ERR(0, 1815, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_work") < 0)) __PYX_ERR(0, 1815, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_shape0 = values[0];
    __pyx_v_shape1 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_work", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1815, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.get_work", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_8get_work(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self), __pyx_v_shape0, __pyx_v_shape1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_8get_work(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, PyObject *__pyx_v_shape0, PyObject *__pyx_v_shape1) {
  npy_intp __pyx_v_shape[2];
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  npy_intp __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_work", 0);

  /* "horton/gbasis/cext.pyx":1824
 *         '''
 *         cdef np.npy_intp shape[2]
 *         assert shape0 > 0             # <<<<<<<<<<<<<<
 *         assert shape1 > 0
 *         assert shape0 <= self.max_nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape0, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1824, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1824, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1825
 *         cdef np.npy_intp shape[2]
 *         assert shape0 > 0
 *         assert shape1 > 0             # <<<<<<<<<<<<<<
 *         assert shape0 <= self.max_nbasis
 *         assert shape1 <= self.max_nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1825, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1825, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1825, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1826
 *         assert shape0 > 0
 *         assert shape1 > 0
 *         assert shape0 <= self.max_nbasis             # <<<<<<<<<<<<<<
 *         assert shape1 <= self.max_nbasis
 *         shape[0] = shape0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_shape0, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1826, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1827
 *         assert shape1 > 0
 *         assert shape0 <= self.max_nbasis
 *         assert shape1 <= self.max_nbasis             # <<<<<<<<<<<<<<
 *         shape[0] = shape0
 *         shape[1] = shape1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape1, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1827, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1827, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1828
 *         assert shape0 <= self.max_nbasis
 *         assert shape1 <= self.max_nbasis
 *         shape[0] = shape0             # <<<<<<<<<<<<<<
 *         shape[1] = shape1
 *         tmp = np.PyArray_SimpleNewFromData(2, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 */
  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_shape0); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1828, __pyx_L1_error)
  (__pyx_v_shape[0]) = __pyx_t_4;

  /* "horton/gbasis/cext.pyx":1829
 *         assert shape1 <= self.max_nbasis
 *         shape[0] = shape0
 *         shape[1] = shape1             # <<<<<<<<<<<<<<
 *         tmp = np.PyArray_SimpleNewFromData(2, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         return tmp.copy()
 */
  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_shape1); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1829, __pyx_L1_error)
  (__pyx_v_shape[1]) = __pyx_t_4;

  /* "horton/gbasis/cext.pyx":1830
 *         shape[0] = shape0
 *         shape[1] = shape1
 *         tmp = np.PyArray_SimpleNewFromData(2, shape, np.NPY_DOUBLE, <void*> self._this.get_work())             # <<<<<<<<<<<<<<
 *         return tmp.copy()
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_shape, NPY_DOUBLE, ((void *)__pyx_v_self->_this->get_work())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1831
 *         shape[1] = shape1
 *         tmp = np.PyArray_SimpleNewFromData(2, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         return tmp.copy()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1815
 *         self._this.cart_to_pure()
 * 
 *     def get_work(self, shape0, shape1):             # <<<<<<<<<<<<<<
 *         '''This returns a **copy** of the c++ work array.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.get_work", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_10__reduce_cython__[] = "GB2Integral.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_10__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_12__setstate_cython__[] = "GB2Integral.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB2Integral_12__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB2Integral_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2Integral.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1837
 *     '''Wrapper for ints.GB2OverlapIntegral, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB2Integral*>(new ints.GB2OverlapIntegral(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1837, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1837, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1837, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2OverlapIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB2OverlapIntegral *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":1838
 * 
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <ints.GB2Integral*>(new ints.GB2OverlapIntegral(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB2OverlapIntegral(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1838, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB2Integral *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":1837
 *     '''Wrapper for ints.GB2OverlapIntegral, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB2Integral*>(new ints.GB2OverlapIntegral(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2OverlapIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB2OverlapIntegral_2__reduce_cython__[] = "GB2OverlapIntegral.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2OverlapIntegral.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB2OverlapIntegral_4__setstate_cython__[] = "GB2OverlapIntegral.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2OverlapIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2OverlapIntegral.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1844
 *     '''Wrapper for ints.GB2KineticIntegral, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB2Integral*>(new ints.GB2KineticIntegral(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1844, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1844, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1844, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2KineticIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB2KineticIntegral *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":1845
 * 
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <ints.GB2Integral*>(new ints.GB2KineticIntegral(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB2KineticIntegral(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1845, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB2Integral *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":1844
 *     '''Wrapper for ints.GB2KineticIntegral, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB2Integral*>(new ints.GB2KineticIntegral(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2KineticIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB2KineticIntegral_2__reduce_cython__[] = "GB2KineticIntegral.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2KineticIntegral.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB2KineticIntegral_4__setstate_cython__[] = "GB2KineticIntegral.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB2KineticIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2KineticIntegral.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1854
 *     cdef np.ndarray _centers
 * 
 *     def __cinit__(self, long max_nbasis,             # <<<<<<<<<<<<<<
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None):
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  PyArrayObject *__pyx_v_charges = 0;
  PyArrayObject *__pyx_v_centers = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,&__pyx_n_s_charges,&__pyx_n_s_centers,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 1854, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 1854, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1854, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1854, __pyx_L3_error)
    __pyx_v_charges = ((PyArrayObject *)values[1]);
    __pyx_v_centers = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1854, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2NuclearAttractionIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 0, "charges", 0))) __PYX_ERR(0, 1855, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_centers), __pyx_ptype_5numpy_ndarray, 0, "centers", 0))) __PYX_ERR(0, 1856, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *)__pyx_v_self), __pyx_v_max_nbasis, __pyx_v_charges, __pyx_v_centers);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *__pyx_v_self, long __pyx_v_max_nbasis, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_centers) {
  long __pyx_v_ncharge;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_centers;
  __Pyx_Buffer __pyx_pybuffer_centers;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  GB2NuclearAttractionIntegral *__pyx_t_8;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  __pyx_pybuffer_centers.pybuffer.buf = NULL;
  __pyx_pybuffer_centers.refcount = 0;
  __pyx_pybuffernd_centers.data = NULL;
  __pyx_pybuffernd_centers.rcbuffer = &__pyx_pybuffer_centers;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1854, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_centers.rcbuffer->pybuffer, (PyObject*)__pyx_v_centers, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1854, __pyx_L1_error)
  }
  __pyx_pybuffernd_centers.diminfo[0].strides = __pyx_pybuffernd_centers.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_centers.diminfo[0].shape = __pyx_pybuffernd_centers.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_centers.diminfo[1].strides = __pyx_pybuffernd_centers.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_centers.diminfo[1].shape = __pyx_pybuffernd_centers.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1857
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None):
 *         assert charges.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_charges), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1857, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1857, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1857, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1857, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1858
 *                   np.ndarray[double, ndim=2] centers not None):
 *         assert charges.flags['C_CONTIGUOUS']
 *         cdef long ncharge = charges.shape[0]             # <<<<<<<<<<<<<<
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge
 */
  __pyx_v_ncharge = (__pyx_v_charges->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1859
 *         assert charges.flags['C_CONTIGUOUS']
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centers), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1859, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1859, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1859, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1860
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge             # <<<<<<<<<<<<<<
 *         self._charges = charges
 *         self._centers = centers
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_centers->dimensions[0]) == __pyx_v_ncharge) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1860, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1861
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges             # <<<<<<<<<<<<<<
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2NuclearAttractionIntegral(
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_charges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_charges));
  __Pyx_GOTREF(__pyx_v_self->_charges);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_charges));
  __pyx_v_self->_charges = ((PyArrayObject *)__pyx_v_charges);

  /* "horton/gbasis/cext.pyx":1862
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges
 *         self._centers = centers             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB2Integral*>(new ints.GB2NuclearAttractionIntegral(
 *            max_nbasis, &charges[0], &centers[0, 0], ncharge
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_centers));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_centers));
  __Pyx_GOTREF(__pyx_v_self->_centers);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_centers));
  __pyx_v_self->_centers = ((PyArrayObject *)__pyx_v_centers);

  /* "horton/gbasis/cext.pyx":1864
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2NuclearAttractionIntegral(
 *            max_nbasis, &charges[0], &centers[0, 0], ncharge             # <<<<<<<<<<<<<<
 *         ))
 * 
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_charges.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_charges.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1864, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_centers.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_centers.diminfo[0].shape)) __pyx_t_5 = 0;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_centers.diminfo[1].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 1;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_centers.diminfo[1].shape)) __pyx_t_5 = 1;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1864, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1863
 *         self._charges = charges
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2NuclearAttractionIntegral(             # <<<<<<<<<<<<<<
 *            max_nbasis, &charges[0], &centers[0, 0], ncharge
 *         ))
 */
  try {
    __pyx_t_8 = new GB2NuclearAttractionIntegral(__pyx_v_max_nbasis, (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_charges.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_charges.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_centers.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_centers.diminfo[0].strides, __pyx_t_7, __pyx_pybuffernd_centers.diminfo[1].strides))), __pyx_v_ncharge);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1863, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB2Integral *)__pyx_t_8);

  /* "horton/gbasis/cext.pyx":1854
 *     cdef np.ndarray _centers
 * 
 *     def __cinit__(self, long max_nbasis,             # <<<<<<<<<<<<<<
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_centers.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB2NuclearAttractionIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_centers.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_2__reduce_cython__[] = "GB2NuclearAttractionIntegral.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2NuclearAttractionIntegral.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_4__setstate_cython__[] = "GB2NuclearAttractionIntegral.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2NuclearAttractionIntegral.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1874
 *     cdef np.ndarray _centers
 * 
 *     def __cinit__(self, long max_nbasis,             # <<<<<<<<<<<<<<
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None, double mu):
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  PyArrayObject *__pyx_v_charges = 0;
  PyArrayObject *__pyx_v_centers = 0;
  double __pyx_v_mu;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,&__pyx_n_s_charges,&__pyx_n_s_centers,&__pyx_n_s_mu,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 1); __PYX_ERR(0, 1874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 2); __PYX_ERR(0, 1874, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, 3); __PYX_ERR(0, 1874, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1874, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1874, __pyx_L3_error)
    __pyx_v_charges = ((PyArrayObject *)values[1]);
    __pyx_v_centers = ((PyArrayObject *)values[2]);
    __pyx_v_mu = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1876, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1874, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2ErfAttractionIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 0, "charges", 0))) __PYX_ERR(0, 1875, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_centers), __pyx_ptype_5numpy_ndarray, 0, "centers", 0))) __PYX_ERR(0, 1876, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)__pyx_v_self), __pyx_v_max_nbasis, __pyx_v_charges, __pyx_v_centers, __pyx_v_mu);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self, long __pyx_v_max_nbasis, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_centers, double __pyx_v_mu) {
  long __pyx_v_ncharge;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_centers;
  __Pyx_Buffer __pyx_pybuffer_centers;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  GB2ErfAttractionIntegral *__pyx_t_8;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  __pyx_pybuffer_centers.pybuffer.buf = NULL;
  __pyx_pybuffer_centers.refcount = 0;
  __pyx_pybuffernd_centers.data = NULL;
  __pyx_pybuffernd_centers.rcbuffer = &__pyx_pybuffer_centers;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1874, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_centers.rcbuffer->pybuffer, (PyObject*)__pyx_v_centers, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1874, __pyx_L1_error)
  }
  __pyx_pybuffernd_centers.diminfo[0].strides = __pyx_pybuffernd_centers.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_centers.diminfo[0].shape = __pyx_pybuffernd_centers.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_centers.diminfo[1].strides = __pyx_pybuffernd_centers.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_centers.diminfo[1].shape = __pyx_pybuffernd_centers.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1877
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None, double mu):
 *         assert charges.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_charges), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1877, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1877, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1878
 *                   np.ndarray[double, ndim=2] centers not None, double mu):
 *         assert charges.flags['C_CONTIGUOUS']
 *         cdef long ncharge = charges.shape[0]             # <<<<<<<<<<<<<<
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge
 */
  __pyx_v_ncharge = (__pyx_v_charges->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1879
 *         assert charges.flags['C_CONTIGUOUS']
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centers), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1879, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1880
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge             # <<<<<<<<<<<<<<
 *         self._charges = charges
 *         self._centers = centers
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_centers->dimensions[0]) == __pyx_v_ncharge) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1880, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1881
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges             # <<<<<<<<<<<<<<
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2ErfAttractionIntegral(
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_charges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_charges));
  __Pyx_GOTREF(__pyx_v_self->_charges);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_charges));
  __pyx_v_self->_charges = ((PyArrayObject *)__pyx_v_charges);

  /* "horton/gbasis/cext.pyx":1882
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges
 *         self._centers = centers             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB2Integral*>(new ints.GB2ErfAttractionIntegral(
 *             max_nbasis, &charges[0], &centers[0, 0], ncharge, mu
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_centers));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_centers));
  __Pyx_GOTREF(__pyx_v_self->_centers);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_centers));
  __pyx_v_self->_centers = ((PyArrayObject *)__pyx_v_centers);

  /* "horton/gbasis/cext.pyx":1884
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2ErfAttractionIntegral(
 *             max_nbasis, &charges[0], &centers[0, 0], ncharge, mu             # <<<<<<<<<<<<<<
 *         ))
 * 
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_charges.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_charges.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1884, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_centers.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_centers.diminfo[0].shape)) __pyx_t_5 = 0;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_centers.diminfo[1].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 1;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_centers.diminfo[1].shape)) __pyx_t_5 = 1;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1884, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1883
 *         self._charges = charges
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2ErfAttractionIntegral(             # <<<<<<<<<<<<<<
 *             max_nbasis, &charges[0], &centers[0, 0], ncharge, mu
 *         ))
 */
  try {
    __pyx_t_8 = new GB2ErfAttractionIntegral(__pyx_v_max_nbasis, (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_charges.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_charges.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_centers.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_centers.diminfo[0].strides, __pyx_t_7, __pyx_pybuffernd_centers.diminfo[1].strides))), __pyx_v_ncharge, __pyx_v_mu);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1883, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB2Integral *)__pyx_t_8);

  /* "horton/gbasis/cext.pyx":1874
 *     cdef np.ndarray _centers
 * 
 *     def __cinit__(self, long max_nbasis,             # <<<<<<<<<<<<<<
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None, double mu):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_centers.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB2ErfAttractionIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_centers.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1888
 * 
 *     property mu:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB2ErfAttractionIntegral*>self._this).get_mu()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2mu_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2mu_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2mu___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2mu___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1889
 *     property mu:
 *         def __get__(self):
 *             return (<ints.GB2ErfAttractionIntegral*>self._this).get_mu()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((GB2ErfAttractionIntegral *)__pyx_v_self->__pyx_base._this)->get_mu()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1888
 * 
 *     property mu:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB2ErfAttractionIntegral*>self._this).get_mu()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2ErfAttractionIntegral.mu.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2__reduce_cython__[] = "GB2ErfAttractionIntegral.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2ErfAttractionIntegral.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_4__setstate_cython__[] = "GB2ErfAttractionIntegral.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2ErfAttractionIntegral.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1898
 *     cdef np.ndarray _centers
 * 
 *     def __cinit__(self, long max_nbasis,             # <<<<<<<<<<<<<<
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None, double c,
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  PyArrayObject *__pyx_v_charges = 0;
  PyArrayObject *__pyx_v_centers = 0;
  double __pyx_v_c;
  double __pyx_v_alpha;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,&__pyx_n_s_charges,&__pyx_n_s_centers,&__pyx_n_s_c,&__pyx_n_s_alpha,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_charges)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 1); __PYX_ERR(0, 1898, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_centers)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 2); __PYX_ERR(0, 1898, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 3); __PYX_ERR(0, 1898, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, 4); __PYX_ERR(0, 1898, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 1898, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1898, __pyx_L3_error)
    __pyx_v_charges = ((PyArrayObject *)values[1]);
    __pyx_v_centers = ((PyArrayObject *)values[2]);
    __pyx_v_c = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_c == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1900, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1901, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1898, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB2GaussAttractionIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_charges), __pyx_ptype_5numpy_ndarray, 0, "charges", 0))) __PYX_ERR(0, 1899, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_centers), __pyx_ptype_5numpy_ndarray, 0, "centers", 0))) __PYX_ERR(0, 1900, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)__pyx_v_self), __pyx_v_max_nbasis, __pyx_v_charges, __pyx_v_centers, __pyx_v_c, __pyx_v_alpha);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self, long __pyx_v_max_nbasis, PyArrayObject *__pyx_v_charges, PyArrayObject *__pyx_v_centers, double __pyx_v_c, double __pyx_v_alpha) {
  long __pyx_v_ncharge;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_centers;
  __Pyx_Buffer __pyx_pybuffer_centers;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_charges;
  __Pyx_Buffer __pyx_pybuffer_charges;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  GB2GaussAttractionIntegral *__pyx_t_8;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_charges.pybuffer.buf = NULL;
  __pyx_pybuffer_charges.refcount = 0;
  __pyx_pybuffernd_charges.data = NULL;
  __pyx_pybuffernd_charges.rcbuffer = &__pyx_pybuffer_charges;
  __pyx_pybuffer_centers.pybuffer.buf = NULL;
  __pyx_pybuffer_centers.refcount = 0;
  __pyx_pybuffernd_centers.data = NULL;
  __pyx_pybuffernd_centers.rcbuffer = &__pyx_pybuffer_centers;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_charges.rcbuffer->pybuffer, (PyObject*)__pyx_v_charges, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1898, __pyx_L1_error)
  }
  __pyx_pybuffernd_charges.diminfo[0].strides = __pyx_pybuffernd_charges.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_charges.diminfo[0].shape = __pyx_pybuffernd_charges.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_centers.rcbuffer->pybuffer, (PyObject*)__pyx_v_centers, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1898, __pyx_L1_error)
  }
  __pyx_pybuffernd_centers.diminfo[0].strides = __pyx_pybuffernd_centers.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_centers.diminfo[0].shape = __pyx_pybuffernd_centers.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_centers.diminfo[1].strides = __pyx_pybuffernd_centers.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_centers.diminfo[1].shape = __pyx_pybuffernd_centers.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":1902
 *                   np.ndarray[double, ndim=2] centers not None, double c,
 *                   double alpha):
 *         assert charges.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_charges), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1902, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1902, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1902, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1903
 *                   double alpha):
 *         assert charges.flags['C_CONTIGUOUS']
 *         cdef long ncharge = charges.shape[0]             # <<<<<<<<<<<<<<
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge
 */
  __pyx_v_ncharge = (__pyx_v_charges->dimensions[0]);

  /* "horton/gbasis/cext.pyx":1904
 *         assert charges.flags['C_CONTIGUOUS']
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_centers), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1904, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1904, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1905
 *         cdef long ncharge = charges.shape[0]
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge             # <<<<<<<<<<<<<<
 *         self._charges = charges
 *         self._centers = centers
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_centers->dimensions[0]) == __pyx_v_ncharge) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1905, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1906
 *         assert centers.flags['C_CONTIGUOUS']
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges             # <<<<<<<<<<<<<<
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2GaussAttractionIntegral(
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_charges));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_charges));
  __Pyx_GOTREF(__pyx_v_self->_charges);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_charges));
  __pyx_v_self->_charges = ((PyArrayObject *)__pyx_v_charges);

  /* "horton/gbasis/cext.pyx":1907
 *         assert centers.shape[0] == ncharge
 *         self._charges = charges
 *         self._centers = centers             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB2Integral*>(new ints.GB2GaussAttractionIntegral(
 *             max_nbasis, &charges[0], &centers[0, 0], ncharge, c, alpha
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_centers));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_centers));
  __Pyx_GOTREF(__pyx_v_self->_centers);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_centers));
  __pyx_v_self->_centers = ((PyArrayObject *)__pyx_v_centers);

  /* "horton/gbasis/cext.pyx":1909
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2GaussAttractionIntegral(
 *             max_nbasis, &charges[0], &centers[0, 0], ncharge, c, alpha             # <<<<<<<<<<<<<<
 *         ))
 * 
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_charges.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_charges.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1909, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_centers.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_centers.diminfo[0].shape)) __pyx_t_5 = 0;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_centers.diminfo[1].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 1;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_centers.diminfo[1].shape)) __pyx_t_5 = 1;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1909, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1908
 *         self._charges = charges
 *         self._centers = centers
 *         self._this = <ints.GB2Integral*>(new ints.GB2GaussAttractionIntegral(             # <<<<<<<<<<<<<<
 *             max_nbasis, &charges[0], &centers[0, 0], ncharge, c, alpha
 *         ))
 */
  try {
    __pyx_t_8 = new GB2GaussAttractionIntegral(__pyx_v_max_nbasis, (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_charges.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_charges.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_centers.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_centers.diminfo[0].strides, __pyx_t_7, __pyx_pybuffernd_centers.diminfo[1].strides))), __pyx_v_ncharge, __pyx_v_c, __pyx_v_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1908, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB2Integral *)__pyx_t_8);

  /* "horton/gbasis/cext.pyx":1898
 *     cdef np.ndarray _centers
 * 
 *     def __cinit__(self, long max_nbasis,             # <<<<<<<<<<<<<<
 *                   np.ndarray[double, ndim=1] charges not None,
 *                   np.ndarray[double, ndim=2] centers not None, double c,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_centers.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB2GaussAttractionIntegral.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_centers.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_charges.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1913
 * 
 *     property c:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB2GaussAttractionIntegral*>self._this).get_c()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1c_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1c_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1c___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1c___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1914
 *     property c:
 *         def __get__(self):
 *             return (<ints.GB2GaussAttractionIntegral*>self._this).get_c()             # <<<<<<<<<<<<<<
 * 
 *     property alpha:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((GB2GaussAttractionIntegral *)__pyx_v_self->__pyx_base._this)->get_c()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1913
 * 
 *     property c:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB2GaussAttractionIntegral*>self._this).get_c()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2GaussAttractionIntegral.c.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1917
 * 
 *     property alpha:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB2GaussAttractionIntegral*>self._this).get_alpha()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5alpha___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5alpha___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1918
 *     property alpha:
 *         def __get__(self):
 *             return (<ints.GB2GaussAttractionIntegral*>self._this).get_alpha()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((GB2GaussAttractionIntegral *)__pyx_v_self->__pyx_base._this)->get_alpha()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1917
 * 
 *     property alpha:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB2GaussAttractionIntegral*>self._this).get_alpha()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2GaussAttractionIntegral.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_2__reduce_cython__[] = "GB2GaussAttractionIntegral.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2GaussAttractionIntegral.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_4__setstate_cython__[] = "GB2GaussAttractionIntegral.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB2GaussAttractionIntegral.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1922
 * 
 * ints.libint2_static_init()
 * def libint2_static_cleanup():             # <<<<<<<<<<<<<<
 *     ints.libint2_static_cleanup()
 * atexit.register(libint2_static_cleanup)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_41libint2_static_cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_40libint2_static_cleanup[] = "libint2_static_cleanup()";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_41libint2_static_cleanup = {"libint2_static_cleanup", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_41libint2_static_cleanup, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_40libint2_static_cleanup};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_41libint2_static_cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("libint2_static_cleanup (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_40libint2_static_cleanup(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_40libint2_static_cleanup(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("libint2_static_cleanup", 0);

  /* "horton/gbasis/cext.pyx":1923
 * ints.libint2_static_init()
 * def libint2_static_cleanup():
 *     ints.libint2_static_cleanup()             # <<<<<<<<<<<<<<
 * atexit.register(libint2_static_cleanup)
 * 
 */
  libint2_static_cleanup();

  /* "horton/gbasis/cext.pyx":1922
 * 
 * ints.libint2_static_init()
 * def libint2_static_cleanup():             # <<<<<<<<<<<<<<
 *     ints.libint2_static_cleanup()
 * atexit.register(libint2_static_cleanup)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1931
 *     cdef ints.GB4Integral* _this
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_11GB4Integral_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_11GB4Integral_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_11GB4Integral___dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_11GB4Integral___dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":1932
 * 
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 * 
 *     property nwork:
 */
  delete __pyx_v_self->_this;

  /* "horton/gbasis/cext.pyx":1931
 *     cdef ints.GB4Integral* _this
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":1935
 * 
 *     property nwork:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nwork()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_5nwork_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_5nwork_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_5nwork___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_5nwork___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1936
 *     property nwork:
 *         def __get__(self):
 *             return self._this.get_nwork()             # <<<<<<<<<<<<<<
 * 
 *     property max_shell_type:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_nwork()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1935
 * 
 *     property nwork:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nwork()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.nwork.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1939
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_14max_shell_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_14max_shell_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_14max_shell_type___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1940
 *     property max_shell_type:
 *         def __get__(self):
 *             return self._this.get_max_shell_type()             # <<<<<<<<<<<<<<
 * 
 *     property max_nbasis:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_max_shell_type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1939
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.max_shell_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1943
 * 
 *     property max_nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_nbasis()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_10max_nbasis_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_10max_nbasis_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_10max_nbasis___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_10max_nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":1944
 *     property max_nbasis:
 *         def __get__(self):
 *             return self._this.get_max_nbasis()             # <<<<<<<<<<<<<<
 * 
 *     def reset(self, long shell_type0, long shell_type1, long shell_type2, long shell_type3,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_max_nbasis()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1943
 * 
 *     property max_nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_nbasis()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.max_nbasis.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1946
 *             return self._this.get_max_nbasis()
 * 
 *     def reset(self, long shell_type0, long shell_type1, long shell_type2, long shell_type3,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] r1 not None,
 *               np.ndarray[double, ndim=1] r2 not None, np.ndarray[double, ndim=1] r3 not None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_3reset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_2reset[] = "GB4Integral.reset(self, long shell_type0, long shell_type1, long shell_type2, long shell_type3, ndarray r0, ndarray r1, ndarray r2, ndarray r3)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_3reset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_shell_type0;
  long __pyx_v_shell_type1;
  long __pyx_v_shell_type2;
  long __pyx_v_shell_type3;
  PyArrayObject *__pyx_v_r0 = 0;
  PyArrayObject *__pyx_v_r1 = 0;
  PyArrayObject *__pyx_v_r2 = 0;
  PyArrayObject *__pyx_v_r3 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shell_type0,&__pyx_n_s_shell_type1,&__pyx_n_s_shell_type2,&__pyx_n_s_shell_type3,&__pyx_n_s_r0,&__pyx_n_s_r1,&__pyx_n_s_r2,&__pyx_n_s_r3,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, 1); __PYX_ERR(0, 1946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, 2); __PYX_ERR(0, 1946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, 3); __PYX_ERR(0, 1946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, 4); __PYX_ERR(0, 1946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, 5); __PYX_ERR(0, 1946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, 6); __PYX_ERR(0, 1946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, 7); __PYX_ERR(0, 1946, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset") < 0)) __PYX_ERR(0, 1946, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_shell_type0 = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_shell_type0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1946, __pyx_L3_error)
    __pyx_v_shell_type1 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_shell_type1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1946, __pyx_L3_error)
    __pyx_v_shell_type2 = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_shell_type2 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1946, __pyx_L3_error)
    __pyx_v_shell_type3 = __Pyx_PyInt_As_long(values[3]); if (unlikely((__pyx_v_shell_type3 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 1946, __pyx_L3_error)
    __pyx_v_r0 = ((PyArrayObject *)values[4]);
    __pyx_v_r1 = ((PyArrayObject *)values[5]);
    __pyx_v_r2 = ((PyArrayObject *)values[6]);
    __pyx_v_r3 = ((PyArrayObject *)values[7]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1946, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r0), __pyx_ptype_5numpy_ndarray, 0, "r0", 0))) __PYX_ERR(0, 1947, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r1), __pyx_ptype_5numpy_ndarray, 0, "r1", 0))) __PYX_ERR(0, 1947, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r2), __pyx_ptype_5numpy_ndarray, 0, "r2", 0))) __PYX_ERR(0, 1948, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r3), __pyx_ptype_5numpy_ndarray, 0, "r3", 0))) __PYX_ERR(0, 1948, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_2reset(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self), __pyx_v_shell_type0, __pyx_v_shell_type1, __pyx_v_shell_type2, __pyx_v_shell_type3, __pyx_v_r0, __pyx_v_r1, __pyx_v_r2, __pyx_v_r3);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_2reset(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, long __pyx_v_shell_type0, long __pyx_v_shell_type1, long __pyx_v_shell_type2, long __pyx_v_shell_type3, PyArrayObject *__pyx_v_r0, PyArrayObject *__pyx_v_r1, PyArrayObject *__pyx_v_r2, PyArrayObject *__pyx_v_r3) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r0;
  __Pyx_Buffer __pyx_pybuffer_r0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r1;
  __Pyx_Buffer __pyx_pybuffer_r1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r2;
  __Pyx_Buffer __pyx_pybuffer_r2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r3;
  __Pyx_Buffer __pyx_pybuffer_r3;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("reset", 0);
  __pyx_pybuffer_r0.pybuffer.buf = NULL;
  __pyx_pybuffer_r0.refcount = 0;
  __pyx_pybuffernd_r0.data = NULL;
  __pyx_pybuffernd_r0.rcbuffer = &__pyx_pybuffer_r0;
  __pyx_pybuffer_r1.pybuffer.buf = NULL;
  __pyx_pybuffer_r1.refcount = 0;
  __pyx_pybuffernd_r1.data = NULL;
  __pyx_pybuffernd_r1.rcbuffer = &__pyx_pybuffer_r1;
  __pyx_pybuffer_r2.pybuffer.buf = NULL;
  __pyx_pybuffer_r2.refcount = 0;
  __pyx_pybuffernd_r2.data = NULL;
  __pyx_pybuffernd_r2.rcbuffer = &__pyx_pybuffer_r2;
  __pyx_pybuffer_r3.pybuffer.buf = NULL;
  __pyx_pybuffer_r3.refcount = 0;
  __pyx_pybuffernd_r3.data = NULL;
  __pyx_pybuffernd_r3.rcbuffer = &__pyx_pybuffer_r3;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r0.rcbuffer->pybuffer, (PyObject*)__pyx_v_r0, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1946, __pyx_L1_error)
  }
  __pyx_pybuffernd_r0.diminfo[0].strides = __pyx_pybuffernd_r0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r0.diminfo[0].shape = __pyx_pybuffernd_r0.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r1.rcbuffer->pybuffer, (PyObject*)__pyx_v_r1, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1946, __pyx_L1_error)
  }
  __pyx_pybuffernd_r1.diminfo[0].strides = __pyx_pybuffernd_r1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r1.diminfo[0].shape = __pyx_pybuffernd_r1.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r2.rcbuffer->pybuffer, (PyObject*)__pyx_v_r2, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1946, __pyx_L1_error)
  }
  __pyx_pybuffernd_r2.diminfo[0].strides = __pyx_pybuffernd_r2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r2.diminfo[0].shape = __pyx_pybuffernd_r2.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r3.rcbuffer->pybuffer, (PyObject*)__pyx_v_r3, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1946, __pyx_L1_error)
  }
  __pyx_pybuffernd_r3.diminfo[0].strides = __pyx_pybuffernd_r3.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r3.diminfo[0].shape = __pyx_pybuffernd_r3.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1949
 *               np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] r1 not None,
 *               np.ndarray[double, ndim=1] r2 not None, np.ndarray[double, ndim=1] r3 not None):
 *         assert r0.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert r0.shape[0] == 3
 *         assert r1.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_r0), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1949, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1950
 *               np.ndarray[double, ndim=1] r2 not None, np.ndarray[double, ndim=1] r3 not None):
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3             # <<<<<<<<<<<<<<
 *         assert r1.flags['C_CONTIGUOUS']
 *         assert r1.shape[0] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_r0->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1950, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1951
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3
 *         assert r1.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert r1.shape[0] == 3
 *         assert r2.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_r1), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1951, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1952
 *         assert r0.shape[0] == 3
 *         assert r1.flags['C_CONTIGUOUS']
 *         assert r1.shape[0] == 3             # <<<<<<<<<<<<<<
 *         assert r2.flags['C_CONTIGUOUS']
 *         assert r2.shape[0] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_r1->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1952, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1953
 *         assert r1.flags['C_CONTIGUOUS']
 *         assert r1.shape[0] == 3
 *         assert r2.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert r2.shape[0] == 3
 *         assert r3.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_r2), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1953, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1954
 *         assert r1.shape[0] == 3
 *         assert r2.flags['C_CONTIGUOUS']
 *         assert r2.shape[0] == 3             # <<<<<<<<<<<<<<
 *         assert r3.flags['C_CONTIGUOUS']
 *         assert r3.shape[0] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_r2->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1954, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1955
 *         assert r2.flags['C_CONTIGUOUS']
 *         assert r2.shape[0] == 3
 *         assert r3.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert r3.shape[0] == 3
 *         self._this.reset(shell_type0, shell_type1, shell_type2, shell_type3,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_r3), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1955, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1955, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1956
 *         assert r2.shape[0] == 3
 *         assert r3.flags['C_CONTIGUOUS']
 *         assert r3.shape[0] == 3             # <<<<<<<<<<<<<<
 *         self._this.reset(shell_type0, shell_type1, shell_type2, shell_type3,
 *                          <double*>r0.data, <double*>r1.data, <double*>r2.data, <double*>r3.data)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_r3->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1956, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1957
 *         assert r3.flags['C_CONTIGUOUS']
 *         assert r3.shape[0] == 3
 *         self._this.reset(shell_type0, shell_type1, shell_type2, shell_type3,             # <<<<<<<<<<<<<<
 *                          <double*>r0.data, <double*>r1.data, <double*>r2.data, <double*>r3.data)
 * 
 */
  try {
    __pyx_v_self->_this->reset(__pyx_v_shell_type0, __pyx_v_shell_type1, __pyx_v_shell_type2, __pyx_v_shell_type3, ((double *)__pyx_v_r0->data), ((double *)__pyx_v_r1->data), ((double *)__pyx_v_r2->data), ((double *)__pyx_v_r3->data));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1957, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1946
 *             return self._this.get_max_nbasis()
 * 
 *     def reset(self, long shell_type0, long shell_type1, long shell_type2, long shell_type3,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] r1 not None,
 *               np.ndarray[double, ndim=1] r2 not None, np.ndarray[double, ndim=1] r3 not None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r0.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r2.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r3.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r0.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r2.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r3.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1960
 *                          <double*>r0.data, <double*>r1.data, <double*>r2.data, <double*>r3.data)
 * 
 *     def add(self, double coeff, double alpha0, double alpha1, double alpha2, double alpha3,             # <<<<<<<<<<<<<<
 *             np.ndarray[double, ndim=1] scales0 not None, np.ndarray[double, ndim=1] scales1 not None,
 *             np.ndarray[double, ndim=1] scales2 not None, np.ndarray[double, ndim=1] scales3 not None):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_4add[] = "GB4Integral.add(self, double coeff, double alpha0, double alpha1, double alpha2, double alpha3, ndarray scales0, ndarray scales1, ndarray scales2, ndarray scales3)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_coeff;
  double __pyx_v_alpha0;
  double __pyx_v_alpha1;
  double __pyx_v_alpha2;
  double __pyx_v_alpha3;
  PyArrayObject *__pyx_v_scales0 = 0;
  PyArrayObject *__pyx_v_scales1 = 0;
  PyArrayObject *__pyx_v_scales2 = 0;
  PyArrayObject *__pyx_v_scales3 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeff,&__pyx_n_s_alpha0,&__pyx_n_s_alpha1,&__pyx_n_s_alpha2,&__pyx_n_s_alpha3,&__pyx_n_s_scales0,&__pyx_n_s_scales1,&__pyx_n_s_scales2,&__pyx_n_s_scales3,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 1); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 2); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 3); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 4); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scales0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 5); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scales1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 6); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scales2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 7); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scales3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, 8); __PYX_ERR(0, 1960, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(0, 1960, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_coeff = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_coeff == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1960, __pyx_L3_error)
    __pyx_v_alpha0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1960, __pyx_L3_error)
    __pyx_v_alpha1 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1960, __pyx_L3_error)
    __pyx_v_alpha2 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_alpha2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1960, __pyx_L3_error)
    __pyx_v_alpha3 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_alpha3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1960, __pyx_L3_error)
    __pyx_v_scales0 = ((PyArrayObject *)values[5]);
    __pyx_v_scales1 = ((PyArrayObject *)values[6]);
    __pyx_v_scales2 = ((PyArrayObject *)values[7]);
    __pyx_v_scales3 = ((PyArrayObject *)values[8]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1960, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scales0), __pyx_ptype_5numpy_ndarray, 0, "scales0", 0))) __PYX_ERR(0, 1961, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scales1), __pyx_ptype_5numpy_ndarray, 0, "scales1", 0))) __PYX_ERR(0, 1961, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scales2), __pyx_ptype_5numpy_ndarray, 0, "scales2", 0))) __PYX_ERR(0, 1962, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scales3), __pyx_ptype_5numpy_ndarray, 0, "scales3", 0))) __PYX_ERR(0, 1962, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_4add(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self), __pyx_v_coeff, __pyx_v_alpha0, __pyx_v_alpha1, __pyx_v_alpha2, __pyx_v_alpha3, __pyx_v_scales0, __pyx_v_scales1, __pyx_v_scales2, __pyx_v_scales3);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_4add(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, double __pyx_v_coeff, double __pyx_v_alpha0, double __pyx_v_alpha1, double __pyx_v_alpha2, double __pyx_v_alpha3, PyArrayObject *__pyx_v_scales0, PyArrayObject *__pyx_v_scales1, PyArrayObject *__pyx_v_scales2, PyArrayObject *__pyx_v_scales3) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_scales0;
  __Pyx_Buffer __pyx_pybuffer_scales0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_scales1;
  __Pyx_Buffer __pyx_pybuffer_scales1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_scales2;
  __Pyx_Buffer __pyx_pybuffer_scales2;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_scales3;
  __Pyx_Buffer __pyx_pybuffer_scales3;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("add", 0);
  __pyx_pybuffer_scales0.pybuffer.buf = NULL;
  __pyx_pybuffer_scales0.refcount = 0;
  __pyx_pybuffernd_scales0.data = NULL;
  __pyx_pybuffernd_scales0.rcbuffer = &__pyx_pybuffer_scales0;
  __pyx_pybuffer_scales1.pybuffer.buf = NULL;
  __pyx_pybuffer_scales1.refcount = 0;
  __pyx_pybuffernd_scales1.data = NULL;
  __pyx_pybuffernd_scales1.rcbuffer = &__pyx_pybuffer_scales1;
  __pyx_pybuffer_scales2.pybuffer.buf = NULL;
  __pyx_pybuffer_scales2.refcount = 0;
  __pyx_pybuffernd_scales2.data = NULL;
  __pyx_pybuffernd_scales2.rcbuffer = &__pyx_pybuffer_scales2;
  __pyx_pybuffer_scales3.pybuffer.buf = NULL;
  __pyx_pybuffer_scales3.refcount = 0;
  __pyx_pybuffernd_scales3.data = NULL;
  __pyx_pybuffernd_scales3.rcbuffer = &__pyx_pybuffer_scales3;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer, (PyObject*)__pyx_v_scales0, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1960, __pyx_L1_error)
  }
  __pyx_pybuffernd_scales0.diminfo[0].strides = __pyx_pybuffernd_scales0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_scales0.diminfo[0].shape = __pyx_pybuffernd_scales0.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_scales1.rcbuffer->pybuffer, (PyObject*)__pyx_v_scales1, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1960, __pyx_L1_error)
  }
  __pyx_pybuffernd_scales1.diminfo[0].strides = __pyx_pybuffernd_scales1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_scales1.diminfo[0].shape = __pyx_pybuffernd_scales1.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_scales2.rcbuffer->pybuffer, (PyObject*)__pyx_v_scales2, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1960, __pyx_L1_error)
  }
  __pyx_pybuffernd_scales2.diminfo[0].strides = __pyx_pybuffernd_scales2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_scales2.diminfo[0].shape = __pyx_pybuffernd_scales2.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_scales3.rcbuffer->pybuffer, (PyObject*)__pyx_v_scales3, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1960, __pyx_L1_error)
  }
  __pyx_pybuffernd_scales3.diminfo[0].strides = __pyx_pybuffernd_scales3.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_scales3.diminfo[0].shape = __pyx_pybuffernd_scales3.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":1963
 *             np.ndarray[double, ndim=1] scales0 not None, np.ndarray[double, ndim=1] scales1 not None,
 *             np.ndarray[double, ndim=1] scales2 not None, np.ndarray[double, ndim=1] scales3 not None):
 *         assert scales0.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         assert scales1.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scales0), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1963, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1964
 *             np.ndarray[double, ndim=1] scales2 not None, np.ndarray[double, ndim=1] scales3 not None):
 *         assert scales0.flags['C_CONTIGUOUS']
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))             # <<<<<<<<<<<<<<
 *         assert scales1.flags['C_CONTIGUOUS']
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_scales0->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = labs(__pyx_v_self->_this->get_shell_type0()); if (unlikely(__pyx_t_5 == ((long)-1))) __PYX_ERR(0, 1964, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1964, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1964, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1965
 *         assert scales0.flags['C_CONTIGUOUS']
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         assert scales1.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))
 *         assert scales2.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scales1), __pyx_n_s_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1965, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1966
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         assert scales1.flags['C_CONTIGUOUS']
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))             # <<<<<<<<<<<<<<
 *         assert scales2.flags['C_CONTIGUOUS']
 *         assert scales2.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type2()))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_scales1->dimensions[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = labs(__pyx_v_self->_this->get_shell_type1()); if (unlikely(__pyx_t_5 == ((long)-1))) __PYX_ERR(0, 1966, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1966, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1966, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1967
 *         assert scales1.flags['C_CONTIGUOUS']
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))
 *         assert scales2.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert scales2.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type2()))
 *         assert scales3.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scales2), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1967, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1968
 *         assert scales1.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type1()))
 *         assert scales2.flags['C_CONTIGUOUS']
 *         assert scales2.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type2()))             # <<<<<<<<<<<<<<
 *         assert scales3.flags['C_CONTIGUOUS']
 *         assert scales3.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type3()))
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_4 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_scales2->dimensions[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = labs(__pyx_v_self->_this->get_shell_type2()); if (unlikely(__pyx_t_5 == ((long)-1))) __PYX_ERR(0, 1968, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1968, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1968, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1968, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1969
 *         assert scales2.flags['C_CONTIGUOUS']
 *         assert scales2.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type2()))
 *         assert scales3.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert scales3.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type3()))
 *         self._this.add(coeff, alpha0, alpha1, alpha2, alpha3,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scales3), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1969, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1970
 *         assert scales2.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type2()))
 *         assert scales3.flags['C_CONTIGUOUS']
 *         assert scales3.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type3()))             # <<<<<<<<<<<<<<
 *         self._this.add(coeff, alpha0, alpha1, alpha2, alpha3,
 *                        <double*>scales0.data, <double*>scales1.data,
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_scales3->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = labs(__pyx_v_self->_this->get_shell_type3()); if (unlikely(__pyx_t_5 == ((long)-1))) __PYX_ERR(0, 1970, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1970, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 1970, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1970, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1971
 *         assert scales3.flags['C_CONTIGUOUS']
 *         assert scales3.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type3()))
 *         self._this.add(coeff, alpha0, alpha1, alpha2, alpha3,             # <<<<<<<<<<<<<<
 *                        <double*>scales0.data, <double*>scales1.data,
 *                        <double*>scales2.data, <double*>scales3.data)
 */
  __pyx_v_self->_this->add(__pyx_v_coeff, __pyx_v_alpha0, __pyx_v_alpha1, __pyx_v_alpha2, __pyx_v_alpha3, ((double *)__pyx_v_scales0->data), ((double *)__pyx_v_scales1->data), ((double *)__pyx_v_scales2->data), ((double *)__pyx_v_scales3->data));

  /* "horton/gbasis/cext.pyx":1960
 *                          <double*>r0.data, <double*>r1.data, <double*>r2.data, <double*>r3.data)
 * 
 *     def add(self, double coeff, double alpha0, double alpha1, double alpha2, double alpha3,             # <<<<<<<<<<<<<<
 *             np.ndarray[double, ndim=1] scales0 not None, np.ndarray[double, ndim=1] scales1 not None,
 *             np.ndarray[double, ndim=1] scales2 not None, np.ndarray[double, ndim=1] scales3 not None):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales2.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales3.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales2.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales3.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1975
 *                        <double*>scales2.data, <double*>scales3.data)
 * 
 *     def cart_to_pure(self):             # <<<<<<<<<<<<<<
 *         self._this.cart_to_pure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_7cart_to_pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_6cart_to_pure[] = "GB4Integral.cart_to_pure(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_7cart_to_pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cart_to_pure (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_6cart_to_pure(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_6cart_to_pure(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cart_to_pure", 0);

  /* "horton/gbasis/cext.pyx":1976
 * 
 *     def cart_to_pure(self):
 *         self._this.cart_to_pure()             # <<<<<<<<<<<<<<
 * 
 *     def get_work(self, shape0, shape1, shape2, shape3):
 */
  try {
    __pyx_v_self->_this->cart_to_pure();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1976, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":1975
 *                        <double*>scales2.data, <double*>scales3.data)
 * 
 *     def cart_to_pure(self):             # <<<<<<<<<<<<<<
 *         self._this.cart_to_pure()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.cart_to_pure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":1978
 *         self._this.cart_to_pure()
 * 
 *     def get_work(self, shape0, shape1, shape2, shape3):             # <<<<<<<<<<<<<<
 *         '''This returns a **copy** of the c++ work array.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_9get_work(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_8get_work[] = "GB4Integral.get_work(self, shape0, shape1, shape2, shape3)\nThis returns a **copy** of the c++ work array.\n\n           Returning a numpy array with a buffer created in c++ is dangerous.\n           If the c++ array becomes deallocated, the numpy array may still\n           point to the deallocated memory. For that reason, a copy is returned.\n           Speed is not an issue as this class is only used for testing.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_9get_work(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape0 = 0;
  PyObject *__pyx_v_shape1 = 0;
  PyObject *__pyx_v_shape2 = 0;
  PyObject *__pyx_v_shape3 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_work (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape0,&__pyx_n_s_shape1,&__pyx_n_s_shape2,&__pyx_n_s_shape3,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_work", 1, 4, 4, 1); __PYX_ERR(0, 1978, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_work", 1, 4, 4, 2); __PYX_ERR(0, 1978, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape3)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_work", 1, 4, 4, 3); __PYX_ERR(0, 1978, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_work") < 0)) __PYX_ERR(0, 1978, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_shape0 = values[0];
    __pyx_v_shape1 = values[1];
    __pyx_v_shape2 = values[2];
    __pyx_v_shape3 = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_work", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1978, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.get_work", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_8get_work(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self), __pyx_v_shape0, __pyx_v_shape1, __pyx_v_shape2, __pyx_v_shape3);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_8get_work(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, PyObject *__pyx_v_shape0, PyObject *__pyx_v_shape1, PyObject *__pyx_v_shape2, PyObject *__pyx_v_shape3) {
  npy_intp __pyx_v_shape[4];
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  npy_intp __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_work", 0);

  /* "horton/gbasis/cext.pyx":1987
 *         '''
 *         cdef np.npy_intp shape[4]
 *         assert shape0 > 0             # <<<<<<<<<<<<<<
 *         assert shape1 > 0
 *         assert shape2 > 0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape0, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1987, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1987, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1987, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1988
 *         cdef np.npy_intp shape[4]
 *         assert shape0 > 0
 *         assert shape1 > 0             # <<<<<<<<<<<<<<
 *         assert shape2 > 0
 *         assert shape3 > 0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1988, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1988, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1988, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1989
 *         assert shape0 > 0
 *         assert shape1 > 0
 *         assert shape2 > 0             # <<<<<<<<<<<<<<
 *         assert shape3 > 0
 *         assert shape0 <= self.max_nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape2, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1989, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1989, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1989, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1990
 *         assert shape1 > 0
 *         assert shape2 > 0
 *         assert shape3 > 0             # <<<<<<<<<<<<<<
 *         assert shape0 <= self.max_nbasis
 *         assert shape1 <= self.max_nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1990, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1990, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1991
 *         assert shape2 > 0
 *         assert shape3 > 0
 *         assert shape0 <= self.max_nbasis             # <<<<<<<<<<<<<<
 *         assert shape1 <= self.max_nbasis
 *         assert shape2 <= self.max_nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_shape0, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1991, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1991, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1992
 *         assert shape3 > 0
 *         assert shape0 <= self.max_nbasis
 *         assert shape1 <= self.max_nbasis             # <<<<<<<<<<<<<<
 *         assert shape2 <= self.max_nbasis
 *         assert shape3 <= self.max_nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape1, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1992, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1992, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1993
 *         assert shape0 <= self.max_nbasis
 *         assert shape1 <= self.max_nbasis
 *         assert shape2 <= self.max_nbasis             # <<<<<<<<<<<<<<
 *         assert shape3 <= self.max_nbasis
 *         shape[0] = shape0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_shape2, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1993, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1994
 *         assert shape1 <= self.max_nbasis
 *         assert shape2 <= self.max_nbasis
 *         assert shape3 <= self.max_nbasis             # <<<<<<<<<<<<<<
 *         shape[0] = shape0
 *         shape[1] = shape1
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape3, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1994, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1994, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":1995
 *         assert shape2 <= self.max_nbasis
 *         assert shape3 <= self.max_nbasis
 *         shape[0] = shape0             # <<<<<<<<<<<<<<
 *         shape[1] = shape1
 *         shape[2] = shape2
 */
  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_shape0); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1995, __pyx_L1_error)
  (__pyx_v_shape[0]) = __pyx_t_4;

  /* "horton/gbasis/cext.pyx":1996
 *         assert shape3 <= self.max_nbasis
 *         shape[0] = shape0
 *         shape[1] = shape1             # <<<<<<<<<<<<<<
 *         shape[2] = shape2
 *         shape[3] = shape3
 */
  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_shape1); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1996, __pyx_L1_error)
  (__pyx_v_shape[1]) = __pyx_t_4;

  /* "horton/gbasis/cext.pyx":1997
 *         shape[0] = shape0
 *         shape[1] = shape1
 *         shape[2] = shape2             # <<<<<<<<<<<<<<
 *         shape[3] = shape3
 *         tmp = np.PyArray_SimpleNewFromData(4, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 */
  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_shape2); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1997, __pyx_L1_error)
  (__pyx_v_shape[2]) = __pyx_t_4;

  /* "horton/gbasis/cext.pyx":1998
 *         shape[1] = shape1
 *         shape[2] = shape2
 *         shape[3] = shape3             # <<<<<<<<<<<<<<
 *         tmp = np.PyArray_SimpleNewFromData(4, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         return tmp.copy()
 */
  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_shape3); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1998, __pyx_L1_error)
  (__pyx_v_shape[3]) = __pyx_t_4;

  /* "horton/gbasis/cext.pyx":1999
 *         shape[2] = shape2
 *         shape[3] = shape3
 *         tmp = np.PyArray_SimpleNewFromData(4, shape, np.NPY_DOUBLE, <void*> self._this.get_work())             # <<<<<<<<<<<<<<
 *         return tmp.copy()
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(4, __pyx_v_shape, NPY_DOUBLE, ((void *)__pyx_v_self->_this->get_work())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":2000
 *         shape[3] = shape3
 *         tmp = np.PyArray_SimpleNewFromData(4, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         return tmp.copy()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":1978
 *         self._this.cart_to_pure()
 * 
 *     def get_work(self, shape0, shape1, shape2, shape3):             # <<<<<<<<<<<<<<
 *         '''This returns a **copy** of the c++ work array.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.get_work", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_10__reduce_cython__[] = "GB4Integral.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_10__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_12__setstate_cython__[] = "GB4Integral.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB4Integral_12__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB4Integral_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4Integral.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2006
 *     '''Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4ElectronRepulsionIntegralLibInt(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2006, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2006, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2006, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ElectronRepulsionIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB4ElectronRepulsionIntegralLibInt *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2007
 * 
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <ints.GB4Integral*>(new ints.GB4ElectronRepulsionIntegralLibInt(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB4ElectronRepulsionIntegralLibInt(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2007, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB4Integral *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2006
 *     '''Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4ElectronRepulsionIntegralLibInt(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ElectronRepulsionIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_2__reduce_cython__[] = "GB4ElectronRepulsionIntegralLibInt.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ElectronRepulsionIntegralLibInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_4__setstate_cython__[] = "GB4ElectronRepulsionIntegralLibInt.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ElectronRepulsionIntegralLibInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2013
 *     '''Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis, double mu):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4ErfIntegralLibInt(max_nbasis, mu))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  double __pyx_v_mu;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,&__pyx_n_s_mu,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mu)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 2013, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2013, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2013, __pyx_L3_error)
    __pyx_v_mu = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_mu == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2013, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2013, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ErfIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *)__pyx_v_self), __pyx_v_max_nbasis, __pyx_v_mu);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis, double __pyx_v_mu) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB4ErfIntegralLibInt *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2014
 * 
 *     def __cinit__(self, long max_nbasis, double mu):
 *         self._this = <ints.GB4Integral*>(new ints.GB4ErfIntegralLibInt(max_nbasis, mu))             # <<<<<<<<<<<<<<
 * 
 *     property mu:
 */
  try {
    __pyx_t_1 = new GB4ErfIntegralLibInt(__pyx_v_max_nbasis, __pyx_v_mu);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2014, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB4Integral *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2013
 *     '''Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis, double mu):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4ErfIntegralLibInt(max_nbasis, mu))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ErfIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2017
 * 
 *     property mu:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4ErfIntegralLibInt*>self._this).get_mu()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2mu_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2mu_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2mu___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2mu___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2018
 *     property mu:
 *         def __get__(self):
 *             return (<ints.GB4ErfIntegralLibInt*>self._this).get_mu()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((GB4ErfIntegralLibInt *)__pyx_v_self->__pyx_base._this)->get_mu()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2017
 * 
 *     property mu:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4ErfIntegralLibInt*>self._this).get_mu()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ErfIntegralLibInt.mu.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2__reduce_cython__[] = "GB4ErfIntegralLibInt.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ErfIntegralLibInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_4__setstate_cython__[] = "GB4ErfIntegralLibInt.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4ErfIntegralLibInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2024
 *     '''Wrapper for ints.GB4GaussIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis, double c, double alpha):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4GaussIntegralLibInt(max_nbasis, c, alpha))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  double __pyx_v_c;
  double __pyx_v_alpha;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,&__pyx_n_s_c,&__pyx_n_s_alpha,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 1); __PYX_ERR(0, 2024, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, 2); __PYX_ERR(0, 2024, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2024, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2024, __pyx_L3_error)
    __pyx_v_c = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_c == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2024, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2024, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2024, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4GaussIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *)__pyx_v_self), __pyx_v_max_nbasis, __pyx_v_c, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis, double __pyx_v_c, double __pyx_v_alpha) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB4GaussIntegralLibInt *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2025
 * 
 *     def __cinit__(self, long max_nbasis, double c, double alpha):
 *         self._this = <ints.GB4Integral*>(new ints.GB4GaussIntegralLibInt(max_nbasis, c, alpha))             # <<<<<<<<<<<<<<
 * 
 *     property c:
 */
  try {
    __pyx_t_1 = new GB4GaussIntegralLibInt(__pyx_v_max_nbasis, __pyx_v_c, __pyx_v_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2025, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB4Integral *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2024
 *     '''Wrapper for ints.GB4GaussIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis, double c, double alpha):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4GaussIntegralLibInt(max_nbasis, c, alpha))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4GaussIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2028
 * 
 *     property c:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4GaussIntegralLibInt*>self._this).get_c()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1c_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1c_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1c___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1c___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2029
 *     property c:
 *         def __get__(self):
 *             return (<ints.GB4GaussIntegralLibInt*>self._this).get_c()             # <<<<<<<<<<<<<<
 * 
 *     property alpha:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((GB4GaussIntegralLibInt *)__pyx_v_self->__pyx_base._this)->get_c()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2028
 * 
 *     property c:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4GaussIntegralLibInt*>self._this).get_c()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4GaussIntegralLibInt.c.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2032
 * 
 *     property alpha:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4GaussIntegralLibInt*>self._this).get_alpha()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5alpha___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5alpha___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2033
 *     property alpha:
 *         def __get__(self):
 *             return (<ints.GB4GaussIntegralLibInt*>self._this).get_alpha()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((GB4GaussIntegralLibInt *)__pyx_v_self->__pyx_base._this)->get_alpha()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2032
 * 
 *     property alpha:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4GaussIntegralLibInt*>self._this).get_alpha()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4GaussIntegralLibInt.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_2__reduce_cython__[] = "GB4GaussIntegralLibInt.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4GaussIntegralLibInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_4__setstate_cython__[] = "GB4GaussIntegralLibInt.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4GaussIntegralLibInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2039
 *     '''Wrapper for ints.GB4RAlphaIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis, double alpha):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4RAlphaIntegralLibInt(max_nbasis, alpha))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  double __pyx_v_alpha;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,&__pyx_n_s_alpha,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(0, 2039, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2039, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2039, __pyx_L3_error)
    __pyx_v_alpha = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2039, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2039, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4RAlphaIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *)__pyx_v_self), __pyx_v_max_nbasis, __pyx_v_alpha);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self, long __pyx_v_max_nbasis, double __pyx_v_alpha) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB4RAlphaIntegralLibInt *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2040
 * 
 *     def __cinit__(self, long max_nbasis, double alpha):
 *         self._this = <ints.GB4Integral*>(new ints.GB4RAlphaIntegralLibInt(max_nbasis, alpha))             # <<<<<<<<<<<<<<
 * 
 *     property alpha:
 */
  try {
    __pyx_t_1 = new GB4RAlphaIntegralLibInt(__pyx_v_max_nbasis, __pyx_v_alpha);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2040, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB4Integral *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2039
 *     '''Wrapper for ints.GB4RAlphaIntegralLibInt, for testing only'''
 * 
 *     def __cinit__(self, long max_nbasis, double alpha):             # <<<<<<<<<<<<<<
 *         self._this = <ints.GB4Integral*>(new ints.GB4RAlphaIntegralLibInt(max_nbasis, alpha))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB4RAlphaIntegralLibInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2043
 * 
 *     property alpha:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4RAlphaIntegralLibInt*>self._this).get_alpha()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5alpha_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5alpha_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5alpha___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5alpha___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2044
 *     property alpha:
 *         def __get__(self):
 *             return (<ints.GB4RAlphaIntegralLibInt*>self._this).get_alpha()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((GB4RAlphaIntegralLibInt *)__pyx_v_self->__pyx_base._this)->get_alpha()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2043
 * 
 *     property alpha:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<ints.GB4RAlphaIntegralLibInt*>self._this).get_alpha()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4RAlphaIntegralLibInt.alpha.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_2__reduce_cython__[] = "GB4RAlphaIntegralLibInt.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4RAlphaIntegralLibInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_4__setstate_cython__[] = "GB4RAlphaIntegralLibInt.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB4RAlphaIntegralLibInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2056
 *     cdef fns.GB1DMGridFn* _this
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn___dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn___dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":2057
 * 
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 * 
 *     property nwork:
 */
  delete __pyx_v_self->_this;

  /* "horton/gbasis/cext.pyx":2056
 *     cdef fns.GB1DMGridFn* _this
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":2060
 * 
 *     property nwork:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nwork()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_5nwork_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_5nwork_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_5nwork___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_5nwork___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2061
 *     property nwork:
 *         def __get__(self):
 *             return self._this.get_nwork()             # <<<<<<<<<<<<<<
 * 
 *     property max_shell_type:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_nwork()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2060
 * 
 *     property nwork:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_nwork()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.nwork.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2064
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_14max_shell_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_14max_shell_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_14max_shell_type___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_14max_shell_type___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2065
 *     property max_shell_type:
 *         def __get__(self):
 *             return self._this.get_max_shell_type()             # <<<<<<<<<<<<<<
 * 
 *     property max_nbasis:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_max_shell_type()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2064
 * 
 *     property max_shell_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_shell_type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.max_shell_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2068
 * 
 *     property max_nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_nbasis()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_10max_nbasis_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_10max_nbasis_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10max_nbasis___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10max_nbasis___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2069
 *     property max_nbasis:
 *         def __get__(self):
 *             return self._this.get_max_nbasis()             # <<<<<<<<<<<<<<
 * 
 *     property shell_type0:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_max_nbasis()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2068
 * 
 *     property max_nbasis:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_max_nbasis()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.max_nbasis.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2072
 * 
 *     property shell_type0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_shell_type0()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_11shell_type0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_11shell_type0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_11shell_type0___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_11shell_type0___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2073
 *     property shell_type0:
 *         def __get__(self):
 *             return self._this.get_shell_type0()             # <<<<<<<<<<<<<<
 * 
 *     property dim_work:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_shell_type0()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2072
 * 
 *     property shell_type0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_shell_type0()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.shell_type0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2076
 * 
 *     property dim_work:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_dim_work()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_8dim_work_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_8dim_work_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_8dim_work___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_8dim_work___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2077
 *     property dim_work:
 *         def __get__(self):
 *             return self._this.get_dim_work()             # <<<<<<<<<<<<<<
 * 
 *     property dim_output:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_dim_work()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2076
 * 
 *     property dim_work:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_dim_work()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.dim_work.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2080
 * 
 *     property dim_output:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_dim_output()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_10dim_output_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_10dim_output_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10dim_output___get__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10dim_output___get__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2081
 *     property dim_output:
 *         def __get__(self):
 *             return self._this.get_dim_output()             # <<<<<<<<<<<<<<
 * 
 *     def reset(self, long shell_type0, np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] point not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->get_dim_output()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2080
 * 
 *     property dim_output:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self._this.get_dim_output()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.dim_output.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2083
 *             return self._this.get_dim_output()
 * 
 *     def reset(self, long shell_type0, np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] point not None):             # <<<<<<<<<<<<<<
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_3reset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_2reset[] = "GB1DMGridFn.reset(self, long shell_type0, ndarray r0, ndarray point)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_3reset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_shell_type0;
  PyArrayObject *__pyx_v_r0 = 0;
  PyArrayObject *__pyx_v_point = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shell_type0,&__pyx_n_s_r0,&__pyx_n_s_point,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 3, 3, 1); __PYX_ERR(0, 2083, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_point)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("reset", 1, 3, 3, 2); __PYX_ERR(0, 2083, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "reset") < 0)) __PYX_ERR(0, 2083, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_shell_type0 = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_shell_type0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2083, __pyx_L3_error)
    __pyx_v_r0 = ((PyArrayObject *)values[1]);
    __pyx_v_point = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reset", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2083, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_r0), __pyx_ptype_5numpy_ndarray, 0, "r0", 0))) __PYX_ERR(0, 2083, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_point), __pyx_ptype_5numpy_ndarray, 0, "point", 0))) __PYX_ERR(0, 2083, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_2reset(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self), __pyx_v_shell_type0, __pyx_v_r0, __pyx_v_point);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_2reset(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, long __pyx_v_shell_type0, PyArrayObject *__pyx_v_r0, PyArrayObject *__pyx_v_point) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point;
  __Pyx_Buffer __pyx_pybuffer_point;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_r0;
  __Pyx_Buffer __pyx_pybuffer_r0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("reset", 0);
  __pyx_pybuffer_r0.pybuffer.buf = NULL;
  __pyx_pybuffer_r0.refcount = 0;
  __pyx_pybuffernd_r0.data = NULL;
  __pyx_pybuffernd_r0.rcbuffer = &__pyx_pybuffer_r0;
  __pyx_pybuffer_point.pybuffer.buf = NULL;
  __pyx_pybuffer_point.refcount = 0;
  __pyx_pybuffernd_point.data = NULL;
  __pyx_pybuffernd_point.rcbuffer = &__pyx_pybuffer_point;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_r0.rcbuffer->pybuffer, (PyObject*)__pyx_v_r0, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2083, __pyx_L1_error)
  }
  __pyx_pybuffernd_r0.diminfo[0].strides = __pyx_pybuffernd_r0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_r0.diminfo[0].shape = __pyx_pybuffernd_r0.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_point, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2083, __pyx_L1_error)
  }
  __pyx_pybuffernd_point.diminfo[0].strides = __pyx_pybuffernd_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point.diminfo[0].shape = __pyx_pybuffernd_point.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":2084
 * 
 *     def reset(self, long shell_type0, np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] point not None):
 *         assert r0.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert r0.shape[0] == 3
 *         assert point.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_r0), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2084, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2084, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2085
 *     def reset(self, long shell_type0, np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] point not None):
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3             # <<<<<<<<<<<<<<
 *         assert point.flags['C_CONTIGUOUS']
 *         assert point.shape[0] == 3
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_r0->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2085, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2086
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3
 *         assert point.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert point.shape[0] == 3
 *         self._this.reset(shell_type0, <double*>r0.data, &point[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_point), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2086, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2086, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2087
 *         assert r0.shape[0] == 3
 *         assert point.flags['C_CONTIGUOUS']
 *         assert point.shape[0] == 3             # <<<<<<<<<<<<<<
 *         self._this.reset(shell_type0, <double*>r0.data, &point[0])
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_point->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2087, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2088
 *         assert point.flags['C_CONTIGUOUS']
 *         assert point.shape[0] == 3
 *         self._this.reset(shell_type0, <double*>r0.data, &point[0])             # <<<<<<<<<<<<<<
 * 
 *     def add(self, double coeff, double alpha0,
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_point.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2088, __pyx_L1_error)
  }
  try {
    __pyx_v_self->_this->reset(__pyx_v_shell_type0, ((double *)__pyx_v_r0->data), (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_point.diminfo[0].strides))));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2088, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":2083
 *             return self._this.get_dim_output()
 * 
 *     def reset(self, long shell_type0, np.ndarray[double, ndim=1] r0 not None, np.ndarray[double, ndim=1] point not None):             # <<<<<<<<<<<<<<
 *         assert r0.flags['C_CONTIGUOUS']
 *         assert r0.shape[0] == 3
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r0.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.reset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_r0.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2090
 *         self._this.reset(shell_type0, <double*>r0.data, &point[0])
 * 
 *     def add(self, double coeff, double alpha0,             # <<<<<<<<<<<<<<
 *             np.ndarray[double, ndim=1] scales0 not None):
 *         assert scales0.flags['C_CONTIGUOUS']
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_4add[] = "GB1DMGridFn.add(self, double coeff, double alpha0, ndarray scales0)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_coeff;
  double __pyx_v_alpha0;
  PyArrayObject *__pyx_v_scales0 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeff,&__pyx_n_s_alpha0,&__pyx_n_s_scales0,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_alpha0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 1); __PYX_ERR(0, 2090, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scales0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 2); __PYX_ERR(0, 2090, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(0, 2090, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_coeff = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_coeff == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
    __pyx_v_alpha0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_alpha0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
    __pyx_v_scales0 = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2090, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scales0), __pyx_ptype_5numpy_ndarray, 0, "scales0", 0))) __PYX_ERR(0, 2091, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_4add(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self), __pyx_v_coeff, __pyx_v_alpha0, __pyx_v_scales0);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_4add(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, double __pyx_v_coeff, double __pyx_v_alpha0, PyArrayObject *__pyx_v_scales0) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_scales0;
  __Pyx_Buffer __pyx_pybuffer_scales0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("add", 0);
  __pyx_pybuffer_scales0.pybuffer.buf = NULL;
  __pyx_pybuffer_scales0.refcount = 0;
  __pyx_pybuffernd_scales0.data = NULL;
  __pyx_pybuffernd_scales0.rcbuffer = &__pyx_pybuffer_scales0;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer, (PyObject*)__pyx_v_scales0, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2090, __pyx_L1_error)
  }
  __pyx_pybuffernd_scales0.diminfo[0].strides = __pyx_pybuffernd_scales0.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_scales0.diminfo[0].shape = __pyx_pybuffernd_scales0.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":2092
 *     def add(self, double coeff, double alpha0,
 *             np.ndarray[double, ndim=1] scales0 not None):
 *         assert scales0.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         self._this.add(coeff, alpha0, <double*>scales0.data)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_scales0), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2092, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2092, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2092, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2092, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2093
 *             np.ndarray[double, ndim=1] scales0 not None):
 *         assert scales0.flags['C_CONTIGUOUS']
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))             # <<<<<<<<<<<<<<
 *         self._this.add(coeff, alpha0, <double*>scales0.data)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_scales0->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = labs(__pyx_v_self->_this->get_shell_type0()); if (unlikely(__pyx_t_5 == ((long)-1))) __PYX_ERR(0, 2093, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_7, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2093, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2093, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2094
 *         assert scales0.flags['C_CONTIGUOUS']
 *         assert scales0.shape[0] == get_shell_nbasis(abs(self._this.get_shell_type0()))
 *         self._this.add(coeff, alpha0, <double*>scales0.data)             # <<<<<<<<<<<<<<
 * 
 *     def cart_to_pure(self):
 */
  __pyx_v_self->_this->add(__pyx_v_coeff, __pyx_v_alpha0, ((double *)__pyx_v_scales0->data));

  /* "horton/gbasis/cext.pyx":2090
 *         self._this.reset(shell_type0, <double*>r0.data, &point[0])
 * 
 *     def add(self, double coeff, double alpha0,             # <<<<<<<<<<<<<<
 *             np.ndarray[double, ndim=1] scales0 not None):
 *         assert scales0.flags['C_CONTIGUOUS']
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_scales0.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2096
 *         self._this.add(coeff, alpha0, <double*>scales0.data)
 * 
 *     def cart_to_pure(self):             # <<<<<<<<<<<<<<
 *         self._this.cart_to_pure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_7cart_to_pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_6cart_to_pure[] = "GB1DMGridFn.cart_to_pure(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_7cart_to_pure(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cart_to_pure (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_6cart_to_pure(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_6cart_to_pure(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cart_to_pure", 0);

  /* "horton/gbasis/cext.pyx":2097
 * 
 *     def cart_to_pure(self):
 *         self._this.cart_to_pure()             # <<<<<<<<<<<<<<
 * 
 *     def get_work(self, shape0):
 */
  try {
    __pyx_v_self->_this->cart_to_pure();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2097, __pyx_L1_error)
  }

  /* "horton/gbasis/cext.pyx":2096
 *         self._this.add(coeff, alpha0, <double*>scales0.data)
 * 
 *     def cart_to_pure(self):             # <<<<<<<<<<<<<<
 *         self._this.cart_to_pure()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.cart_to_pure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2099
 *         self._this.cart_to_pure()
 * 
 *     def get_work(self, shape0):             # <<<<<<<<<<<<<<
 *         '''This returns a **copy** of the c++ work array.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_9get_work(PyObject *__pyx_v_self, PyObject *__pyx_v_shape0); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_8get_work[] = "GB1DMGridFn.get_work(self, shape0)\nThis returns a **copy** of the c++ work array.\n\n           Returning a numpy array with a buffer created in c++ is dangerous.\n           If the c++ array becomes deallocated, the numpy array may still\n           point to the deallocated memory. For that reason, a copy is returned.\n           Speed is not an issue as this class is only used for testing.\n        ";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_9get_work(PyObject *__pyx_v_self, PyObject *__pyx_v_shape0) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_work (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_8get_work(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self), ((PyObject *)__pyx_v_shape0));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_8get_work(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, PyObject *__pyx_v_shape0) {
  npy_intp __pyx_v_shape[2];
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  npy_intp __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("get_work", 0);

  /* "horton/gbasis/cext.pyx":2108
 *         '''
 *         cdef np.npy_intp shape[2]
 *         assert shape0 > 0             # <<<<<<<<<<<<<<
 *         assert shape0 <= self.max_nbasis
 *         shape[0] = shape0
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_shape0, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2108, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2109
 *         cdef np.npy_intp shape[2]
 *         assert shape0 > 0
 *         assert shape0 <= self.max_nbasis             # <<<<<<<<<<<<<<
 *         shape[0] = shape0
 *         if self.dim_work == 1:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_max_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_shape0, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2109, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2109, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2110
 *         assert shape0 > 0
 *         assert shape0 <= self.max_nbasis
 *         shape[0] = shape0             # <<<<<<<<<<<<<<
 *         if self.dim_work == 1:
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 */
  __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_v_shape0); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2110, __pyx_L1_error)
  (__pyx_v_shape[0]) = __pyx_t_4;

  /* "horton/gbasis/cext.pyx":2111
 *         assert shape0 <= self.max_nbasis
 *         shape[0] = shape0
 *         if self.dim_work == 1:             # <<<<<<<<<<<<<<
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         else:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim_work); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "horton/gbasis/cext.pyx":2112
 *         shape[0] = shape0
 *         if self.dim_work == 1:
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_work())             # <<<<<<<<<<<<<<
 *         else:
 *             shape[1] = self.dim_work
 */
    __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_shape, NPY_DOUBLE, ((void *)__pyx_v_self->_this->get_work())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_tmp = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "horton/gbasis/cext.pyx":2111
 *         assert shape0 <= self.max_nbasis
 *         shape[0] = shape0
 *         if self.dim_work == 1:             # <<<<<<<<<<<<<<
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         else:
 */
    goto __pyx_L3;
  }

  /* "horton/gbasis/cext.pyx":2114
 *             tmp = np.PyArray_SimpleNewFromData(1, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         else:
 *             shape[1] = self.dim_work             # <<<<<<<<<<<<<<
 *             tmp = np.PyArray_SimpleNewFromData(2, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         return tmp.copy()
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dim_work); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_Py_intptr_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((npy_intp)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_shape[1]) = __pyx_t_4;

    /* "horton/gbasis/cext.pyx":2115
 *         else:
 *             shape[1] = self.dim_work
 *             tmp = np.PyArray_SimpleNewFromData(2, shape, np.NPY_DOUBLE, <void*> self._this.get_work())             # <<<<<<<<<<<<<<
 *         return tmp.copy()
 * 
 */
    __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_shape, NPY_DOUBLE, ((void *)__pyx_v_self->_this->get_work())); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_tmp = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "horton/gbasis/cext.pyx":2116
 *             shape[1] = self.dim_work
 *             tmp = np.PyArray_SimpleNewFromData(2, shape, np.NPY_DOUBLE, <void*> self._this.get_work())
 *         return tmp.copy()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_copy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2099
 *         self._this.cart_to_pure()
 * 
 *     def get_work(self, shape0):             # <<<<<<<<<<<<<<
 *         '''This returns a **copy** of the c++ work array.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.get_work", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_10__reduce_cython__[] = "GB1DMGridFn.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_12__setstate_cython__[] = "GB1DMGridFn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_12__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_11GB1DMGridFn_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridFn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2120
 * 
 * cdef class GB1DMGridDensityFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridDensityFn(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2120, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2120, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2120, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridDensityFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB1DMGridDensityFn *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2121
 * cdef class GB1DMGridDensityFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridDensityFn(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB1DMGridDensityFn(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2121, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB1DMGridFn *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2120
 * 
 * cdef class GB1DMGridDensityFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridDensityFn(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridDensityFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridDensityFn_2__reduce_cython__[] = "GB1DMGridDensityFn.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridDensityFn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridDensityFn_4__setstate_cython__[] = "GB1DMGridDensityFn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridDensityFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridDensityFn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2125
 * 
 * cdef class GB1DMGridGradientFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGradientFn(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2125, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2125, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2125, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGradientFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB1DMGridGradientFn *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2126
 * cdef class GB1DMGridGradientFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGradientFn(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB1DMGridGradientFn(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2126, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB1DMGridFn *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2125
 * 
 * cdef class GB1DMGridGradientFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGradientFn(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGradientFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_19GB1DMGridGradientFn_2__reduce_cython__[] = "GB1DMGridGradientFn.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGradientFn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_19GB1DMGridGradientFn_4__setstate_cython__[] = "GB1DMGridGradientFn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_19GB1DMGridGradientFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGradientFn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2130
 * 
 * cdef class GB1DMGridGGAFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGGAFn(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2130, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2130, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGGAFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB1DMGridGGAFn *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2131
 * cdef class GB1DMGridGGAFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGGAFn(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB1DMGridGGAFn(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2131, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB1DMGridFn *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2130
 * 
 * cdef class GB1DMGridGGAFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridGGAFn(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGGAFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_14GB1DMGridGGAFn_2__reduce_cython__[] = "GB1DMGridGGAFn.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGGAFn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_14GB1DMGridGGAFn_4__setstate_cython__[] = "GB1DMGridGGAFn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_14GB1DMGridGGAFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridGGAFn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2135
 * 
 * cdef class GB1DMGridKineticFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridKineticFn(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2135, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2135, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridKineticFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB1DMGridKineticFn *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2136
 * cdef class GB1DMGridKineticFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridKineticFn(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB1DMGridKineticFn(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2136, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB1DMGridFn *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2135
 * 
 * cdef class GB1DMGridKineticFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridKineticFn(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridKineticFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridKineticFn_2__reduce_cython__[] = "GB1DMGridKineticFn.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridKineticFn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridKineticFn_4__setstate_cython__[] = "GB1DMGridKineticFn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridKineticFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridKineticFn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2140
 * 
 * cdef class GB1DMGridHessianFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridHessianFn(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2140, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2140, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridHessianFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB1DMGridHessianFn *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2141
 * cdef class GB1DMGridHessianFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridHessianFn(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB1DMGridHessianFn(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2141, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB1DMGridFn *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2140
 * 
 * cdef class GB1DMGridHessianFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridHessianFn(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridHessianFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridHessianFn_2__reduce_cython__[] = "GB1DMGridHessianFn.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridHessianFn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridHessianFn_4__setstate_cython__[] = "GB1DMGridHessianFn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_18GB1DMGridHessianFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridHessianFn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2145
 * 
 * cdef class GB1DMGridMGGAFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridMGGAFn(max_nbasis))
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_max_nbasis;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_nbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2145, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_max_nbasis = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_max_nbasis == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2145, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2145, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridMGGAFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *)__pyx_v_self), __pyx_v_max_nbasis);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *__pyx_v_self, long __pyx_v_max_nbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GB1DMGridMGGAFn *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2146
 * cdef class GB1DMGridMGGAFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridMGGAFn(max_nbasis))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = new GB1DMGridMGGAFn(__pyx_v_max_nbasis);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2146, __pyx_L1_error)
  }
  __pyx_v_self->__pyx_base._this = ((GB1DMGridFn *)__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2145
 * 
 * cdef class GB1DMGridMGGAFn(GB1DMGridFn):
 *     def __cinit__(self, long max_nbasis):             # <<<<<<<<<<<<<<
 *         self._this = <fns.GB1DMGridFn*>(new fns.GB1DMGridMGGAFn(max_nbasis))
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridMGGAFn.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_2__reduce_cython__[] = "GB1DMGridMGGAFn.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_2__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridMGGAFn.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_4__setstate_cython__[] = "GB1DMGridMGGAFn.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_4__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.GB1DMGridMGGAFn.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2159
 *     cdef GBasis _gbasis
 * 
 *     def __cinit__(self, GBasis gbasis not None):             # <<<<<<<<<<<<<<
 *         self._this = new iter_gb.IterGB1(gbasis._this)
 *         self._gbasis = gbasis
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_7IterGB1_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_7IterGB1_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2159, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gbasis), __pyx_ptype_6horton_6gbasis_4cext_GBasis, 0, "gbasis", 0))) __PYX_ERR(0, 2159, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self), __pyx_v_gbasis);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_7IterGB1___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self, struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2160
 * 
 *     def __cinit__(self, GBasis gbasis not None):
 *         self._this = new iter_gb.IterGB1(gbasis._this)             # <<<<<<<<<<<<<<
 *         self._gbasis = gbasis
 * 
 */
  __pyx_v_self->_this = new IterGB1(__pyx_v_gbasis->_this);

  /* "horton/gbasis/cext.pyx":2161
 *     def __cinit__(self, GBasis gbasis not None):
 *         self._this = new iter_gb.IterGB1(gbasis._this)
 *         self._gbasis = gbasis             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_gbasis));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_gbasis));
  __Pyx_GOTREF(__pyx_v_self->_gbasis);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_gbasis));
  __pyx_v_self->_gbasis = __pyx_v_gbasis;

  /* "horton/gbasis/cext.pyx":2159
 *     cdef GBasis _gbasis
 * 
 *     def __cinit__(self, GBasis gbasis not None):             # <<<<<<<<<<<<<<
 *         self._this = new iter_gb.IterGB1(gbasis._this)
 *         self._gbasis = gbasis
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2163
 *         self._gbasis = gbasis
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_7IterGB1_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_7IterGB1_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_7IterGB1_2__dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_7IterGB1_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":2164
 * 
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 * 
 *     def inc_shell(self):
 */
  delete __pyx_v_self->_this;

  /* "horton/gbasis/cext.pyx":2163
 *         self._gbasis = gbasis
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":2166
 *         del self._this
 * 
 *     def inc_shell(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_shell()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_5inc_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB1_4inc_shell[] = "IterGB1.inc_shell(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_5inc_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc_shell (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_4inc_shell(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_4inc_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc_shell", 0);

  /* "horton/gbasis/cext.pyx":2167
 * 
 *     def inc_shell(self):
 *         return self._this.inc_shell()             # <<<<<<<<<<<<<<
 * 
 *     def update_shell(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->inc_shell()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2166
 *         del self._this
 * 
 *     def inc_shell(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_shell()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.inc_shell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2169
 *         return self._this.inc_shell()
 * 
 *     def update_shell(self):             # <<<<<<<<<<<<<<
 *         self._this.update_shell()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_7update_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB1_6update_shell[] = "IterGB1.update_shell(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_7update_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_shell (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_6update_shell(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_6update_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_shell", 0);

  /* "horton/gbasis/cext.pyx":2170
 * 
 *     def update_shell(self):
 *         self._this.update_shell()             # <<<<<<<<<<<<<<
 * 
 *     def inc_prim(self):
 */
  __pyx_v_self->_this->update_shell();

  /* "horton/gbasis/cext.pyx":2169
 *         return self._this.inc_shell()
 * 
 *     def update_shell(self):             # <<<<<<<<<<<<<<
 *         self._this.update_shell()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2172
 *         self._this.update_shell()
 * 
 *     def inc_prim(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_prim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_9inc_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB1_8inc_prim[] = "IterGB1.inc_prim(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_9inc_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc_prim (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_8inc_prim(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_8inc_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc_prim", 0);

  /* "horton/gbasis/cext.pyx":2173
 * 
 *     def inc_prim(self):
 *         return self._this.inc_prim()             # <<<<<<<<<<<<<<
 * 
 *     def update_prim(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->inc_prim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2172
 *         self._this.update_shell()
 * 
 *     def inc_prim(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_prim()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.inc_prim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2175
 *         return self._this.inc_prim()
 * 
 *     def update_prim(self):             # <<<<<<<<<<<<<<
 *         self._this.update_prim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_11update_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB1_10update_prim[] = "IterGB1.update_prim(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_11update_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_prim (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_10update_prim(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_10update_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_prim", 0);

  /* "horton/gbasis/cext.pyx":2176
 * 
 *     def update_prim(self):
 *         self._this.update_prim()             # <<<<<<<<<<<<<<
 * 
 *     def store(self, np.ndarray[double, ndim=1] work not None,
 */
  __pyx_v_self->_this->update_prim();

  /* "horton/gbasis/cext.pyx":2175
 *         return self._this.inc_prim()
 * 
 *     def update_prim(self):             # <<<<<<<<<<<<<<
 *         self._this.update_prim()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2178
 *         self._this.update_prim()
 * 
 *     def store(self, np.ndarray[double, ndim=1] work not None,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=1] output not None, long dim=1):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_13store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB1_12store[] = "IterGB1.store(self, ndarray work, ndarray output, long dim=1)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_13store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_work = 0;
  PyArrayObject *__pyx_v_output = 0;
  long __pyx_v_dim;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("store (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_work,&__pyx_n_s_output,&__pyx_n_s_dim,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("store", 0, 2, 3, 1); __PYX_ERR(0, 2178, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dim);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "store") < 0)) __PYX_ERR(0, 2178, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_work = ((PyArrayObject *)values[0]);
    __pyx_v_output = ((PyArrayObject *)values[1]);
    if (values[2]) {
      __pyx_v_dim = __Pyx_PyInt_As_long(values[2]); if (unlikely((__pyx_v_dim == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2179, __pyx_L3_error)
    } else {
      __pyx_v_dim = ((long)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2178, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_work), __pyx_ptype_5numpy_ndarray, 0, "work", 0))) __PYX_ERR(0, 2178, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 0, "output", 0))) __PYX_ERR(0, 2179, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_12store(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self), __pyx_v_work, __pyx_v_output, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_12store(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self, PyArrayObject *__pyx_v_work, PyArrayObject *__pyx_v_output, long __pyx_v_dim) {
  CYTHON_UNUSED PyObject *__pyx_v_max_shell_nbasis = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_work;
  __Pyx_Buffer __pyx_pybuffer_work;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("store", 0);
  __pyx_pybuffer_work.pybuffer.buf = NULL;
  __pyx_pybuffer_work.refcount = 0;
  __pyx_pybuffernd_work.data = NULL;
  __pyx_pybuffernd_work.rcbuffer = &__pyx_pybuffer_work;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_work.rcbuffer->pybuffer, (PyObject*)__pyx_v_work, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2178, __pyx_L1_error)
  }
  __pyx_pybuffernd_work.diminfo[0].strides = __pyx_pybuffernd_work.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_work.diminfo[0].shape = __pyx_pybuffernd_work.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2178, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":2180
 *     def store(self, np.ndarray[double, ndim=1] work not None,
 *               np.ndarray[double, ndim=1] output not None, long dim=1):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)             # <<<<<<<<<<<<<<
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.flags['C_CONTIGUOUS']
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_shell_nbasis = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":2181
 *               np.ndarray[double, ndim=1] output not None, long dim=1):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)             # <<<<<<<<<<<<<<
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_work->dimensions[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2181, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2181, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2182
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_work), __pyx_n_s_flags); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2182, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2182, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2183
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis             # <<<<<<<<<<<<<<
 *         assert output.flags['C_CONTIGUOUS']
 *         self._this.store(&work[0], &output[0], dim)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2183, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2184
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         self._this.store(&work[0], &output[0], dim)
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2184, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2184, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2185
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']
 *         self._this.store(&work[0], &output[0], dim)             # <<<<<<<<<<<<<<
 * 
 *     property public_fields:
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_work.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_work.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2185, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 2185, __pyx_L1_error)
  }
  __pyx_v_self->_this->store((&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_work.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_work.diminfo[0].strides))), (&(*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_output.diminfo[0].strides))), __pyx_v_dim);

  /* "horton/gbasis/cext.pyx":2178
 *         self._this.update_prim()
 * 
 *     def store(self, np.ndarray[double, ndim=1] work not None,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=1] output not None, long dim=1):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_max_shell_nbasis);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2188
 * 
 *     property public_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.con_coeff,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_13public_fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_13public_fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_13public_fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_13public_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2189
 *     property public_fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._this.con_coeff,
 *                 self._this.shell_type0,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2190
 *         def __get__(self):
 *             return (
 *                 self._this.con_coeff,             # <<<<<<<<<<<<<<
 *                 self._this.shell_type0,
 *                 self._this.alpha0,
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_this->con_coeff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2191
 *             return (
 *                 self._this.con_coeff,
 *                 self._this.shell_type0,             # <<<<<<<<<<<<<<
 *                 self._this.alpha0,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "horton/gbasis/cext.pyx":2192
 *                 self._this.con_coeff,
 *                 self._this.shell_type0,
 *                 self._this.alpha0,             # <<<<<<<<<<<<<<
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.ibasis0,
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_this->alpha0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "horton/gbasis/cext.pyx":2193
 *                 self._this.shell_type0,
 *                 self._this.alpha0,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],             # <<<<<<<<<<<<<<
 *                 self._this.ibasis0,
 *             )
 */
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->_this->r0[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->_this->r0[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->_this->r0[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "horton/gbasis/cext.pyx":2194
 *                 self._this.alpha0,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.ibasis0,             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ibasis0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "horton/gbasis/cext.pyx":2190
 *         def __get__(self):
 *             return (
 *                 self._this.con_coeff,             # <<<<<<<<<<<<<<
 *                 self._this.shell_type0,
 *                 self._this.alpha0,
 */
  __pyx_t_8 = PyTuple_New(7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_t_7);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2188
 * 
 *     property public_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.con_coeff,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.public_fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2198
 * 
 *     property private_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.ishell0,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_14private_fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_14private_fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_14private_fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_14private_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2199
 *     property private_fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._this.ishell0,
 *                 self._this.nprim0,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2200
 *         def __get__(self):
 *             return (
 *                 self._this.ishell0,             # <<<<<<<<<<<<<<
 *                 self._this.nprim0,
 *                 self._this.oprim0,
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ishell0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2201
 *             return (
 *                 self._this.ishell0,
 *                 self._this.nprim0,             # <<<<<<<<<<<<<<
 *                 self._this.oprim0,
 *                 self._this.iprim0,
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->_this->nprim0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "horton/gbasis/cext.pyx":2202
 *                 self._this.ishell0,
 *                 self._this.nprim0,
 *                 self._this.oprim0,             # <<<<<<<<<<<<<<
 *                 self._this.iprim0,
 *             )
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_self->_this->oprim0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "horton/gbasis/cext.pyx":2203
 *                 self._this.nprim0,
 *                 self._this.oprim0,
 *                 self._this.iprim0,             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->iprim0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "horton/gbasis/cext.pyx":2200
 *         def __get__(self):
 *             return (
 *                 self._this.ishell0,             # <<<<<<<<<<<<<<
 *                 self._this.nprim0,
 *                 self._this.oprim0,
 */
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2198
 * 
 *     property private_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.ishell0,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.private_fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB1_14__reduce_cython__[] = "IterGB1.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_14__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB1_16__setstate_cython__[] = "IterGB1.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB1_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB1_16__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB1_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB1.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2212
 *     cdef GBasis _gbasis
 * 
 *     def __cinit__(self, GBasis gbasis not None):             # <<<<<<<<<<<<<<
 *         self._this = new iter_gb.IterGB2(gbasis._this)
 *         self._gbasis = gbasis
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_7IterGB2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_7IterGB2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2212, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2212, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gbasis), __pyx_ptype_6horton_6gbasis_4cext_GBasis, 0, "gbasis", 0))) __PYX_ERR(0, 2212, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self), __pyx_v_gbasis);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_7IterGB2___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self, struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2213
 * 
 *     def __cinit__(self, GBasis gbasis not None):
 *         self._this = new iter_gb.IterGB2(gbasis._this)             # <<<<<<<<<<<<<<
 *         self._gbasis = gbasis
 * 
 */
  __pyx_v_self->_this = new IterGB2(__pyx_v_gbasis->_this);

  /* "horton/gbasis/cext.pyx":2214
 *     def __cinit__(self, GBasis gbasis not None):
 *         self._this = new iter_gb.IterGB2(gbasis._this)
 *         self._gbasis = gbasis             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_gbasis));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_gbasis));
  __Pyx_GOTREF(__pyx_v_self->_gbasis);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_gbasis));
  __pyx_v_self->_gbasis = __pyx_v_gbasis;

  /* "horton/gbasis/cext.pyx":2212
 *     cdef GBasis _gbasis
 * 
 *     def __cinit__(self, GBasis gbasis not None):             # <<<<<<<<<<<<<<
 *         self._this = new iter_gb.IterGB2(gbasis._this)
 *         self._gbasis = gbasis
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2216
 *         self._gbasis = gbasis
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_7IterGB2_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_7IterGB2_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_7IterGB2_2__dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_7IterGB2_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":2217
 * 
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 * 
 *     def inc_shell(self):
 */
  delete __pyx_v_self->_this;

  /* "horton/gbasis/cext.pyx":2216
 *         self._gbasis = gbasis
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":2219
 *         del self._this
 * 
 *     def inc_shell(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_shell()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_5inc_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB2_4inc_shell[] = "IterGB2.inc_shell(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_5inc_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc_shell (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_4inc_shell(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_4inc_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc_shell", 0);

  /* "horton/gbasis/cext.pyx":2220
 * 
 *     def inc_shell(self):
 *         return self._this.inc_shell()             # <<<<<<<<<<<<<<
 * 
 *     def update_shell(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->inc_shell()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2219
 *         del self._this
 * 
 *     def inc_shell(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_shell()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.inc_shell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2222
 *         return self._this.inc_shell()
 * 
 *     def update_shell(self):             # <<<<<<<<<<<<<<
 *         self._this.update_shell()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_7update_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB2_6update_shell[] = "IterGB2.update_shell(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_7update_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_shell (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_6update_shell(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_6update_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_shell", 0);

  /* "horton/gbasis/cext.pyx":2223
 * 
 *     def update_shell(self):
 *         self._this.update_shell()             # <<<<<<<<<<<<<<
 * 
 *     def inc_prim(self):
 */
  __pyx_v_self->_this->update_shell();

  /* "horton/gbasis/cext.pyx":2222
 *         return self._this.inc_shell()
 * 
 *     def update_shell(self):             # <<<<<<<<<<<<<<
 *         self._this.update_shell()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2225
 *         self._this.update_shell()
 * 
 *     def inc_prim(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_prim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_9inc_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB2_8inc_prim[] = "IterGB2.inc_prim(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_9inc_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc_prim (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_8inc_prim(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_8inc_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc_prim", 0);

  /* "horton/gbasis/cext.pyx":2226
 * 
 *     def inc_prim(self):
 *         return self._this.inc_prim()             # <<<<<<<<<<<<<<
 * 
 *     def update_prim(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->inc_prim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2225
 *         self._this.update_shell()
 * 
 *     def inc_prim(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_prim()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.inc_prim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2228
 *         return self._this.inc_prim()
 * 
 *     def update_prim(self):             # <<<<<<<<<<<<<<
 *         self._this.update_prim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_11update_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB2_10update_prim[] = "IterGB2.update_prim(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_11update_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_prim (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_10update_prim(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_10update_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_prim", 0);

  /* "horton/gbasis/cext.pyx":2229
 * 
 *     def update_prim(self):
 *         self._this.update_prim()             # <<<<<<<<<<<<<<
 * 
 *     def store(self, np.ndarray[double, ndim=2] work not None,
 */
  __pyx_v_self->_this->update_prim();

  /* "horton/gbasis/cext.pyx":2228
 *         return self._this.inc_prim()
 * 
 *     def update_prim(self):             # <<<<<<<<<<<<<<
 *         self._this.update_prim()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2231
 *         self._this.update_prim()
 * 
 *     def store(self, np.ndarray[double, ndim=2] work not None,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=2] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_13store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB2_12store[] = "IterGB2.store(self, ndarray work, ndarray output)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_13store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_work = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("store (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_work,&__pyx_n_s_output,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); __PYX_ERR(0, 2231, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "store") < 0)) __PYX_ERR(0, 2231, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_work = ((PyArrayObject *)values[0]);
    __pyx_v_output = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2231, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_work), __pyx_ptype_5numpy_ndarray, 0, "work", 0))) __PYX_ERR(0, 2231, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 0, "output", 0))) __PYX_ERR(0, 2232, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_12store(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self), __pyx_v_work, __pyx_v_output);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_12store(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self, PyArrayObject *__pyx_v_work, PyArrayObject *__pyx_v_output) {
  CYTHON_UNUSED PyObject *__pyx_v_max_shell_nbasis = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_work;
  __Pyx_Buffer __pyx_pybuffer_work;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("store", 0);
  __pyx_pybuffer_work.pybuffer.buf = NULL;
  __pyx_pybuffer_work.refcount = 0;
  __pyx_pybuffernd_work.data = NULL;
  __pyx_pybuffernd_work.rcbuffer = &__pyx_pybuffer_work;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_work.rcbuffer->pybuffer, (PyObject*)__pyx_v_work, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2231, __pyx_L1_error)
  }
  __pyx_pybuffernd_work.diminfo[0].strides = __pyx_pybuffernd_work.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_work.diminfo[0].shape = __pyx_pybuffernd_work.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_work.diminfo[1].strides = __pyx_pybuffernd_work.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_work.diminfo[1].shape = __pyx_pybuffernd_work.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2231, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

  /* "horton/gbasis/cext.pyx":2233
 *     def store(self, np.ndarray[double, ndim=2] work not None,
 *               np.ndarray[double, ndim=2] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)             # <<<<<<<<<<<<<<
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_shell_nbasis = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":2234
 *               np.ndarray[double, ndim=2] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)             # <<<<<<<<<<<<<<
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 *         assert work.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_work->dimensions[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2234, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2235
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)             # <<<<<<<<<<<<<<
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_work->dimensions[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2235, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2235, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2236
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 *         assert work.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.shape[1] == self._gbasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_work), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2236, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2236, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2237
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis             # <<<<<<<<<<<<<<
 *         assert output.shape[1] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2237, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2237, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2238
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.shape[1] == self._gbasis.nbasis             # <<<<<<<<<<<<<<
 *         assert output.flags['C_CONTIGUOUS']
 *         self._this.store(&work[0, 0], &output[0, 0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2238, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2238, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2239
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.shape[1] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         self._this.store(&work[0, 0], &output[0, 0])
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2239, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2239, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2240
 *         assert output.shape[1] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']
 *         self._this.store(&work[0, 0], &output[0, 0])             # <<<<<<<<<<<<<<
 * 
 *     property public_fields:
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_work.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_work.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_pybuffernd_work.diminfo[1].shape;
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_work.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 2240, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_9 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_9 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_9 = 0;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd_output.diminfo[1].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_9 = 1;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_output.diminfo[1].shape)) __pyx_t_9 = 1;
  if (unlikely(__pyx_t_9 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_9);
    __PYX_ERR(0, 2240, __pyx_L1_error)
  }
  __pyx_v_self->_this->store((&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_work.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_work.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_work.diminfo[1].strides))), (&(*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_output.diminfo[1].strides))));

  /* "horton/gbasis/cext.pyx":2231
 *         self._this.update_prim()
 * 
 *     def store(self, np.ndarray[double, ndim=2] work not None,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=2] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_max_shell_nbasis);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2243
 * 
 *     property public_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.con_coeff,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_13public_fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_13public_fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_13public_fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_13public_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2244
 *     property public_fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._this.con_coeff,
 *                 self._this.shell_type0, self._this.shell_type1,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2245
 *         def __get__(self):
 *             return (
 *                 self._this.con_coeff,             # <<<<<<<<<<<<<<
 *                 self._this.shell_type0, self._this.shell_type1,
 *                 self._this.alpha0, self._this.alpha1,
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_this->con_coeff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2246
 *             return (
 *                 self._this.con_coeff,
 *                 self._this.shell_type0, self._this.shell_type1,             # <<<<<<<<<<<<<<
 *                 self._this.alpha0, self._this.alpha1,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "horton/gbasis/cext.pyx":2247
 *                 self._this.con_coeff,
 *                 self._this.shell_type0, self._this.shell_type1,
 *                 self._this.alpha0, self._this.alpha1,             # <<<<<<<<<<<<<<
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_this->alpha0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_this->alpha1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "horton/gbasis/cext.pyx":2248
 *                 self._this.shell_type0, self._this.shell_type1,
 *                 self._this.alpha0, self._this.alpha1,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],             # <<<<<<<<<<<<<<
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],
 *                 self._this.ibasis0, self._this.ibasis1,
 */
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->_this->r0[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_self->_this->r0[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble((__pyx_v_self->_this->r0[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "horton/gbasis/cext.pyx":2249
 *                 self._this.alpha0, self._this.alpha1,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],             # <<<<<<<<<<<<<<
 *                 self._this.ibasis0, self._this.ibasis1,
 *             )
 */
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_self->_this->r1[0])); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble((__pyx_v_self->_this->r1[1])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble((__pyx_v_self->_this->r1[2])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "horton/gbasis/cext.pyx":2250
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],
 *                 self._this.ibasis0, self._this.ibasis1,             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_12 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ibasis0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ibasis1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "horton/gbasis/cext.pyx":2245
 *         def __get__(self):
 *             return (
 *                 self._this.con_coeff,             # <<<<<<<<<<<<<<
 *                 self._this.shell_type0, self._this.shell_type1,
 *                 self._this.alpha0, self._this.alpha1,
 */
  __pyx_t_14 = PyTuple_New(13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_14, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_14, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_14, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_14, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_14, 8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_14, 9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_14, 10, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_14, 11, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_14, 12, __pyx_t_13);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_r = __pyx_t_14;
  __pyx_t_14 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2243
 * 
 *     property public_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.con_coeff,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.public_fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2254
 * 
 *     property private_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.ishell0, self._this.ishell1,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_14private_fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_14private_fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_14private_fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_14private_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2255
 *     property private_fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._this.ishell0, self._this.ishell1,
 *                 self._this.nprim0, self._this.nprim1,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2256
 *         def __get__(self):
 *             return (
 *                 self._this.ishell0, self._this.ishell1,             # <<<<<<<<<<<<<<
 *                 self._this.nprim0, self._this.nprim1,
 *                 self._this.oprim0, self._this.oprim1,
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ishell0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ishell1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "horton/gbasis/cext.pyx":2257
 *             return (
 *                 self._this.ishell0, self._this.ishell1,
 *                 self._this.nprim0, self._this.nprim1,             # <<<<<<<<<<<<<<
 *                 self._this.oprim0, self._this.oprim1,
 *                 self._this.iprim0, self._this.iprim1,
 */
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_self->_this->nprim0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->nprim1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "horton/gbasis/cext.pyx":2258
 *                 self._this.ishell0, self._this.ishell1,
 *                 self._this.nprim0, self._this.nprim1,
 *                 self._this.oprim0, self._this.oprim1,             # <<<<<<<<<<<<<<
 *                 self._this.iprim0, self._this.iprim1,
 *             )
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->_this->oprim0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_self->_this->oprim1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "horton/gbasis/cext.pyx":2259
 *                 self._this.nprim0, self._this.nprim1,
 *                 self._this.oprim0, self._this.oprim1,
 *                 self._this.iprim0, self._this.iprim1,             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_self->_this->iprim0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_self->_this->iprim1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "horton/gbasis/cext.pyx":2256
 *         def __get__(self):
 *             return (
 *                 self._this.ishell0, self._this.ishell1,             # <<<<<<<<<<<<<<
 *                 self._this.nprim0, self._this.nprim1,
 *                 self._this.oprim0, self._this.oprim1,
 */
  __pyx_t_9 = PyTuple_New(8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2254
 * 
 *     property private_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.ishell0, self._this.ishell1,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.private_fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB2_14__reduce_cython__[] = "IterGB2.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_14__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB2_16__setstate_cython__[] = "IterGB2.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB2_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB2_16__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB2_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2268
 *     cdef GBasis _gbasis
 * 
 *     def __cinit__(self, GBasis gbasis not None):             # <<<<<<<<<<<<<<
 *         self._this = new iter_gb.IterGB4(gbasis._this)
 *         self._gbasis = gbasis
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_7IterGB4_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_7IterGB4_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gbasis,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gbasis)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 2268, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gbasis), __pyx_ptype_6horton_6gbasis_4cext_GBasis, 0, "gbasis", 0))) __PYX_ERR(0, 2268, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self), __pyx_v_gbasis);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_7IterGB4___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self, struct __pyx_obj_6horton_6gbasis_4cext_GBasis *__pyx_v_gbasis) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2269
 * 
 *     def __cinit__(self, GBasis gbasis not None):
 *         self._this = new iter_gb.IterGB4(gbasis._this)             # <<<<<<<<<<<<<<
 *         self._gbasis = gbasis
 * 
 */
  __pyx_v_self->_this = new IterGB4(__pyx_v_gbasis->_this);

  /* "horton/gbasis/cext.pyx":2270
 *     def __cinit__(self, GBasis gbasis not None):
 *         self._this = new iter_gb.IterGB4(gbasis._this)
 *         self._gbasis = gbasis             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_gbasis));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_gbasis));
  __Pyx_GOTREF(__pyx_v_self->_gbasis);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_gbasis));
  __pyx_v_self->_gbasis = __pyx_v_gbasis;

  /* "horton/gbasis/cext.pyx":2268
 *     cdef GBasis _gbasis
 * 
 *     def __cinit__(self, GBasis gbasis not None):             # <<<<<<<<<<<<<<
 *         self._this = new iter_gb.IterGB4(gbasis._this)
 *         self._gbasis = gbasis
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2272
 *         self._gbasis = gbasis
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_7IterGB4_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_7IterGB4_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_7IterGB4_2__dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_7IterGB4_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":2273
 * 
 *     def __dealloc__(self):
 *         del self._this             # <<<<<<<<<<<<<<
 * 
 *     def inc_shell(self):
 */
  delete __pyx_v_self->_this;

  /* "horton/gbasis/cext.pyx":2272
 *         self._gbasis = gbasis
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._this
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":2275
 *         del self._this
 * 
 *     def inc_shell(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_shell()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_5inc_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB4_4inc_shell[] = "IterGB4.inc_shell(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_5inc_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc_shell (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_4inc_shell(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_4inc_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc_shell", 0);

  /* "horton/gbasis/cext.pyx":2276
 * 
 *     def inc_shell(self):
 *         return self._this.inc_shell()             # <<<<<<<<<<<<<<
 * 
 *     def update_shell(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->inc_shell()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2275
 *         del self._this
 * 
 *     def inc_shell(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_shell()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.inc_shell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2278
 *         return self._this.inc_shell()
 * 
 *     def update_shell(self):             # <<<<<<<<<<<<<<
 *         self._this.update_shell()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_7update_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB4_6update_shell[] = "IterGB4.update_shell(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_7update_shell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_shell (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_6update_shell(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_6update_shell(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_shell", 0);

  /* "horton/gbasis/cext.pyx":2279
 * 
 *     def update_shell(self):
 *         self._this.update_shell()             # <<<<<<<<<<<<<<
 * 
 *     def inc_prim(self):
 */
  __pyx_v_self->_this->update_shell();

  /* "horton/gbasis/cext.pyx":2278
 *         return self._this.inc_shell()
 * 
 *     def update_shell(self):             # <<<<<<<<<<<<<<
 *         self._this.update_shell()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2281
 *         self._this.update_shell()
 * 
 *     def inc_prim(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_prim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_9inc_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB4_8inc_prim[] = "IterGB4.inc_prim(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_9inc_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc_prim (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_8inc_prim(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_8inc_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc_prim", 0);

  /* "horton/gbasis/cext.pyx":2282
 * 
 *     def inc_prim(self):
 *         return self._this.inc_prim()             # <<<<<<<<<<<<<<
 * 
 *     def update_prim(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_this->inc_prim()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2281
 *         self._this.update_shell()
 * 
 *     def inc_prim(self):             # <<<<<<<<<<<<<<
 *         return self._this.inc_prim()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.inc_prim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2284
 *         return self._this.inc_prim()
 * 
 *     def update_prim(self):             # <<<<<<<<<<<<<<
 *         self._this.update_prim()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_11update_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB4_10update_prim[] = "IterGB4.update_prim(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_11update_prim(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_prim (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_10update_prim(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_10update_prim(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_prim", 0);

  /* "horton/gbasis/cext.pyx":2285
 * 
 *     def update_prim(self):
 *         self._this.update_prim()             # <<<<<<<<<<<<<<
 * 
 *     def store(self, np.ndarray[double, ndim=4] work not None,
 */
  __pyx_v_self->_this->update_prim();

  /* "horton/gbasis/cext.pyx":2284
 *         return self._this.inc_prim()
 * 
 *     def update_prim(self):             # <<<<<<<<<<<<<<
 *         self._this.update_prim()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2287
 *         self._this.update_prim()
 * 
 *     def store(self, np.ndarray[double, ndim=4] work not None,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=4] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_13store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB4_12store[] = "IterGB4.store(self, ndarray work, ndarray output)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_13store(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_work = 0;
  PyArrayObject *__pyx_v_output = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("store (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_work,&__pyx_n_s_output,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_work)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_output)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, 1); __PYX_ERR(0, 2287, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "store") < 0)) __PYX_ERR(0, 2287, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_work = ((PyArrayObject *)values[0]);
    __pyx_v_output = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("store", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2287, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_work), __pyx_ptype_5numpy_ndarray, 0, "work", 0))) __PYX_ERR(0, 2287, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output), __pyx_ptype_5numpy_ndarray, 0, "output", 0))) __PYX_ERR(0, 2288, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_12store(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self), __pyx_v_work, __pyx_v_output);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_12store(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self, PyArrayObject *__pyx_v_work, PyArrayObject *__pyx_v_output) {
  CYTHON_UNUSED PyObject *__pyx_v_max_shell_nbasis = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output;
  __Pyx_Buffer __pyx_pybuffer_output;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_work;
  __Pyx_Buffer __pyx_pybuffer_work;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  __Pyx_RefNannySetupContext("store", 0);
  __pyx_pybuffer_work.pybuffer.buf = NULL;
  __pyx_pybuffer_work.refcount = 0;
  __pyx_pybuffernd_work.data = NULL;
  __pyx_pybuffernd_work.rcbuffer = &__pyx_pybuffer_work;
  __pyx_pybuffer_output.pybuffer.buf = NULL;
  __pyx_pybuffer_output.refcount = 0;
  __pyx_pybuffernd_output.data = NULL;
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_work.rcbuffer->pybuffer, (PyObject*)__pyx_v_work, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2287, __pyx_L1_error)
  }
  __pyx_pybuffernd_work.diminfo[0].strides = __pyx_pybuffernd_work.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_work.diminfo[0].shape = __pyx_pybuffernd_work.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_work.diminfo[1].strides = __pyx_pybuffernd_work.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_work.diminfo[1].shape = __pyx_pybuffernd_work.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_work.diminfo[2].strides = __pyx_pybuffernd_work.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_work.diminfo[2].shape = __pyx_pybuffernd_work.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_work.diminfo[3].strides = __pyx_pybuffernd_work.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_work.diminfo[3].shape = __pyx_pybuffernd_work.rcbuffer->pybuffer.shape[3];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_v_output, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 4, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2287, __pyx_L1_error)
  }
  __pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_output.diminfo[2].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_output.diminfo[2].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[2]; __pyx_pybuffernd_output.diminfo[3].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[3]; __pyx_pybuffernd_output.diminfo[3].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[3];

  /* "horton/gbasis/cext.pyx":2289
 *     def store(self, np.ndarray[double, ndim=4] work not None,
 *               np.ndarray[double, ndim=4] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)             # <<<<<<<<<<<<<<
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_max_shell_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_shell_nbasis = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":2290
 *               np.ndarray[double, ndim=4] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)             # <<<<<<<<<<<<<<
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 *         assert work.shape[2] == get_shell_nbasis(self._this.shell_type2)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_work->dimensions[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2290, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2291
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)             # <<<<<<<<<<<<<<
 *         assert work.shape[2] == get_shell_nbasis(self._this.shell_type2)
 *         assert work.shape[3] == get_shell_nbasis(self._this.shell_type3)
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_work->dimensions[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2291, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2292
 *         assert work.shape[0] == get_shell_nbasis(self._this.shell_type0)
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 *         assert work.shape[2] == get_shell_nbasis(self._this.shell_type2)             # <<<<<<<<<<<<<<
 *         assert work.shape[3] == get_shell_nbasis(self._this.shell_type3)
 *         assert work.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_work->dimensions[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2292, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2293
 *         assert work.shape[1] == get_shell_nbasis(self._this.shell_type1)
 *         assert work.shape[2] == get_shell_nbasis(self._this.shell_type2)
 *         assert work.shape[3] == get_shell_nbasis(self._this.shell_type3)             # <<<<<<<<<<<<<<
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_work->dimensions[3])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_get_shell_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2293, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2293, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2294
 *         assert work.shape[2] == get_shell_nbasis(self._this.shell_type2)
 *         assert work.shape[3] == get_shell_nbasis(self._this.shell_type3)
 *         assert work.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.shape[1] == self._gbasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_work), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2294, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2294, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2295
 *         assert work.shape[3] == get_shell_nbasis(self._this.shell_type3)
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis             # <<<<<<<<<<<<<<
 *         assert output.shape[1] == self._gbasis.nbasis
 *         assert output.shape[2] == self._gbasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2295, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2296
 *         assert work.flags['C_CONTIGUOUS']
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.shape[1] == self._gbasis.nbasis             # <<<<<<<<<<<<<<
 *         assert output.shape[2] == self._gbasis.nbasis
 *         assert output.shape[3] == self._gbasis.nbasis
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2296, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2297
 *         assert output.shape[0] == self._gbasis.nbasis
 *         assert output.shape[1] == self._gbasis.nbasis
 *         assert output.shape[2] == self._gbasis.nbasis             # <<<<<<<<<<<<<<
 *         assert output.shape[3] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2297, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2297, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2298
 *         assert output.shape[1] == self._gbasis.nbasis
 *         assert output.shape[2] == self._gbasis.nbasis
 *         assert output.shape[3] == self._gbasis.nbasis             # <<<<<<<<<<<<<<
 *         assert output.flags['C_CONTIGUOUS']
 *         self._this.store(&work[0, 0, 0, 0], &output[0, 0, 0, 0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_3 = __Pyx_PyInt_From_Py_intptr_t((__pyx_v_output->dimensions[3])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->_gbasis), __pyx_n_s_nbasis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2298, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2299
 *         assert output.shape[2] == self._gbasis.nbasis
 *         assert output.shape[3] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *         self._this.store(&work[0, 0, 0, 0], &output[0, 0, 0, 0])
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output), __pyx_n_s_flags); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 2299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_6)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2299, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2300
 *         assert output.shape[3] == self._gbasis.nbasis
 *         assert output.flags['C_CONTIGUOUS']
 *         self._this.store(&work[0, 0, 0, 0], &output[0, 0, 0, 0])             # <<<<<<<<<<<<<<
 * 
 *     property public_fields:
 */
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_work.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_11 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_work.diminfo[0].shape)) __pyx_t_11 = 0;
  if (__pyx_t_8 < 0) {
    __pyx_t_8 += __pyx_pybuffernd_work.diminfo[1].shape;
    if (unlikely(__pyx_t_8 < 0)) __pyx_t_11 = 1;
  } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_work.diminfo[1].shape)) __pyx_t_11 = 1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd_work.diminfo[2].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_11 = 2;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_work.diminfo[2].shape)) __pyx_t_11 = 2;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_pybuffernd_work.diminfo[3].shape;
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 3;
  } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_work.diminfo[3].shape)) __pyx_t_11 = 3;
  if (unlikely(__pyx_t_11 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_11);
    __PYX_ERR(0, 2300, __pyx_L1_error)
  }
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_11 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_output.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_11 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_output.diminfo[0].shape)) __pyx_t_11 = 0;
  if (__pyx_t_13 < 0) {
    __pyx_t_13 += __pyx_pybuffernd_output.diminfo[1].shape;
    if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
  } else if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_output.diminfo[1].shape)) __pyx_t_11 = 1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_output.diminfo[2].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_11 = 2;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_output.diminfo[2].shape)) __pyx_t_11 = 2;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_output.diminfo[3].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 3;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_output.diminfo[3].shape)) __pyx_t_11 = 3;
  if (unlikely(__pyx_t_11 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_11);
    __PYX_ERR(0, 2300, __pyx_L1_error)
  }
  __pyx_v_self->_this->store((&(*__Pyx_BufPtrStrided4d(double *, __pyx_pybuffernd_work.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_work.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_work.diminfo[1].strides, __pyx_t_9, __pyx_pybuffernd_work.diminfo[2].strides, __pyx_t_10, __pyx_pybuffernd_work.diminfo[3].strides))), (&(*__Pyx_BufPtrStrided4d(double *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_output.diminfo[1].strides, __pyx_t_14, __pyx_pybuffernd_output.diminfo[2].strides, __pyx_t_15, __pyx_pybuffernd_output.diminfo[3].strides))));

  /* "horton/gbasis/cext.pyx":2287
 *         self._this.update_prim()
 * 
 *     def store(self, np.ndarray[double, ndim=4] work not None,             # <<<<<<<<<<<<<<
 *               np.ndarray[double, ndim=4] output not None):
 *         max_shell_nbasis = get_shell_nbasis(self._gbasis.max_shell_type)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.store", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_work.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_max_shell_nbasis);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2303
 * 
 *     property public_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.con_coeff,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_13public_fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_13public_fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_13public_fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_13public_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2304
 *     property public_fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._this.con_coeff,
 *                 self._this.shell_type0, self._this.shell_type1, self._this.shell_type2, self._this.shell_type3,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2305
 *         def __get__(self):
 *             return (
 *                 self._this.con_coeff,             # <<<<<<<<<<<<<<
 *                 self._this.shell_type0, self._this.shell_type1, self._this.shell_type2, self._this.shell_type3,
 *                 self._this.alpha0, self._this.alpha1, self._this.alpha2, self._this.alpha3,
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_this->con_coeff); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "horton/gbasis/cext.pyx":2306
 *             return (
 *                 self._this.con_coeff,
 *                 self._this.shell_type0, self._this.shell_type1, self._this.shell_type2, self._this.shell_type3,             # <<<<<<<<<<<<<<
 *                 self._this.alpha0, self._this.alpha1, self._this.alpha2, self._this.alpha3,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->_this->shell_type3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "horton/gbasis/cext.pyx":2307
 *                 self._this.con_coeff,
 *                 self._this.shell_type0, self._this.shell_type1, self._this.shell_type2, self._this.shell_type3,
 *                 self._this.alpha0, self._this.alpha1, self._this.alpha2, self._this.alpha3,             # <<<<<<<<<<<<<<
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],
 */
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_this->alpha0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->_this->alpha1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->_this->alpha2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->_this->alpha3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "horton/gbasis/cext.pyx":2308
 *                 self._this.shell_type0, self._this.shell_type1, self._this.shell_type2, self._this.shell_type3,
 *                 self._this.alpha0, self._this.alpha1, self._this.alpha2, self._this.alpha3,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],             # <<<<<<<<<<<<<<
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],
 *                 self._this.r2[0], self._this.r2[1], self._this.r2[2],
 */
  __pyx_t_10 = PyFloat_FromDouble((__pyx_v_self->_this->r0[0])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble((__pyx_v_self->_this->r0[1])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble((__pyx_v_self->_this->r0[2])); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "horton/gbasis/cext.pyx":2309
 *                 self._this.alpha0, self._this.alpha1, self._this.alpha2, self._this.alpha3,
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],             # <<<<<<<<<<<<<<
 *                 self._this.r2[0], self._this.r2[1], self._this.r2[2],
 *                 self._this.r3[0], self._this.r3[1], self._this.r3[2],
 */
  __pyx_t_13 = PyFloat_FromDouble((__pyx_v_self->_this->r1[0])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble((__pyx_v_self->_this->r1[1])); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble((__pyx_v_self->_this->r1[2])); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);

  /* "horton/gbasis/cext.pyx":2310
 *                 self._this.r0[0], self._this.r0[1], self._this.r0[2],
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],
 *                 self._this.r2[0], self._this.r2[1], self._this.r2[2],             # <<<<<<<<<<<<<<
 *                 self._this.r3[0], self._this.r3[1], self._this.r3[2],
 *                 self._this.ibasis0, self._this.ibasis1, self._this.ibasis2, self._this.ibasis3,
 */
  __pyx_t_16 = PyFloat_FromDouble((__pyx_v_self->_this->r2[0])); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble((__pyx_v_self->_this->r2[1])); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble((__pyx_v_self->_this->r2[2])); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);

  /* "horton/gbasis/cext.pyx":2311
 *                 self._this.r1[0], self._this.r1[1], self._this.r1[2],
 *                 self._this.r2[0], self._this.r2[1], self._this.r2[2],
 *                 self._this.r3[0], self._this.r3[1], self._this.r3[2],             # <<<<<<<<<<<<<<
 *                 self._this.ibasis0, self._this.ibasis1, self._this.ibasis2, self._this.ibasis3,
 *             )
 */
  __pyx_t_19 = PyFloat_FromDouble((__pyx_v_self->_this->r3[0])); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_20 = PyFloat_FromDouble((__pyx_v_self->_this->r3[1])); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = PyFloat_FromDouble((__pyx_v_self->_this->r3[2])); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);

  /* "horton/gbasis/cext.pyx":2312
 *                 self._this.r2[0], self._this.r2[1], self._this.r2[2],
 *                 self._this.r3[0], self._this.r3[1], self._this.r3[2],
 *                 self._this.ibasis0, self._this.ibasis1, self._this.ibasis2, self._this.ibasis3,             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_22 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ibasis0); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_23 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ibasis1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ibasis2); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_25 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ibasis3); if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 2312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);

  /* "horton/gbasis/cext.pyx":2305
 *         def __get__(self):
 *             return (
 *                 self._this.con_coeff,             # <<<<<<<<<<<<<<
 *                 self._this.shell_type0, self._this.shell_type1, self._this.shell_type2, self._this.shell_type3,
 *                 self._this.alpha0, self._this.alpha1, self._this.alpha2, self._this.alpha3,
 */
  __pyx_t_26 = PyTuple_New(25); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 2305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_26, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_26, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_26, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_26, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_26, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_26, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_26, 8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_26, 9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_26, 10, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_26, 11, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_26, 12, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_26, 13, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_26, 14, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_26, 15, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_26, 16, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_26, 17, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_26, 18, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_26, 19, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_26, 20, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_22);
  PyTuple_SET_ITEM(__pyx_t_26, 21, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_26, 22, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_24);
  PyTuple_SET_ITEM(__pyx_t_26, 23, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_25);
  PyTuple_SET_ITEM(__pyx_t_26, 24, __pyx_t_25);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_r = __pyx_t_26;
  __pyx_t_26 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2303
 * 
 *     property public_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.con_coeff,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.public_fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2316
 * 
 *     property private_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.ishell0, self._this.ishell1, self._this.ishell2, self._this.ishell3,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_14private_fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_14private_fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_14private_fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_14private_fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2317
 *     property private_fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._this.ishell0, self._this.ishell1, self._this.ishell2, self._this.ishell3,
 *                 self._this.nprim0, self._this.nprim1, self._this.nprim2, self._this.nprim3,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2318
 *         def __get__(self):
 *             return (
 *                 self._this.ishell0, self._this.ishell1, self._this.ishell2, self._this.ishell3,             # <<<<<<<<<<<<<<
 *                 self._this.nprim0, self._this.nprim1, self._this.nprim2, self._this.nprim3,
 *                 self._this.oprim0, self._this.oprim1, self._this.oprim2, self._this.oprim3,
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ishell0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ishell1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ishell2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_this->ishell3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "horton/gbasis/cext.pyx":2319
 *             return (
 *                 self._this.ishell0, self._this.ishell1, self._this.ishell2, self._this.ishell3,
 *                 self._this.nprim0, self._this.nprim1, self._this.nprim2, self._this.nprim3,             # <<<<<<<<<<<<<<
 *                 self._this.oprim0, self._this.oprim1, self._this.oprim2, self._this.oprim3,
 *                 self._this.iprim0, self._this.iprim1, self._this.iprim2, self._this.iprim3,
 */
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_self->_this->nprim0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_self->_this->nprim1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_self->_this->nprim2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_self->_this->nprim3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "horton/gbasis/cext.pyx":2320
 *                 self._this.ishell0, self._this.ishell1, self._this.ishell2, self._this.ishell3,
 *                 self._this.nprim0, self._this.nprim1, self._this.nprim2, self._this.nprim3,
 *                 self._this.oprim0, self._this.oprim1, self._this.oprim2, self._this.oprim3,             # <<<<<<<<<<<<<<
 *                 self._this.iprim0, self._this.iprim1, self._this.iprim2, self._this.iprim3,
 *             )
 */
  __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_self->_this->oprim0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_v_self->_this->oprim1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_v_self->_this->oprim2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyInt_From_long(__pyx_v_self->_this->oprim3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "horton/gbasis/cext.pyx":2321
 *                 self._this.nprim0, self._this.nprim1, self._this.nprim2, self._this.nprim3,
 *                 self._this.oprim0, self._this.oprim1, self._this.oprim2, self._this.oprim3,
 *                 self._this.iprim0, self._this.iprim1, self._this.iprim2, self._this.iprim3,             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_13 = __Pyx_PyInt_From_long(__pyx_v_self->_this->iprim0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyInt_From_long(__pyx_v_self->_this->iprim1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 2321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = __Pyx_PyInt_From_long(__pyx_v_self->_this->iprim2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 2321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = __Pyx_PyInt_From_long(__pyx_v_self->_this->iprim3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 2321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);

  /* "horton/gbasis/cext.pyx":2318
 *         def __get__(self):
 *             return (
 *                 self._this.ishell0, self._this.ishell1, self._this.ishell2, self._this.ishell3,             # <<<<<<<<<<<<<<
 *                 self._this.nprim0, self._this.nprim1, self._this.nprim2, self._this.nprim3,
 *                 self._this.oprim0, self._this.oprim1, self._this.oprim2, self._this.oprim3,
 */
  __pyx_t_17 = PyTuple_New(16); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 2318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_17, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_17, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_17, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_17, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_17, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_17, 8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_17, 9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_17, 10, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_17, 11, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_17, 12, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_17, 13, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_17, 14, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_17, 15, __pyx_t_16);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_r = __pyx_t_17;
  __pyx_t_17 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2316
 * 
 *     property private_fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._this.ishell0, self._this.ishell1, self._this.ishell2, self._this.ishell3,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.private_fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB4_14__reduce_cython__[] = "IterGB4.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_14__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_7IterGB4_16__setstate_cython__[] = "IterGB4.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_7IterGB4_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_7IterGB4_16__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_7IterGB4_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterGB4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2330
 * 
 * 
 * def iter_pow1_inc(np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_43iter_pow1_inc(PyObject *__pyx_self, PyObject *__pyx_v_n); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_42iter_pow1_inc[] = "iter_pow1_inc(ndarray n)";
static PyMethodDef __pyx_mdef_6horton_6gbasis_4cext_43iter_pow1_inc = {"iter_pow1_inc", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_43iter_pow1_inc, METH_O, __pyx_doc_6horton_6gbasis_4cext_42iter_pow1_inc};
static PyObject *__pyx_pw_6horton_6gbasis_4cext_43iter_pow1_inc(PyObject *__pyx_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_pow1_inc (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_5numpy_ndarray, 0, "n", 0))) __PYX_ERR(0, 2330, __pyx_L1_error)
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_42iter_pow1_inc(__pyx_self, ((PyArrayObject *)__pyx_v_n));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_42iter_pow1_inc(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_n) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_n;
  __Pyx_Buffer __pyx_pybuffer_n;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("iter_pow1_inc", 0);
  __pyx_pybuffer_n.pybuffer.buf = NULL;
  __pyx_pybuffer_n.refcount = 0;
  __pyx_pybuffernd_n.data = NULL;
  __pyx_pybuffernd_n.rcbuffer = &__pyx_pybuffer_n;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_n.rcbuffer->pybuffer, (PyObject*)__pyx_v_n, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2330, __pyx_L1_error)
  }
  __pyx_pybuffernd_n.diminfo[0].strides = __pyx_pybuffernd_n.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_n.diminfo[0].shape = __pyx_pybuffernd_n.rcbuffer->pybuffer.shape[0];

  /* "horton/gbasis/cext.pyx":2331
 * 
 * def iter_pow1_inc(np.ndarray[long, ndim=1] n not None):
 *     assert n.flags['C_CONTIGUOUS']             # <<<<<<<<<<<<<<
 *     assert n.shape[0] == 3
 *     return iter_pow.iter_pow1_inc(&n[0])
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_n), __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_s_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 2331, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2331, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2332
 * def iter_pow1_inc(np.ndarray[long, ndim=1] n not None):
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3             # <<<<<<<<<<<<<<
 *     return iter_pow.iter_pow1_inc(&n[0])
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!(((__pyx_v_n->dimensions[0]) == 3) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2332, __pyx_L1_error)
    }
  }
  #endif

  /* "horton/gbasis/cext.pyx":2333
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 *     return iter_pow.iter_pow1_inc(&n[0])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_n.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_n.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 2333, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(iter_pow1_inc((&(*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_n.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_n.diminfo[0].strides))))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2330
 * 
 * 
 * def iter_pow1_inc(np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("horton.gbasis.cext.iter_pow1_inc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_n.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2340
 *     cdef iter_pow.IterPow1* _c_i1p
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._c_i1p = new iter_pow.IterPow1()
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow1_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow1_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow1___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_8IterPow1___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  IterPow1 *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2341
 * 
 *     def __cinit__(self):
 *         self._c_i1p = new iter_pow.IterPow1()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new IterPow1();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2341, __pyx_L1_error)
  }
  __pyx_v_self->_c_i1p = __pyx_t_1;

  /* "horton/gbasis/cext.pyx":2340
 *     cdef iter_pow.IterPow1* _c_i1p
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._c_i1p = new iter_pow.IterPow1()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow1.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2343
 *         self._c_i1p = new iter_pow.IterPow1()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._c_i1p
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_8IterPow1_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_8IterPow1_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_8IterPow1_2__dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_8IterPow1_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":2344
 * 
 *     def __dealloc__(self):
 *         del self._c_i1p             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, long shell_type0):
 */
  delete __pyx_v_self->_c_i1p;

  /* "horton/gbasis/cext.pyx":2343
 *         self._c_i1p = new iter_pow.IterPow1()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._c_i1p
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":2346
 *         del self._c_i1p
 * 
 *     def __init__(self, long shell_type0):             # <<<<<<<<<<<<<<
 *         if shell_type0 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow1_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow1_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_shell_type0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shell_type0,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2346, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_shell_type0 = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_shell_type0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2346, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow1.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow1_4__init__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *)__pyx_v_self), __pyx_v_shell_type0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_8IterPow1_4__init__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self, long __pyx_v_shell_type0) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "horton/gbasis/cext.pyx":2347
 * 
 *     def __init__(self, long shell_type0):
 *         if shell_type0 < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('A shell_type parameter can not be negative.')
 *         self._c_i1p.reset(shell_type0)
 */
  __pyx_t_1 = ((__pyx_v_shell_type0 < 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "horton/gbasis/cext.pyx":2348
 *     def __init__(self, long shell_type0):
 *         if shell_type0 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')             # <<<<<<<<<<<<<<
 *         self._c_i1p.reset(shell_type0)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2348, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":2347
 * 
 *     def __init__(self, long shell_type0):
 *         if shell_type0 < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('A shell_type parameter can not be negative.')
 *         self._c_i1p.reset(shell_type0)
 */
  }

  /* "horton/gbasis/cext.pyx":2349
 *         if shell_type0 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')
 *         self._c_i1p.reset(shell_type0)             # <<<<<<<<<<<<<<
 * 
 *     def inc(self):
 */
  __pyx_v_self->_c_i1p->reset(__pyx_v_shell_type0);

  /* "horton/gbasis/cext.pyx":2346
 *         del self._c_i1p
 * 
 *     def __init__(self, long shell_type0):             # <<<<<<<<<<<<<<
 *         if shell_type0 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow1.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2351
 *         self._c_i1p.reset(shell_type0)
 * 
 *     def inc(self):             # <<<<<<<<<<<<<<
 *         return self._c_i1p.inc()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_7inc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_8IterPow1_6inc[] = "IterPow1.inc(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_7inc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow1_6inc(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_6inc(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc", 0);

  /* "horton/gbasis/cext.pyx":2352
 * 
 *     def inc(self):
 *         return self._c_i1p.inc()             # <<<<<<<<<<<<<<
 * 
 *     property fields:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_c_i1p->inc()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2351
 *         self._c_i1p.reset(shell_type0)
 * 
 *     def inc(self):             # <<<<<<<<<<<<<<
 *         return self._c_i1p.inc()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow1.inc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2355
 * 
 *     property fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._c_i1p.n0[0], self._c_i1p.n0[1], self._c_i1p.n0[2],
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_6fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_6fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow1_6fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_6fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2356
 *     property fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._c_i1p.n0[0], self._c_i1p.n0[1], self._c_i1p.n0[2],
 *                 self._c_i1p.ibasis0
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2357
 *         def __get__(self):
 *             return (
 *                 self._c_i1p.n0[0], self._c_i1p.n0[1], self._c_i1p.n0[2],             # <<<<<<<<<<<<<<
 *                 self._c_i1p.ibasis0
 *             )
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i1p->n0[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i1p->n0[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i1p->n0[2])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "horton/gbasis/cext.pyx":2358
 *             return (
 *                 self._c_i1p.n0[0], self._c_i1p.n0[1], self._c_i1p.n0[2],
 *                 self._c_i1p.ibasis0             # <<<<<<<<<<<<<<
 *             )
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_v_self->_c_i1p->ibasis0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "horton/gbasis/cext.pyx":2357
 *         def __get__(self):
 *             return (
 *                 self._c_i1p.n0[0], self._c_i1p.n0[1], self._c_i1p.n0[2],             # <<<<<<<<<<<<<<
 *                 self._c_i1p.ibasis0
 *             )
 */
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2355
 * 
 *     property fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._c_i1p.n0[0], self._c_i1p.n0[1], self._c_i1p.n0[2],
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow1.fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_8IterPow1_8__reduce_cython__[] = "IterPow1.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow1_8__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow1.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_8IterPow1_10__setstate_cython__[] = "IterPow1.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow1_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow1_10__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow1_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow1 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow1.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2366
 *     cdef iter_pow.IterPow2* _c_i2p
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._c_i2p = new iter_pow.IterPow2()
 * 
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow2_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow2___cinit__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_8IterPow2___cinit__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  IterPow2 *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "horton/gbasis/cext.pyx":2367
 * 
 *     def __cinit__(self):
 *         self._c_i2p = new iter_pow.IterPow2()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new IterPow2();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2367, __pyx_L1_error)
  }
  __pyx_v_self->_c_i2p = __pyx_t_1;

  /* "horton/gbasis/cext.pyx":2366
 *     cdef iter_pow.IterPow2* _c_i2p
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._c_i2p = new iter_pow.IterPow2()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow2.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2369
 *         self._c_i2p = new iter_pow.IterPow2()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._c_i2p
 * 
 */

/* Python wrapper */
static void __pyx_pw_6horton_6gbasis_4cext_8IterPow2_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6horton_6gbasis_4cext_8IterPow2_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6horton_6gbasis_4cext_8IterPow2_2__dealloc__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6horton_6gbasis_4cext_8IterPow2_2__dealloc__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "horton/gbasis/cext.pyx":2370
 * 
 *     def __dealloc__(self):
 *         del self._c_i2p             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, long shell_type0, long shell_type1):
 */
  delete __pyx_v_self->_c_i2p;

  /* "horton/gbasis/cext.pyx":2369
 *         self._c_i2p = new iter_pow.IterPow2()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._c_i2p
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "horton/gbasis/cext.pyx":2372
 *         del self._c_i2p
 * 
 *     def __init__(self, long shell_type0, long shell_type1):             # <<<<<<<<<<<<<<
 *         if shell_type0 < 0 or shell_type1 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')
 */

/* Python wrapper */
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow2_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6horton_6gbasis_4cext_8IterPow2_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  long __pyx_v_shell_type0;
  long __pyx_v_shell_type1;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shell_type0,&__pyx_n_s_shell_type1,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shell_type1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(0, 2372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2372, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_shell_type0 = __Pyx_PyInt_As_long(values[0]); if (unlikely((__pyx_v_shell_type0 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2372, __pyx_L3_error)
    __pyx_v_shell_type1 = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v_shell_type1 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 2372, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2372, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow2_4__init__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *)__pyx_v_self), __pyx_v_shell_type0, __pyx_v_shell_type1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6horton_6gbasis_4cext_8IterPow2_4__init__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self, long __pyx_v_shell_type0, long __pyx_v_shell_type1) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "horton/gbasis/cext.pyx":2373
 * 
 *     def __init__(self, long shell_type0, long shell_type1):
 *         if shell_type0 < 0 or shell_type1 < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('A shell_type parameter can not be negative.')
 *         self._c_i2p.reset(shell_type0, shell_type1)
 */
  __pyx_t_2 = ((__pyx_v_shell_type0 < 0) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_shell_type1 < 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "horton/gbasis/cext.pyx":2374
 *     def __init__(self, long shell_type0, long shell_type1):
 *         if shell_type0 < 0 or shell_type1 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')             # <<<<<<<<<<<<<<
 *         self._c_i2p.reset(shell_type0, shell_type1)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2374, __pyx_L1_error)

    /* "horton/gbasis/cext.pyx":2373
 * 
 *     def __init__(self, long shell_type0, long shell_type1):
 *         if shell_type0 < 0 or shell_type1 < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError('A shell_type parameter can not be negative.')
 *         self._c_i2p.reset(shell_type0, shell_type1)
 */
  }

  /* "horton/gbasis/cext.pyx":2375
 *         if shell_type0 < 0 or shell_type1 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')
 *         self._c_i2p.reset(shell_type0, shell_type1)             # <<<<<<<<<<<<<<
 * 
 *     def inc(self):
 */
  __pyx_v_self->_c_i2p->reset(__pyx_v_shell_type0, __pyx_v_shell_type1);

  /* "horton/gbasis/cext.pyx":2372
 *         del self._c_i2p
 * 
 *     def __init__(self, long shell_type0, long shell_type1):             # <<<<<<<<<<<<<<
 *         if shell_type0 < 0 or shell_type1 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2377
 *         self._c_i2p.reset(shell_type0, shell_type1)
 * 
 *     def inc(self):             # <<<<<<<<<<<<<<
 *         return self._c_i2p.inc()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_7inc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_8IterPow2_6inc[] = "IterPow2.inc(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_7inc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inc (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow2_6inc(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_6inc(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("inc", 0);

  /* "horton/gbasis/cext.pyx":2378
 * 
 *     def inc(self):
 *         return self._c_i2p.inc()             # <<<<<<<<<<<<<<
 * 
 *     property fields:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_c_i2p->inc()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2377
 *         self._c_i2p.reset(shell_type0, shell_type1)
 * 
 *     def inc(self):             # <<<<<<<<<<<<<<
 *         return self._c_i2p.inc()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow2.inc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "horton/gbasis/cext.pyx":2381
 * 
 *     property fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._c_i2p.n0[0], self._c_i2p.n0[1], self._c_i2p.n0[2],
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_6fields_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_6fields_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow2_6fields___get__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_6fields___get__(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "horton/gbasis/cext.pyx":2382
 *     property fields:
 *         def __get__(self):
 *             return (             # <<<<<<<<<<<<<<
 *                 self._c_i2p.n0[0], self._c_i2p.n0[1], self._c_i2p.n0[2],
 *                 self._c_i2p.n1[0], self._c_i2p.n1[1], self._c_i2p.n1[2],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "horton/gbasis/cext.pyx":2383
 *         def __get__(self):
 *             return (
 *                 self._c_i2p.n0[0], self._c_i2p.n0[1], self._c_i2p.n0[2],             # <<<<<<<<<<<<<<
 *                 self._c_i2p.n1[0], self._c_i2p.n1[1], self._c_i2p.n1[2],
 *                 self._c_i2p.offset, self._c_i2p.ibasis0, self._c_i2p.ibasis1,
 */
  __pyx_t_1 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i2p->n0[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i2p->n0[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i2p->n0[2])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "horton/gbasis/cext.pyx":2384
 *             return (
 *                 self._c_i2p.n0[0], self._c_i2p.n0[1], self._c_i2p.n0[2],
 *                 self._c_i2p.n1[0], self._c_i2p.n1[1], self._c_i2p.n1[2],             # <<<<<<<<<<<<<<
 *                 self._c_i2p.offset, self._c_i2p.ibasis0, self._c_i2p.ibasis1,
 *             )
 */
  __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i2p->n1[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i2p->n1[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_long((__pyx_v_self->_c_i2p->n1[2])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "horton/gbasis/cext.pyx":2385
 *                 self._c_i2p.n0[0], self._c_i2p.n0[1], self._c_i2p.n0[2],
 *                 self._c_i2p.n1[0], self._c_i2p.n1[1], self._c_i2p.n1[2],
 *                 self._c_i2p.offset, self._c_i2p.ibasis0, self._c_i2p.ibasis1,             # <<<<<<<<<<<<<<
 *             )
 */
  __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_self->_c_i2p->offset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_v_self->_c_i2p->ibasis0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyInt_From_long(__pyx_v_self->_c_i2p->ibasis1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "horton/gbasis/cext.pyx":2383
 *         def __get__(self):
 *             return (
 *                 self._c_i2p.n0[0], self._c_i2p.n0[1], self._c_i2p.n0[2],             # <<<<<<<<<<<<<<
 *                 self._c_i2p.n1[0], self._c_i2p.n1[1], self._c_i2p.n1[2],
 *                 self._c_i2p.offset, self._c_i2p.ibasis0, self._c_i2p.ibasis1,
 */
  __pyx_t_10 = PyTuple_New(9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 8, __pyx_t_9);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "horton/gbasis/cext.pyx":2381
 * 
 *     property fields:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (
 *                 self._c_i2p.n0[0], self._c_i2p.n0[1], self._c_i2p.n0[2],
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow2.fields.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_8IterPow2_8__reduce_cython__[] = "IterPow2.__reduce_cython__(self)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow2_8__reduce_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_6horton_6gbasis_4cext_8IterPow2_10__setstate_cython__[] = "IterPow2.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_6horton_6gbasis_4cext_8IterPow2_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6horton_6gbasis_4cext_8IterPow2_10__setstate_cython__(((struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6horton_6gbasis_4cext_8IterPow2_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6horton_6gbasis_4cext_IterPow2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("horton.gbasis.cext.IterPow2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 272, __pyx_L1_error)

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 276, __pyx_L1_error)

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 306, __pyx_L1_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 325, __pyx_L1_error)
      break;
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":847
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 851, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":852
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 852, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 853, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 853, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 856, __pyx_L1_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":859
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 860, __pyx_L1_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":870
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":878
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 880, __pyx_L1_error)

        /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":883
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":899
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 901, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":902
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 906, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":907
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1036, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1042, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1044, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1044, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1048, __pyx_L3_error)

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1050, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1050, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GBasis(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)o);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_shell_map = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_nprims = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_shell_types = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_alphas = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_con_coeffs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_6GBasis_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_GBasis(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *p = (struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_6GBasis_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_centers);
  Py_CLEAR(p->_shell_map);
  Py_CLEAR(p->_nprims);
  Py_CLEAR(p->_shell_types);
  Py_CLEAR(p->_alphas);
  Py_CLEAR(p->_con_coeffs);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext_GBasis(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *p = (struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)o;
  if (p->_centers) {
    e = (*v)(((PyObject *)p->_centers), a); if (e) return e;
  }
  if (p->_shell_map) {
    e = (*v)(((PyObject *)p->_shell_map), a); if (e) return e;
  }
  if (p->_nprims) {
    e = (*v)(((PyObject *)p->_nprims), a); if (e) return e;
  }
  if (p->_shell_types) {
    e = (*v)(((PyObject *)p->_shell_types), a); if (e) return e;
  }
  if (p->_alphas) {
    e = (*v)(((PyObject *)p->_alphas), a); if (e) return e;
  }
  if (p->_con_coeffs) {
    e = (*v)(((PyObject *)p->_con_coeffs), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext_GBasis(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext_GBasis *p = (struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)o;
  tmp = ((PyObject*)p->_centers);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_shell_map);
  p->_shell_map = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_nprims);
  p->_nprims = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_shell_types);
  p->_shell_types = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_alphas);
  p->_alphas = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_con_coeffs);
  p->_con_coeffs = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_centers(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_7centers_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_shell_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_9shell_map_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_nprims(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_6nprims_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_shell_types(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_11shell_types_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_alphas(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_6alphas_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_con_coeffs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_10con_coeffs_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_ncenter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_7ncenter_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_nshell(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_6nshell_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_nprim_total(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_11nprim_total_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_nbasis(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_6nbasis_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_shell_lookup(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_12shell_lookup_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_basis_offsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_13basis_offsets_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_nscales(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_7nscales_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_6GBasis_max_shell_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_6GBasis_14max_shell_type_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GBasis[] = {
  {"concatenate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_6GBasis_7concatenate, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_6GBasis_6concatenate},
  {"from_hdf5", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_9from_hdf5, METH_O, __pyx_doc_6horton_6gbasis_4cext_6GBasis_8from_hdf5},
  {"to_hdf5", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_11to_hdf5, METH_O, __pyx_doc_6horton_6gbasis_4cext_6GBasis_10to_hdf5},
  {"_log_init", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_13_log_init, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_6GBasis_12_log_init},
  {"get_scales", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_15get_scales, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_6GBasis_14get_scales},
  {"compute_grid_point1", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_6GBasis_17compute_grid_point1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_6GBasis_16compute_grid_point1},
  {"get_subset", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_19get_subset, METH_O, __pyx_doc_6horton_6gbasis_4cext_6GBasis_18get_subset},
  {"get_basis_atoms", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_21get_basis_atoms, METH_O, __pyx_doc_6horton_6gbasis_4cext_6GBasis_20get_basis_atoms},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_23__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_6GBasis_22__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_6GBasis_25__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_6GBasis_24__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GBasis[] = {
  {(char *)"centers", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_centers, 0, (char *)0, 0},
  {(char *)"shell_map", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_shell_map, 0, (char *)0, 0},
  {(char *)"nprims", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_nprims, 0, (char *)0, 0},
  {(char *)"shell_types", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_shell_types, 0, (char *)0, 0},
  {(char *)"alphas", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_alphas, 0, (char *)0, 0},
  {(char *)"con_coeffs", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_con_coeffs, 0, (char *)0, 0},
  {(char *)"ncenter", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_ncenter, 0, (char *)0, 0},
  {(char *)"nshell", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_nshell, 0, (char *)0, 0},
  {(char *)"nprim_total", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_nprim_total, 0, (char *)0, 0},
  {(char *)"nbasis", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_nbasis, 0, (char *)0, 0},
  {(char *)"shell_lookup", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_shell_lookup, 0, (char *)0, 0},
  {(char *)"basis_offsets", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_basis_offsets, 0, (char *)0, 0},
  {(char *)"nscales", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_nscales, 0, (char *)0, 0},
  {(char *)"max_shell_type", __pyx_getprop_6horton_6gbasis_4cext_6GBasis_max_shell_type, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GBasis = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GBasis", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GBasis), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GBasis, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "GBasis(centers, shell_map, nprims, shell_types, alphas, con_coeffs)\n\n       This class describes basis sets applied to a certain molecular structure.\n\n       **Arguments:**\n\n       centers\n            A numpy array with centers for the basis functions.\n            shape = (ncenter, 3)\n\n       shell_map\n            An array with the center index for each shell.\n            shape = (nshell,)\n\n       nprims\n            The number of primitives in each shell.\n            shape = (nshell,)\n\n       shell_types\n            An array with contraction types: 0 = S, 1 = P, 2 = Cartesian D,\n            3 = Cartesian F, ..., -2 = pure D, -3 = pure F, ...\n            shape = (nshell,)\n\n       alphas\n            The exponents of the primitives in one shell.\n            shape = (sum(nprims),)\n\n       con_coeffs\n            The contraction coefficients of the primitives for each\n            contraction in a contiguous array. The coefficients are ordered\n            according to the shells. Within each shell, the coefficients are\n            grouped per exponent.\n            shape = (sum(nprims),)\n\n       All arguments may also be lists. In any case, copies are made of the\n       arguments and stored internally, and are not meant to be modified once\n       the GOBasis object is created.\n\n       The order of the pure shells is based on the order of real spherical.\n       The functions are sorted from low to high magnetic quantum number,\n       with cosine-like functions before the sine-like functions. The order\n       of functions in a Cartesian shell is alhpabetic. Some examples:\n\n       shell_type = 0, S:\n         0 -> 1\n       shell_type = 1, P:\n         0 -> x\n         1 -> y\n         2 -> z\n       shell_type = 2, Cartesian D:\n         0 -> xx\n         1 -> xy\n         2 -> xz\n         3 -> yy\n         4 -> yz\n         5 -> zz\n       shell_type = 3, Cartesian F:\n         0 -> xxx\n         1 -> xxy\n         2 -> xxz\n      ""   3 -> xyy\n         4 -> xyz\n         5 -> xzz\n         6 -> yyy\n         7 -> yyz\n         8 -> yzz\n         9 -> zzz\n       shell_type = -1, not allowed\n       shell_type = -2, pure D:\n         0 -> zz\n         1 -> xz\n         2 -> yz\n         3 -> xx-yy\n         4 -> xy\n       shell_type = -3, pure F:\n         0 -> zzz\n         1 -> xzz\n         2 -> yzz\n         3 -> xxz-yyz\n         4 -> xyz\n         5 -> xxx-3xyy\n         6 -> 3xxy-yyy\n    ", /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_GBasis, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_GBasis, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GBasis, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GBasis, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6horton_6gbasis_4cext_6GBasis_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GBasis, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GOBasis(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GBasis(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_7GOBasis_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GOBasis[] = {
  {"check_matrix_coeffs", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_3check_matrix_coeffs, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_2check_matrix_coeffs},
  {"check_matrix_two_index", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_5check_matrix_two_index, METH_O, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_4check_matrix_two_index},
  {"check_matrix_four_index", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_7check_matrix_four_index, METH_O, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_6check_matrix_four_index},
  {"compute_overlap", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_9compute_overlap, METH_O, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_8compute_overlap},
  {"compute_kinetic", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_11compute_kinetic, METH_O, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_10compute_kinetic},
  {"compute_nuclear_attraction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_13compute_nuclear_attraction, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_12compute_nuclear_attraction},
  {"compute_erf_attraction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_15compute_erf_attraction, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_14compute_erf_attraction},
  {"compute_gauss_attraction", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_17compute_gauss_attraction, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_16compute_gauss_attraction},
  {"compute_multipole_moment", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_19compute_multipole_moment, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_18compute_multipole_moment},
  {"compute_electron_repulsion", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_21compute_electron_repulsion, METH_O, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_20compute_electron_repulsion},
  {"compute_erf_repulsion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_23compute_erf_repulsion, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_22compute_erf_repulsion},
  {"compute_gauss_repulsion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_25compute_gauss_repulsion, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_24compute_gauss_repulsion},
  {"compute_ralpha_repulsion", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_27compute_ralpha_repulsion, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_26compute_ralpha_repulsion},
  {"compute_grid_orbitals_exp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_29compute_grid_orbitals_exp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_28compute_grid_orbitals_exp},
  {"compute_grid_orb_gradient_exp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_31compute_grid_orb_gradient_exp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_30compute_grid_orb_gradient_exp},
  {"_compute_grid1_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_33_compute_grid1_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_32_compute_grid1_dm},
  {"compute_grid_density_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_35compute_grid_density_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_34compute_grid_density_dm},
  {"compute_grid_gradient_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_37compute_grid_gradient_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_36compute_grid_gradient_dm},
  {"compute_grid_gga_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_39compute_grid_gga_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_38compute_grid_gga_dm},
  {"compute_grid_kinetic_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_41compute_grid_kinetic_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_40compute_grid_kinetic_dm},
  {"compute_grid_hessian_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_43compute_grid_hessian_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_42compute_grid_hessian_dm},
  {"compute_grid_mgga_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_45compute_grid_mgga_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_44compute_grid_mgga_dm},
  {"compute_grid_hartree_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_47compute_grid_hartree_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_46compute_grid_hartree_dm},
  {"compute_grid_esp_dm", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_49compute_grid_esp_dm, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_48compute_grid_esp_dm},
  {"_compute_grid1_fock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_51_compute_grid1_fock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_50_compute_grid1_fock},
  {"compute_grid_density_fock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_53compute_grid_density_fock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_52compute_grid_density_fock},
  {"compute_grid_gradient_fock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_55compute_grid_gradient_fock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_54compute_grid_gradient_fock},
  {"compute_grid_gga_fock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_57compute_grid_gga_fock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_56compute_grid_gga_fock},
  {"compute_grid_kinetic_fock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_59compute_grid_kinetic_fock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_58compute_grid_kinetic_fock},
  {"compute_grid_hessian_fock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_61compute_grid_hessian_fock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_60compute_grid_hessian_fock},
  {"compute_grid_mgga_fock", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_63compute_grid_mgga_fock, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_62compute_grid_mgga_fock},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_65__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_64__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7GOBasis_67__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_7GOBasis_66__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GOBasis = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GOBasis", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GOBasis), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GBasis, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_GBasis, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_GBasis, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GOBasis, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6horton_6gbasis_4cext_6GBasis_3__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GOBasis, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2Integral(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2Integral(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_11GB2Integral_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB2Integral_nwork(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB2Integral_5nwork_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB2Integral_max_shell_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB2Integral_14max_shell_type_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB2Integral_max_nbasis(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB2Integral_10max_nbasis_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB2Integral[] = {
  {"reset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_3reset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_2reset},
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_5add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_4add},
  {"cart_to_pure", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_7cart_to_pure, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_6cart_to_pure},
  {"get_work", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_9get_work, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_8get_work},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_11__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB2Integral_13__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_11GB2Integral_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB2Integral[] = {
  {(char *)"nwork", __pyx_getprop_6horton_6gbasis_4cext_11GB2Integral_nwork, 0, (char *)0, 0},
  {(char *)"max_shell_type", __pyx_getprop_6horton_6gbasis_4cext_11GB2Integral_max_shell_type, 0, (char *)0, 0},
  {(char *)"max_nbasis", __pyx_getprop_6horton_6gbasis_4cext_11GB2Integral_max_nbasis, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB2Integral = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB2Integral", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB2Integral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB2Integral, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB2Integral, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB2Integral, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB2Integral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2OverlapIntegral(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB2Integral(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB2OverlapIntegral[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_18GB2OverlapIntegral_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB2OverlapIntegral_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_18GB2OverlapIntegral_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB2OverlapIntegral", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB2OverlapIntegral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB2OverlapIntegral, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB2OverlapIntegral, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB2OverlapIntegral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2KineticIntegral(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB2Integral(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB2KineticIntegral[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_18GB2KineticIntegral_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB2KineticIntegral_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_18GB2KineticIntegral_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB2KineticIntegral", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB2KineticIntegral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB2KineticIntegral, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB2KineticIntegral, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB2KineticIntegral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *p;
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB2Integral(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *)o);
  p->_charges = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_charges);
  Py_CLEAR(p->_centers);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2Integral(o);
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *)o;
  e = ((likely(__pyx_ptype_6horton_6gbasis_4cext_GB2Integral)) ? ((__pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_traverse) ? __pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral)); if (e) return e;
  if (p->_charges) {
    e = (*v)(((PyObject *)p->_charges), a); if (e) return e;
  }
  if (p->_centers) {
    e = (*v)(((PyObject *)p->_centers), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral *)o;
  if (likely(__pyx_ptype_6horton_6gbasis_4cext_GB2Integral)) { if (__pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_clear) __pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral);
  tmp = ((PyObject*)p->_charges);
  p->_charges = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_centers);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_28GB2NuclearAttractionIntegral_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB2NuclearAttractionIntegral", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper for ints.GB2NuclearAttractionIntegral, for testing only", /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2ErfAttractionIntegral(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *p;
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB2Integral(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)o);
  p->_charges = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2ErfAttractionIntegral(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_charges);
  Py_CLEAR(p->_centers);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2Integral(o);
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext_GB2ErfAttractionIntegral(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)o;
  e = ((likely(__pyx_ptype_6horton_6gbasis_4cext_GB2Integral)) ? ((__pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_traverse) ? __pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6horton_6gbasis_4cext_GB2ErfAttractionIntegral)); if (e) return e;
  if (p->_charges) {
    e = (*v)(((PyObject *)p->_charges), a); if (e) return e;
  }
  if (p->_centers) {
    e = (*v)(((PyObject *)p->_centers), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext_GB2ErfAttractionIntegral(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral *)o;
  if (likely(__pyx_ptype_6horton_6gbasis_4cext_GB2Integral)) { if (__pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_clear) __pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6horton_6gbasis_4cext_GB2ErfAttractionIntegral);
  tmp = ((PyObject*)p->_charges);
  p->_charges = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_centers);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_mu(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2mu_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB2ErfAttractionIntegral[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB2ErfAttractionIntegral[] = {
  {(char *)"mu", __pyx_getprop_6horton_6gbasis_4cext_24GB2ErfAttractionIntegral_mu, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB2ErfAttractionIntegral", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB2ErfAttractionIntegral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2ErfAttractionIntegral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper for ints.GB2ErfAttractionIntegral, for testing only", /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_GB2ErfAttractionIntegral, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_GB2ErfAttractionIntegral, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB2ErfAttractionIntegral, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB2ErfAttractionIntegral, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB2ErfAttractionIntegral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB2GaussAttractionIntegral(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *p;
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB2Integral(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)o);
  p->_charges = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2GaussAttractionIntegral(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_charges);
  Py_CLEAR(p->_centers);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2Integral(o);
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext_GB2GaussAttractionIntegral(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)o;
  e = ((likely(__pyx_ptype_6horton_6gbasis_4cext_GB2Integral)) ? ((__pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_traverse) ? __pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6horton_6gbasis_4cext_GB2GaussAttractionIntegral)); if (e) return e;
  if (p->_charges) {
    e = (*v)(((PyObject *)p->_charges), a); if (e) return e;
  }
  if (p->_centers) {
    e = (*v)(((PyObject *)p->_centers), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext_GB2GaussAttractionIntegral(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *p = (struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral *)o;
  if (likely(__pyx_ptype_6horton_6gbasis_4cext_GB2Integral)) { if (__pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_clear) __pyx_ptype_6horton_6gbasis_4cext_GB2Integral->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6horton_6gbasis_4cext_GB2GaussAttractionIntegral);
  tmp = ((PyObject*)p->_charges);
  p->_charges = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_centers);
  p->_centers = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_c(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_1c_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5alpha_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB2GaussAttractionIntegral[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB2GaussAttractionIntegral[] = {
  {(char *)"c", __pyx_getprop_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_c, 0, (char *)0, 0},
  {(char *)"alpha", __pyx_getprop_6horton_6gbasis_4cext_26GB2GaussAttractionIntegral_alpha, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB2GaussAttractionIntegral", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB2GaussAttractionIntegral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB2GaussAttractionIntegral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper for ints.GB2GaussAttractionIntegral, for testing only", /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_GB2GaussAttractionIntegral, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_GB2GaussAttractionIntegral, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB2GaussAttractionIntegral, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB2GaussAttractionIntegral, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB2GaussAttractionIntegral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4Integral(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_GB4Integral(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_11GB4Integral_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB4Integral_nwork(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB4Integral_5nwork_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB4Integral_max_shell_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB4Integral_14max_shell_type_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB4Integral_max_nbasis(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB4Integral_10max_nbasis_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB4Integral[] = {
  {"reset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_3reset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_2reset},
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_5add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_4add},
  {"cart_to_pure", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_7cart_to_pure, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_6cart_to_pure},
  {"get_work", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_9get_work, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_8get_work},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_11__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB4Integral_13__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_11GB4Integral_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB4Integral[] = {
  {(char *)"nwork", __pyx_getprop_6horton_6gbasis_4cext_11GB4Integral_nwork, 0, (char *)0, 0},
  {(char *)"max_shell_type", __pyx_getprop_6horton_6gbasis_4cext_11GB4Integral_max_shell_type, 0, (char *)0, 0},
  {(char *)"max_nbasis", __pyx_getprop_6horton_6gbasis_4cext_11GB4Integral_max_nbasis, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB4Integral = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB4Integral", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB4Integral), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB4Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB4Integral", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB4Integral, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB4Integral, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB4Integral, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB4Integral(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_34GB4ElectronRepulsionIntegralLibInt_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB4ElectronRepulsionIntegralLibInt", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB4Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4ErfIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB4Integral(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_mu(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2mu_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB4ErfIntegralLibInt[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB4ErfIntegralLibInt[] = {
  {(char *)"mu", __pyx_getprop_6horton_6gbasis_4cext_20GB4ErfIntegralLibInt_mu, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB4ErfIntegralLibInt", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB4ErfIntegralLibInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB4Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB4ElectronRepulsionIntegralLibInt, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB4ErfIntegralLibInt, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB4ErfIntegralLibInt, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB4ErfIntegralLibInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4GaussIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB4Integral(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_c(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_1c_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5alpha_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB4GaussIntegralLibInt[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB4GaussIntegralLibInt[] = {
  {(char *)"c", __pyx_getprop_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_c, 0, (char *)0, 0},
  {(char *)"alpha", __pyx_getprop_6horton_6gbasis_4cext_22GB4GaussIntegralLibInt_alpha, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB4GaussIntegralLibInt", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB4GaussIntegralLibInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB4Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB4GaussIntegralLibInt, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB4GaussIntegralLibInt, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB4GaussIntegralLibInt, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB4GaussIntegralLibInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB4Integral(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_alpha(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5alpha_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt[] = {
  {(char *)"alpha", __pyx_getprop_6horton_6gbasis_4cext_23GB4RAlphaIntegralLibInt_alpha, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB4RAlphaIntegralLibInt", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB4Integral, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for ints.GB4RAlphaIntegralLibInt, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_nwork(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_5nwork_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_max_shell_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_14max_shell_type_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_max_nbasis(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_10max_nbasis_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_shell_type0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_11shell_type0_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_dim_work(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_8dim_work_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_dim_output(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_10dim_output_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB1DMGridFn[] = {
  {"reset", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_3reset, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_2reset},
  {"add", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_5add, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_4add},
  {"cart_to_pure", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_7cart_to_pure, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_6cart_to_pure},
  {"get_work", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_9get_work, METH_O, __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_8get_work},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_11__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_10__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_11GB1DMGridFn_13__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_11GB1DMGridFn_12__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_GB1DMGridFn[] = {
  {(char *)"nwork", __pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_nwork, 0, (char *)0, 0},
  {(char *)"max_shell_type", __pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_max_shell_type, 0, (char *)0, 0},
  {(char *)"max_nbasis", __pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_max_nbasis, 0, (char *)0, 0},
  {(char *)"shell_type0", __pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_shell_type0, 0, (char *)0, 0},
  {(char *)"dim_work", __pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_dim_work, 0, (char *)0, 0},
  {(char *)"dim_output", __pyx_getprop_6horton_6gbasis_4cext_11GB1DMGridFn_dim_output, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB1DMGridFn = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB1DMGridFn", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Wrapper for fns.GB1DMGridFn, for testing only", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridDensityFn(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB1DMGridDensityFn[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridDensityFn_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridDensityFn_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridDensityFn_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB1DMGridDensityFn", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridDensityFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB1DMGridDensityFn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridDensityFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridGradientFn(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB1DMGridGradientFn[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_19GB1DMGridGradientFn_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_19GB1DMGridGradientFn_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_19GB1DMGridGradientFn_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB1DMGridGradientFn", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGradientFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB1DMGridGradientFn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridGradientFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridGGAFn(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB1DMGridGGAFn[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_14GB1DMGridGGAFn_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_14GB1DMGridGGAFn_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_14GB1DMGridGGAFn_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB1DMGridGGAFn", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridGGAFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB1DMGridGGAFn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridGGAFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridKineticFn(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB1DMGridKineticFn[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridKineticFn_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridKineticFn_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridKineticFn_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB1DMGridKineticFn", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridKineticFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB1DMGridKineticFn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridKineticFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridHessianFn(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB1DMGridHessianFn[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridHessianFn_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_18GB1DMGridHessianFn_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_18GB1DMGridHessianFn_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB1DMGridHessianFn", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridHessianFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB1DMGridHessianFn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridHessianFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridMGGAFn(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridFn(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_GB1DMGridMGGAFn[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_3__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_5__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_15GB1DMGridMGGAFn_4__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.GB1DMGridMGGAFn", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_GB1DMGridMGGAFn), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_GB1DMGridFn, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_GB1DMGridMGGAFn, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_GB1DMGridMGGAFn, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterGB1(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)o);
  p->_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_7IterGB1_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_IterGB1(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_7IterGB1_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_gbasis);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext_IterGB1(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)o;
  if (p->_gbasis) {
    e = (*v)(((PyObject *)p->_gbasis), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext_IterGB1(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB1 *)o;
  tmp = ((PyObject*)p->_gbasis);
  p->_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_7IterGB1_public_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_7IterGB1_13public_fields_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_7IterGB1_private_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_7IterGB1_14private_fields_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_IterGB1[] = {
  {"inc_shell", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB1_5inc_shell, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB1_4inc_shell},
  {"update_shell", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB1_7update_shell, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB1_6update_shell},
  {"inc_prim", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB1_9inc_prim, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB1_8inc_prim},
  {"update_prim", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB1_11update_prim, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB1_10update_prim},
  {"store", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7IterGB1_13store, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7IterGB1_12store},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB1_15__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB1_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB1_17__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_7IterGB1_16__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_IterGB1[] = {
  {(char *)"public_fields", __pyx_getprop_6horton_6gbasis_4cext_7IterGB1_public_fields, 0, (char *)0, 0},
  {(char *)"private_fields", __pyx_getprop_6horton_6gbasis_4cext_7IterGB1_private_fields, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_IterGB1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.IterGB1", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_IterGB1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_IterGB1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper for the IterGB1 class, for testing only.", /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_IterGB1, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_IterGB1, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_IterGB1, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_IterGB1, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_IterGB1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterGB2(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)o);
  p->_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_7IterGB2_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_IterGB2(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_7IterGB2_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_gbasis);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext_IterGB2(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)o;
  if (p->_gbasis) {
    e = (*v)(((PyObject *)p->_gbasis), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext_IterGB2(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB2 *)o;
  tmp = ((PyObject*)p->_gbasis);
  p->_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_7IterGB2_public_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_7IterGB2_13public_fields_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_7IterGB2_private_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_7IterGB2_14private_fields_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_IterGB2[] = {
  {"inc_shell", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB2_5inc_shell, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB2_4inc_shell},
  {"update_shell", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB2_7update_shell, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB2_6update_shell},
  {"inc_prim", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB2_9inc_prim, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB2_8inc_prim},
  {"update_prim", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB2_11update_prim, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB2_10update_prim},
  {"store", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7IterGB2_13store, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7IterGB2_12store},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB2_15__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB2_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB2_17__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_7IterGB2_16__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_IterGB2[] = {
  {(char *)"public_fields", __pyx_getprop_6horton_6gbasis_4cext_7IterGB2_public_fields, 0, (char *)0, 0},
  {(char *)"private_fields", __pyx_getprop_6horton_6gbasis_4cext_7IterGB2_private_fields, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_IterGB2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.IterGB2", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_IterGB2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_IterGB2, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper for the IterGB2 class, for testing only.", /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_IterGB2, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_IterGB2, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_IterGB2, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_IterGB2, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_IterGB2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterGB4(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)o);
  p->_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_7IterGB4_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_IterGB4(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_7IterGB4_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_gbasis);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext_IterGB4(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)o;
  if (p->_gbasis) {
    e = (*v)(((PyObject *)p->_gbasis), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext_IterGB4(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *p = (struct __pyx_obj_6horton_6gbasis_4cext_IterGB4 *)o;
  tmp = ((PyObject*)p->_gbasis);
  p->_gbasis = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_7IterGB4_public_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_7IterGB4_13public_fields_1__get__(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_7IterGB4_private_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_7IterGB4_14private_fields_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_IterGB4[] = {
  {"inc_shell", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB4_5inc_shell, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB4_4inc_shell},
  {"update_shell", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB4_7update_shell, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB4_6update_shell},
  {"inc_prim", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB4_9inc_prim, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB4_8inc_prim},
  {"update_prim", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB4_11update_prim, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB4_10update_prim},
  {"store", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6horton_6gbasis_4cext_7IterGB4_13store, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6horton_6gbasis_4cext_7IterGB4_12store},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB4_15__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_7IterGB4_14__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_7IterGB4_17__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_7IterGB4_16__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_IterGB4[] = {
  {(char *)"public_fields", __pyx_getprop_6horton_6gbasis_4cext_7IterGB4_public_fields, 0, (char *)0, 0},
  {(char *)"private_fields", __pyx_getprop_6horton_6gbasis_4cext_7IterGB4_private_fields, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_IterGB4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.IterGB4", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_IterGB4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_IterGB4, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Wrapper for the IterGB4 class, for testing only.", /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext_IterGB4, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext_IterGB4, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_IterGB4, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_IterGB4, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_IterGB4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterPow1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_8IterPow1_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_IterPow1(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_8IterPow1_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_8IterPow1_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_8IterPow1_6fields_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_IterPow1[] = {
  {"inc", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_8IterPow1_7inc, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_8IterPow1_6inc},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_8IterPow1_9__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_8IterPow1_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_8IterPow1_11__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_8IterPow1_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_IterPow1[] = {
  {(char *)"fields", __pyx_getprop_6horton_6gbasis_4cext_8IterPow1_fields, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_IterPow1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.IterPow1", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_IterPow1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_IterPow1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "IterPow1(long shell_type0)\nWrapper for the IterPow1 class, for testing only.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_IterPow1, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_IterPow1, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6horton_6gbasis_4cext_8IterPow1_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_IterPow1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext_IterPow2(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6horton_6gbasis_4cext_8IterPow2_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext_IterPow2(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6horton_6gbasis_4cext_8IterPow2_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6horton_6gbasis_4cext_8IterPow2_fields(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6horton_6gbasis_4cext_8IterPow2_6fields_1__get__(o);
}

static PyMethodDef __pyx_methods_6horton_6gbasis_4cext_IterPow2[] = {
  {"inc", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_8IterPow2_7inc, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_8IterPow2_6inc},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_8IterPow2_9__reduce_cython__, METH_NOARGS, __pyx_doc_6horton_6gbasis_4cext_8IterPow2_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6horton_6gbasis_4cext_8IterPow2_11__setstate_cython__, METH_O, __pyx_doc_6horton_6gbasis_4cext_8IterPow2_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6horton_6gbasis_4cext_IterPow2[] = {
  {(char *)"fields", __pyx_getprop_6horton_6gbasis_4cext_8IterPow2_fields, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6horton_6gbasis_4cext_IterPow2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.IterPow2", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext_IterPow2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext_IterPow2, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "IterPow2(long shell_type0, long shell_type1)\nWrapper for the IterPow2 class, for testing only.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6horton_6gbasis_4cext_IterPow2, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6horton_6gbasis_4cext_IterPow2, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6horton_6gbasis_4cext_8IterPow2_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext_IterPow2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *__pyx_freelist_6horton_6gbasis_4cext___pyx_scope_struct__get_subset[8];
static int __pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct__get_subset = 0;

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct__get_subset(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct__get_subset > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset)))) {
    o = (PyObject*)__pyx_freelist_6horton_6gbasis_4cext___pyx_scope_struct__get_subset[--__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct__get_subset];
    memset(o, 0, sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext___pyx_scope_struct__get_subset(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *p = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_ishell);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct__get_subset < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset)))) {
    __pyx_freelist_6horton_6gbasis_4cext___pyx_scope_struct__get_subset[__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct__get_subset++] = ((struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext___pyx_scope_struct__get_subset(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *p = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *)o;
  if (p->__pyx_v_ishell) {
    e = (*v)(p->__pyx_v_ishell, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6horton_6gbasis_4cext___pyx_scope_struct__get_subset(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *p = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset *)o;
  tmp = ((PyObject*)p->__pyx_v_ishell);
  p->__pyx_v_ishell = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_6horton_6gbasis_4cext_GBasis *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct__get_subset = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.__pyx_scope_struct__get_subset", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct__get_subset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext___pyx_scope_struct__get_subset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext___pyx_scope_struct__get_subset, /*tp_traverse*/
  __pyx_tp_clear_6horton_6gbasis_4cext___pyx_scope_struct__get_subset, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct__get_subset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *__pyx_freelist_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr[--__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr[__pyx_freecount_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "horton.gbasis.cext.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_cext(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_cext},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "cext",
    __pyx_k_C_extensions, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_A_shell_type_parameter_can_not_b, __pyx_k_A_shell_type_parameter_can_not_b, sizeof(__pyx_k_A_shell_type_parameter_can_not_b), 0, 0, 1, 0},
  {&__pyx_n_s_C_CONTIGUOUS, __pyx_k_C_CONTIGUOUS, sizeof(__pyx_k_C_CONTIGUOUS), 0, 0, 1, 1},
  {&__pyx_kp_s_Center_5i, __pyx_k_Center_5i, sizeof(__pyx_k_Center_5i), 0, 0, 1, 0},
  {&__pyx_n_s_CholeskyLinalgFactory, __pyx_k_CholeskyLinalgFactory, sizeof(__pyx_k_CholeskyLinalgFactory), 0, 0, 1, 1},
  {&__pyx_n_s_Dc, __pyx_k_Dc, sizeof(__pyx_k_Dc), 0, 0, 1, 1},
  {&__pyx_n_s_Dp, __pyx_k_Dp, sizeof(__pyx_k_Dp), 0, 0, 1, 1},
  {&__pyx_n_s_Fc, __pyx_k_Fc, sizeof(__pyx_k_Fc), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_Fp, __pyx_k_Fp, sizeof(__pyx_k_Fp), 0, 0, 1, 1},
  {&__pyx_n_s_GB1DMGridDensityFn, __pyx_k_GB1DMGridDensityFn, sizeof(__pyx_k_GB1DMGridDensityFn), 0, 0, 1, 1},
  {&__pyx_n_s_GB1DMGridFn, __pyx_k_GB1DMGridFn, sizeof(__pyx_k_GB1DMGridFn), 0, 0, 1, 1},
  {&__pyx_n_s_GB1DMGridGGAFn, __pyx_k_GB1DMGridGGAFn, sizeof(__pyx_k_GB1DMGridGGAFn), 0, 0, 1, 1},
  {&__pyx_n_s_GB1DMGridGradientFn, __pyx_k_GB1DMGridGradientFn, sizeof(__pyx_k_GB1DMGridGradientFn), 0, 0, 1, 1},
  {&__pyx_n_s_GB1DMGridHessianFn, __pyx_k_GB1DMGridHessianFn, sizeof(__pyx_k_GB1DMGridHessianFn), 0, 0, 1, 1},
  {&__pyx_n_s_GB1DMGridKineticFn, __pyx_k_GB1DMGridKineticFn, sizeof(__pyx_k_GB1DMGridKineticFn), 0, 0, 1, 1},
  {&__pyx_n_s_GB1DMGridMGGAFn, __pyx_k_GB1DMGridMGGAFn, sizeof(__pyx_k_GB1DMGridMGGAFn), 0, 0, 1, 1},
  {&__pyx_n_s_GB2ErfAttractionIntegral, __pyx_k_GB2ErfAttractionIntegral, sizeof(__pyx_k_GB2ErfAttractionIntegral), 0, 0, 1, 1},
  {&__pyx_n_s_GB2GaussAttractionIntegral, __pyx_k_GB2GaussAttractionIntegral, sizeof(__pyx_k_GB2GaussAttractionIntegral), 0, 0, 1, 1},
  {&__pyx_n_s_GB2Integral, __pyx_k_GB2Integral, sizeof(__pyx_k_GB2Integral), 0, 0, 1, 1},
  {&__pyx_n_s_GB2KineticIntegral, __pyx_k_GB2KineticIntegral, sizeof(__pyx_k_GB2KineticIntegral), 0, 0, 1, 1},
  {&__pyx_n_s_GB2NuclearAttractionIntegral, __pyx_k_GB2NuclearAttractionIntegral, sizeof(__pyx_k_GB2NuclearAttractionIntegral), 0, 0, 1, 1},
  {&__pyx_n_s_GB2OverlapIntegral, __pyx_k_GB2OverlapIntegral, sizeof(__pyx_k_GB2OverlapIntegral), 0, 0, 1, 1},
  {&__pyx_n_s_GB4ElectronRepulsionIntegralLibI, __pyx_k_GB4ElectronRepulsionIntegralLibI, sizeof(__pyx_k_GB4ElectronRepulsionIntegralLibI), 0, 0, 1, 1},
  {&__pyx_n_s_GB4ErfIntegralLibInt, __pyx_k_GB4ErfIntegralLibInt, sizeof(__pyx_k_GB4ErfIntegralLibInt), 0, 0, 1, 1},
  {&__pyx_n_s_GB4GaussIntegralLibInt, __pyx_k_GB4GaussIntegralLibInt, sizeof(__pyx_k_GB4GaussIntegralLibInt), 0, 0, 1, 1},
  {&__pyx_n_s_GB4Integral, __pyx_k_GB4Integral, sizeof(__pyx_k_GB4Integral), 0, 0, 1, 1},
  {&__pyx_n_s_GB4RAlphaIntegralLibInt, __pyx_k_GB4RAlphaIntegralLibInt, sizeof(__pyx_k_GB4RAlphaIntegralLibInt), 0, 0, 1, 1},
  {&__pyx_n_s_GBasis, __pyx_k_GBasis, sizeof(__pyx_k_GBasis), 0, 0, 1, 1},
  {&__pyx_kp_s_GBasis_is_an_abstract_base_class, __pyx_k_GBasis_is_an_abstract_base_class, sizeof(__pyx_k_GBasis_is_an_abstract_base_class), 0, 0, 1, 0},
  {&__pyx_n_s_GOBasis, __pyx_k_GOBasis, sizeof(__pyx_k_GOBasis), 0, 0, 1, 1},
  {&__pyx_n_s_Gc, __pyx_k_Gc, sizeof(__pyx_k_Gc), 0, 0, 1, 1},
  {&__pyx_n_s_Gp, __pyx_k_Gp, sizeof(__pyx_k_Gp), 0, 0, 1, 1},
  {&__pyx_n_s_Hc, __pyx_k_Hc, sizeof(__pyx_k_Hc), 0, 0, 1, 1},
  {&__pyx_n_s_Hp, __pyx_k_Hp, sizeof(__pyx_k_Hp), 0, 0, 1, 1},
  {&__pyx_n_s_Ic, __pyx_k_Ic, sizeof(__pyx_k_Ic), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Initialized_s, __pyx_k_Initialized_s, sizeof(__pyx_k_Initialized_s), 0, 0, 1, 0},
  {&__pyx_n_s_Ip, __pyx_k_Ip, sizeof(__pyx_k_Ip), 0, 0, 1, 1},
  {&__pyx_n_s_IterGB1, __pyx_k_IterGB1, sizeof(__pyx_k_IterGB1), 0, 0, 1, 1},
  {&__pyx_n_s_IterGB2, __pyx_k_IterGB2, sizeof(__pyx_k_IterGB2), 0, 0, 1, 1},
  {&__pyx_n_s_IterGB4, __pyx_k_IterGB4, sizeof(__pyx_k_IterGB4), 0, 0, 1, 1},
  {&__pyx_n_s_IterPow1, __pyx_k_IterPow1, sizeof(__pyx_k_IterPow1), 0, 0, 1, 1},
  {&__pyx_n_s_IterPow2, __pyx_k_IterPow2, sizeof(__pyx_k_IterPow2), 0, 0, 1, 1},
  {&__pyx_n_s_LinalgFactory, __pyx_k_LinalgFactory, sizeof(__pyx_k_LinalgFactory), 0, 0, 1, 1},
  {&__pyx_kp_s_Maximum_shell_type, __pyx_k_Maximum_shell_type, sizeof(__pyx_k_Maximum_shell_type), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_Number_of_basis_functions, __pyx_k_Number_of_basis_functions, sizeof(__pyx_k_Number_of_basis_functions), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_normalization_constant, __pyx_k_Number_of_normalization_constant, sizeof(__pyx_k_Number_of_normalization_constant), 0, 0, 1, 0},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_kp_s_The_length_of_alphas_must_equal, __pyx_k_The_length_of_alphas_must_equal, sizeof(__pyx_k_The_length_of_alphas_must_equal), 0, 0, 1, 0},
  {&__pyx_kp_s_The_shell_type_1_is_not_supporte, __pyx_k_The_shell_type_1_is_not_supporte, sizeof(__pyx_k_The_shell_type_1_is_not_supporte), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
  {&__pyx_n_s_add, __pyx_k_add, sizeof(__pyx_k_add), 0, 0, 1, 1},
  {&__pyx_n_s_ahlrichs2006, __pyx_k_ahlrichs2006, sizeof(__pyx_k_ahlrichs2006), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_2, __pyx_k_all_2, sizeof(__pyx_k_all_2), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_alpha0, __pyx_k_alpha0, sizeof(__pyx_k_alpha0), 0, 0, 1, 1},
  {&__pyx_n_s_alpha1, __pyx_k_alpha1, sizeof(__pyx_k_alpha1), 0, 0, 1, 1},
  {&__pyx_n_s_alpha2, __pyx_k_alpha2, sizeof(__pyx_k_alpha2), 0, 0, 1, 1},
  {&__pyx_n_s_alpha3, __pyx_k_alpha3, sizeof(__pyx_k_alpha3), 0, 0, 1, 1},
  {&__pyx_n_s_alphas, __pyx_k_alphas, sizeof(__pyx_k_alphas), 0, 0, 1, 1},
  {&__pyx_kp_s_alphas_and_con_coeffs_must_have, __pyx_k_alphas_and_con_coeffs_must_have, sizeof(__pyx_k_alphas_and_con_coeffs_must_have), 0, 0, 1, 0},
  {&__pyx_kp_s_alphas_must_be_a_1D_array, __pyx_k_alphas_must_be_a_1D_array, sizeof(__pyx_k_alphas_must_be_a_1D_array), 0, 0, 1, 0},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_array_2, __pyx_k_array_2, sizeof(__pyx_k_array_2), 0, 0, 1, 1},
  {&__pyx_n_s_atexit, __pyx_k_atexit, sizeof(__pyx_k_atexit), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_biblio, __pyx_k_biblio, sizeof(__pyx_k_biblio), 0, 0, 1, 1},
  {&__pyx_n_s_binom, __pyx_k_binom, sizeof(__pyx_k_binom), 0, 0, 1, 1},
  {&__pyx_n_s_blank, __pyx_k_blank, sizeof(__pyx_k_blank), 0, 0, 1, 1},
  {&__pyx_n_s_boys_function, __pyx_k_boys_function, sizeof(__pyx_k_boys_function), 0, 0, 1, 1},
  {&__pyx_n_s_boys_function_array, __pyx_k_boys_function_array, sizeof(__pyx_k_boys_function_array), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cart_to_pure_low, __pyx_k_cart_to_pure_low, sizeof(__pyx_k_cart_to_pure_low), 0, 0, 1, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_n_s_centers, __pyx_k_centers, sizeof(__pyx_k_centers), 0, 0, 1, 1},
  {&__pyx_kp_s_centers_must_be_a_2D_array, __pyx_k_centers_must_be_a_2D_array, sizeof(__pyx_k_centers_must_be_a_2D_array), 0, 0, 1, 0},
  {&__pyx_kp_s_centers_must_have_three_columns, __pyx_k_centers_must_have_three_columns, sizeof(__pyx_k_centers_must_have_three_columns), 0, 0, 1, 0},
  {&__pyx_n_s_charges, __pyx_k_charges, sizeof(__pyx_k_charges), 0, 0, 1, 1},
  {&__pyx_n_s_check_matrix_coeffs, __pyx_k_check_matrix_coeffs, sizeof(__pyx_k_check_matrix_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_check_matrix_four_index, __pyx_k_check_matrix_four_index, sizeof(__pyx_k_check_matrix_four_index), 0, 0, 1, 1},
  {&__pyx_n_s_check_matrix_two_index, __pyx_k_check_matrix_two_index, sizeof(__pyx_k_check_matrix_two_index), 0, 0, 1, 1},
  {&__pyx_n_s_cit, __pyx_k_cit, sizeof(__pyx_k_cit), 0, 0, 1, 1},
  {&__pyx_n_s_cite, __pyx_k_cite, sizeof(__pyx_k_cite), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_coeff, __pyx_k_coeff, sizeof(__pyx_k_coeff), 0, 0, 1, 1},
  {&__pyx_n_s_coeffs, __pyx_k_coeffs, sizeof(__pyx_k_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_compute_cholesky, __pyx_k_compute_cholesky, sizeof(__pyx_k_compute_cholesky), 0, 0, 1, 1},
  {&__pyx_n_s_compute_diagonal, __pyx_k_compute_diagonal, sizeof(__pyx_k_compute_diagonal), 0, 0, 1, 1},
  {&__pyx_n_s_compute_grid1_dm, __pyx_k_compute_grid1_dm, sizeof(__pyx_k_compute_grid1_dm), 0, 0, 1, 1},
  {&__pyx_n_s_compute_grid1_fock, __pyx_k_compute_grid1_fock, sizeof(__pyx_k_compute_grid1_fock), 0, 0, 1, 1},
  {&__pyx_n_s_compute_grid_hartree_dm, __pyx_k_compute_grid_hartree_dm, sizeof(__pyx_k_compute_grid_hartree_dm), 0, 0, 1, 1},
  {&__pyx_n_s_compute_grid_nucpot, __pyx_k_compute_grid_nucpot, sizeof(__pyx_k_compute_grid_nucpot), 0, 0, 1, 1},
  {&__pyx_n_s_con_coeffs, __pyx_k_con_coeffs, sizeof(__pyx_k_con_coeffs), 0, 0, 1, 1},
  {&__pyx_kp_s_con_coeffs_must_be_a_1D_array, __pyx_k_con_coeffs_must_be_a_1D_array, sizeof(__pyx_k_con_coeffs_must_be_a_1D_array), 0, 0, 1, 0},
  {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
  {&__pyx_n_s_coordinates, __pyx_k_coordinates, sizeof(__pyx_k_coordinates), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_cp, __pyx_k_cp, sizeof(__pyx_k_cp), 0, 0, 1, 1},
  {&__pyx_n_s_create_four_index, __pyx_k_create_four_index, sizeof(__pyx_k_create_four_index), 0, 0, 1, 1},
  {&__pyx_n_s_create_two_index, __pyx_k_create_two_index, sizeof(__pyx_k_create_two_index), 0, 0, 1, 1},
  {&__pyx_n_s_deflist, __pyx_k_deflist, sizeof(__pyx_k_deflist), 0, 0, 1, 1},
  {&__pyx_n_s_diagonal, __pyx_k_diagonal, sizeof(__pyx_k_diagonal), 0, 0, 1, 1},
  {&__pyx_n_s_dim, __pyx_k_dim, sizeof(__pyx_k_dim), 0, 0, 1, 1},
  {&__pyx_n_s_dim_output, __pyx_k_dim_output, sizeof(__pyx_k_dim_output), 0, 0, 1, 1},
  {&__pyx_n_s_dim_work, __pyx_k_dim_work, sizeof(__pyx_k_dim_work), 0, 0, 1, 1},
  {&__pyx_n_s_dims, __pyx_k_dims, sizeof(__pyx_k_dims), 0, 0, 1, 1},
  {&__pyx_n_s_dm, __pyx_k_dm, sizeof(__pyx_k_dm), 0, 0, 1, 1},
  {&__pyx_n_s_do_medium, __pyx_k_do_medium, sizeof(__pyx_k_do_medium), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtaylor, __pyx_k_dtaylor, sizeof(__pyx_k_dtaylor), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_epsilon, __pyx_k_epsilon, sizeof(__pyx_k_epsilon), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_extend, __pyx_k_extend, sizeof(__pyx_k_extend), 0, 0, 1, 1},
  {&__pyx_n_s_fac, __pyx_k_fac, sizeof(__pyx_k_fac), 0, 0, 1, 1},
  {&__pyx_n_s_fac2, __pyx_k_fac2, sizeof(__pyx_k_fac2), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_fock, __pyx_k_fock, sizeof(__pyx_k_fock), 0, 0, 1, 1},
  {&__pyx_kp_s_four_center_integrals_with_a_Gau, __pyx_k_four_center_integrals_with_a_Gau, sizeof(__pyx_k_four_center_integrals_with_a_Gau), 0, 0, 1, 0},
  {&__pyx_n_s_from_hdf5, __pyx_k_from_hdf5, sizeof(__pyx_k_from_hdf5), 0, 0, 1, 1},
  {&__pyx_n_s_gamma_inv, __pyx_k_gamma_inv, sizeof(__pyx_k_gamma_inv), 0, 0, 1, 1},
  {&__pyx_n_s_gb4int, __pyx_k_gb4int, sizeof(__pyx_k_gb4int), 0, 0, 1, 1},
  {&__pyx_n_s_gb4w, __pyx_k_gb4w, sizeof(__pyx_k_gb4w), 0, 0, 1, 1},
  {&__pyx_n_s_gb_overlap_int1d, __pyx_k_gb_overlap_int1d, sizeof(__pyx_k_gb_overlap_int1d), 0, 0, 1, 1},
  {&__pyx_n_s_gbasis, __pyx_k_gbasis, sizeof(__pyx_k_gbasis), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_2index_slice, __pyx_k_get_2index_slice, sizeof(__pyx_k_get_2index_slice), 0, 0, 1, 1},
  {&__pyx_n_s_get_max_shell_type, __pyx_k_get_max_shell_type, sizeof(__pyx_k_get_max_shell_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_shell_nbasis, __pyx_k_get_shell_nbasis, sizeof(__pyx_k_get_shell_nbasis), 0, 0, 1, 1},
  {&__pyx_n_s_get_subset, __pyx_k_get_subset, sizeof(__pyx_k_get_subset), 0, 0, 1, 1},
  {&__pyx_n_s_get_subset_locals_genexpr, __pyx_k_get_subset_locals_genexpr, sizeof(__pyx_k_get_subset_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_gill1996, __pyx_k_gill1996, sizeof(__pyx_k_gill1996), 0, 0, 1, 1},
  {&__pyx_n_s_gob_cart_normalization, __pyx_k_gob_cart_normalization, sizeof(__pyx_k_gob_cart_normalization), 0, 0, 1, 1},
  {&__pyx_n_s_gob_pure_normalization, __pyx_k_gob_pure_normalization, sizeof(__pyx_k_gob_pure_normalization), 0, 0, 1, 1},
  {&__pyx_n_s_gobasis, __pyx_k_gobasis, sizeof(__pyx_k_gobasis), 0, 0, 1, 1},
  {&__pyx_n_s_gpt_coeff, __pyx_k_gpt_coeff, sizeof(__pyx_k_gpt_coeff), 0, 0, 1, 1},
  {&__pyx_n_s_grid_fn, __pyx_k_grid_fn, sizeof(__pyx_k_grid_fn), 0, 0, 1, 1},
  {&__pyx_n_s_horton_cext, __pyx_k_horton_cext, sizeof(__pyx_k_horton_cext), 0, 0, 1, 1},
  {&__pyx_n_s_horton_gbasis_cext, __pyx_k_horton_gbasis_cext, sizeof(__pyx_k_horton_gbasis_cext), 0, 0, 1, 1},
  {&__pyx_kp_s_horton_gbasis_cext_pyx, __pyx_k_horton_gbasis_cext_pyx, sizeof(__pyx_k_horton_gbasis_cext_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_horton_log, __pyx_k_horton_log, sizeof(__pyx_k_horton_log), 0, 0, 1, 1},
  {&__pyx_n_s_horton_matrix, __pyx_k_horton_matrix, sizeof(__pyx_k_horton_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_horton_utils, __pyx_k_horton_utils, sizeof(__pyx_k_horton_utils), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_index0, __pyx_k_index0, sizeof(__pyx_k_index0), 0, 0, 1, 1},
  {&__pyx_n_s_index2, __pyx_k_index2, sizeof(__pyx_k_index2), 0, 0, 1, 1},
  {&__pyx_n_s_inv_gamma, __pyx_k_inv_gamma, sizeof(__pyx_k_inv_gamma), 0, 0, 1, 1},
  {&__pyx_n_s_iorbs, __pyx_k_iorbs, sizeof(__pyx_k_iorbs), 0, 0, 1, 1},
  {&__pyx_kp_s_ishell_out_of_range_i_0, __pyx_k_ishell_out_of_range_i_0, sizeof(__pyx_k_ishell_out_of_range_i_0), 0, 0, 1, 0},
  {&__pyx_kp_s_ishell_out_of_range_i_s, __pyx_k_ishell_out_of_range_i_s, sizeof(__pyx_k_ishell_out_of_range_i_s), 0, 0, 1, 0},
  {&__pyx_n_s_iter_pow1_inc, __pyx_k_iter_pow1_inc, sizeof(__pyx_k_iter_pow1_inc), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_jfac, __pyx_k_jfac, sizeof(__pyx_k_jfac), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_lf, __pyx_k_lf, sizeof(__pyx_k_lf), 0, 0, 1, 1},
  {&__pyx_n_s_libint2_static_cleanup, __pyx_k_libint2_static_cleanup, sizeof(__pyx_k_libint2_static_cleanup), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_log_init, __pyx_k_log_init, sizeof(__pyx_k_log_init), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_nbasis, __pyx_k_max_nbasis, sizeof(__pyx_k_max_nbasis), 0, 0, 1, 1},
  {&__pyx_n_s_max_shell_type, __pyx_k_max_shell_type, sizeof(__pyx_k_max_shell_type), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_mmax, __pyx_k_mmax, sizeof(__pyx_k_mmax), 0, 0, 1, 1},
  {&__pyx_n_s_mu, __pyx_k_mu, sizeof(__pyx_k_mu), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n0, __pyx_k_n0, sizeof(__pyx_k_n0), 0, 0, 1, 1},
  {&__pyx_n_s_n1, __pyx_k_n1, sizeof(__pyx_k_n1), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_nant, __pyx_k_nant, sizeof(__pyx_k_nant), 0, 0, 1, 1},
  {&__pyx_n_s_nbasis, __pyx_k_nbasis, sizeof(__pyx_k_nbasis), 0, 0, 1, 1},
  {&__pyx_n_s_ncenter, __pyx_k_ncenter, sizeof(__pyx_k_ncenter), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_need_numbers, __pyx_k_need_numbers, sizeof(__pyx_k_need_numbers), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_nocc, __pyx_k_nocc, sizeof(__pyx_k_nocc), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_npost, __pyx_k_npost, sizeof(__pyx_k_npost), 0, 0, 1, 1},
  {&__pyx_n_s_nprims, __pyx_k_nprims, sizeof(__pyx_k_nprims), 0, 0, 1, 1},
  {&__pyx_kp_s_nprims_and_shell_map_must_have_t, __pyx_k_nprims_and_shell_map_must_have_t, sizeof(__pyx_k_nprims_and_shell_map_must_have_t), 0, 0, 1, 0},
  {&__pyx_kp_s_nprims_elements_must_be_strictly, __pyx_k_nprims_elements_must_be_strictly, sizeof(__pyx_k_nprims_elements_must_be_strictly), 0, 0, 1, 0},
  {&__pyx_kp_s_nprims_must_be_a_1D_array, __pyx_k_nprims_must_be_a_1D_array, sizeof(__pyx_k_nprims_must_be_a_1D_array), 0, 0, 1, 0},
  {&__pyx_n_s_nscales, __pyx_k_nscales, sizeof(__pyx_k_nscales), 0, 0, 1, 1},
  {&__pyx_n_s_nshell, __pyx_k_nshell, sizeof(__pyx_k_nshell), 0, 0, 1, 1},
  {&__pyx_n_s_nuclear_attraction_helper, __pyx_k_nuclear_attraction_helper, sizeof(__pyx_k_nuclear_attraction_helper), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_nvec, __pyx_k_nvec, sizeof(__pyx_k_nvec), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_pa, __pyx_k_pa, sizeof(__pyx_k_pa), 0, 0, 1, 1},
  {&__pyx_n_s_pb, __pyx_k_pb, sizeof(__pyx_k_pb), 0, 0, 1, 1},
  {&__pyx_n_s_pbegin0, __pyx_k_pbegin0, sizeof(__pyx_k_pbegin0), 0, 0, 1, 1},
  {&__pyx_n_s_pbegin2, __pyx_k_pbegin2, sizeof(__pyx_k_pbegin2), 0, 0, 1, 1},
  {&__pyx_n_s_pend0, __pyx_k_pend0, sizeof(__pyx_k_pend0), 0, 0, 1, 1},
  {&__pyx_n_s_pend2, __pyx_k_pend2, sizeof(__pyx_k_pend2), 0, 0, 1, 1},
  {&__pyx_n_s_point, __pyx_k_point, sizeof(__pyx_k_point), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_s_pots, __pyx_k_pots, sizeof(__pyx_k_pots), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_r0, __pyx_k_r0, sizeof(__pyx_k_r0), 0, 0, 1, 1},
  {&__pyx_n_s_r1, __pyx_k_r1, sizeof(__pyx_k_r1), 0, 0, 1, 1},
  {&__pyx_n_s_r2, __pyx_k_r2, sizeof(__pyx_k_r2), 0, 0, 1, 1},
  {&__pyx_n_s_r3, __pyx_k_r3, sizeof(__pyx_k_r3), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_py, __pyx_k_result_py, sizeof(__pyx_k_result_py), 0, 0, 1, 1},
  {&__pyx_kp_s_s_i, __pyx_k_s_i, sizeof(__pyx_k_s_i), 0, 0, 1, 0},
  {&__pyx_n_s_scales0, __pyx_k_scales0, sizeof(__pyx_k_scales0), 0, 0, 1, 1},
  {&__pyx_n_s_scales1, __pyx_k_scales1, sizeof(__pyx_k_scales1), 0, 0, 1, 1},
  {&__pyx_n_s_scales2, __pyx_k_scales2, sizeof(__pyx_k_scales2), 0, 0, 1, 1},
  {&__pyx_n_s_scales3, __pyx_k_scales3, sizeof(__pyx_k_scales3), 0, 0, 1, 1},
  {&__pyx_n_s_select_2index, __pyx_k_select_2index, sizeof(__pyx_k_select_2index), 0, 0, 1, 1},
  {&__pyx_kp_s_self__this_cannot_be_converted_t, __pyx_k_self__this_cannot_be_converted_t, sizeof(__pyx_k_self__this_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_shape0, __pyx_k_shape0, sizeof(__pyx_k_shape0), 0, 0, 1, 1},
  {&__pyx_n_s_shape1, __pyx_k_shape1, sizeof(__pyx_k_shape1), 0, 0, 1, 1},
  {&__pyx_n_s_shape2, __pyx_k_shape2, sizeof(__pyx_k_shape2), 0, 0, 1, 1},
  {&__pyx_n_s_shape3, __pyx_k_shape3, sizeof(__pyx_k_shape3), 0, 0, 1, 1},
  {&__pyx_n_s_shell_map, __pyx_k_shell_map, sizeof(__pyx_k_shell_map), 0, 0, 1, 1},
  {&__pyx_kp_s_shell_map_can_not_contain_negati, __pyx_k_shell_map_can_not_contain_negati, sizeof(__pyx_k_shell_map_can_not_contain_negati), 0, 0, 1, 0},
  {&__pyx_kp_s_shell_map_can_not_contain_values, __pyx_k_shell_map_can_not_contain_values, sizeof(__pyx_k_shell_map_can_not_contain_values), 0, 0, 1, 0},
  {&__pyx_kp_s_shell_map_must_be_a_1D_array, __pyx_k_shell_map_must_be_a_1D_array, sizeof(__pyx_k_shell_map_must_be_a_1D_array), 0, 0, 1, 0},
  {&__pyx_n_s_shell_type, __pyx_k_shell_type, sizeof(__pyx_k_shell_type), 0, 0, 1, 1},
  {&__pyx_n_s_shell_type0, __pyx_k_shell_type0, sizeof(__pyx_k_shell_type0), 0, 0, 1, 1},
  {&__pyx_n_s_shell_type1, __pyx_k_shell_type1, sizeof(__pyx_k_shell_type1), 0, 0, 1, 1},
  {&__pyx_n_s_shell_type2, __pyx_k_shell_type2, sizeof(__pyx_k_shell_type2), 0, 0, 1, 1},
  {&__pyx_n_s_shell_type3, __pyx_k_shell_type3, sizeof(__pyx_k_shell_type3), 0, 0, 1, 1},
  {&__pyx_kp_s_shell_type_1_is_not_supported, __pyx_k_shell_type_1_is_not_supported, sizeof(__pyx_k_shell_type_1_is_not_supported), 0, 0, 1, 0},
  {&__pyx_n_s_shell_types, __pyx_k_shell_types, sizeof(__pyx_k_shell_types), 0, 0, 1, 1},
  {&__pyx_kp_s_shell_types_and_shell_map_must_h, __pyx_k_shell_types_and_shell_map_must_h, sizeof(__pyx_k_shell_types_and_shell_map_must_h), 0, 0, 1, 0},
  {&__pyx_kp_s_shell_types_must_be_a_1D_array, __pyx_k_shell_types_must_be_a_1D_array, sizeof(__pyx_k_shell_types_must_be_a_1D_array), 0, 0, 1, 0},
  {&__pyx_n_s_slice, __pyx_k_slice, sizeof(__pyx_k_slice), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_tfactor, __pyx_k_tfactor, sizeof(__pyx_k_tfactor), 0, 0, 1, 1},
  {&__pyx_kp_s_the_efficient_implementation_of, __pyx_k_the_efficient_implementation_of, sizeof(__pyx_k_the_efficient_implementation_of), 0, 0, 1, 0},
  {&__pyx_kp_s_the_methodology_to_implement_var, __pyx_k_the_methodology_to_implement_var, sizeof(__pyx_k_the_methodology_to_implement_var), 0, 0, 1, 0},
  {&__pyx_n_s_threshold, __pyx_k_threshold, sizeof(__pyx_k_threshold), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_toulouse2004, __pyx_k_toulouse2004, sizeof(__pyx_k_toulouse2004), 0, 0, 1, 1},
  {&__pyx_n_s_typecheck_geo, __pyx_k_typecheck_geo, sizeof(__pyx_k_typecheck_geo), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_valeev2014, __pyx_k_valeev2014, sizeof(__pyx_k_valeev2014), 0, 0, 1, 1},
  {&__pyx_n_s_vectors, __pyx_k_vectors, sizeof(__pyx_k_vectors), 0, 0, 1, 1},
  {&__pyx_n_s_view, __pyx_k_view, sizeof(__pyx_k_view), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_work, __pyx_k_work, sizeof(__pyx_k_work), 0, 0, 1, 1},
  {&__pyx_n_s_work_cart, __pyx_k_work_cart, sizeof(__pyx_k_work_cart), 0, 0, 1, 1},
  {&__pyx_n_s_work_g, __pyx_k_work_g, sizeof(__pyx_k_work_g), 0, 0, 1, 1},
  {&__pyx_n_s_work_pure, __pyx_k_work_pure, sizeof(__pyx_k_work_pure), 0, 0, 1, 1},
  {&__pyx_n_s_writeable, __pyx_k_writeable, sizeof(__pyx_k_writeable), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_xyz, __pyx_k_xyz, sizeof(__pyx_k_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 334, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 371, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 503, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 503, __pyx_L1_error)
  #endif
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 576, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 578, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(2, 856, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1038, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "horton/gbasis/cext.pyx":168
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:
 *         raise ValueError("shell_type -1 is not supported.")             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_shell_type_1_is_not_supported); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "horton/gbasis/cext.pyx":334
 *         # Check array dimensions
 *         if self._centers.ndim != 2:
 *             raise TypeError('centers must be a 2D array')             # <<<<<<<<<<<<<<
 *         if self._shell_map.ndim != 1:
 *             raise TypeError('shell_map must be a 1D array')
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_centers_must_be_a_2D_array); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "horton/gbasis/cext.pyx":336
 *             raise TypeError('centers must be a 2D array')
 *         if self._shell_map.ndim != 1:
 *             raise TypeError('shell_map must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._nprims.ndim != 1:
 *             raise TypeError('nprims must be a 1D array')
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_shell_map_must_be_a_1D_array); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "horton/gbasis/cext.pyx":338
 *             raise TypeError('shell_map must be a 1D array')
 *         if self._nprims.ndim != 1:
 *             raise TypeError('nprims must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._shell_types.ndim != 1:
 *             raise TypeError('shell_types must be a 1D array')
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_nprims_must_be_a_1D_array); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "horton/gbasis/cext.pyx":340
 *             raise TypeError('nprims must be a 1D array')
 *         if self._shell_types.ndim != 1:
 *             raise TypeError('shell_types must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._alphas.ndim != 1:
 *             raise TypeError('alphas must be a 1D array')
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_shell_types_must_be_a_1D_array); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "horton/gbasis/cext.pyx":342
 *             raise TypeError('shell_types must be a 1D array')
 *         if self._alphas.ndim != 1:
 *             raise TypeError('alphas must be a 1D array')             # <<<<<<<<<<<<<<
 *         if self._con_coeffs.ndim != 1:
 *             raise TypeError('con_coeffs must be a 1D array')
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_alphas_must_be_a_1D_array); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "horton/gbasis/cext.pyx":344
 *             raise TypeError('alphas must be a 1D array')
 *         if self._con_coeffs.ndim != 1:
 *             raise TypeError('con_coeffs must be a 1D array')             # <<<<<<<<<<<<<<
 * 
 *         # Essential array checks
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_con_coeffs_must_be_a_1D_array); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "horton/gbasis/cext.pyx":348
 *         # Essential array checks
 *         if self._centers.shape[1] != 3:
 *             raise TypeError('centers must have three columns.')             # <<<<<<<<<<<<<<
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('nprims and shell_map must have the same length.')
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_centers_must_have_three_columns); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "horton/gbasis/cext.pyx":350
 *             raise TypeError('centers must have three columns.')
 *         if self._nprims.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('nprims and shell_map must have the same length.')             # <<<<<<<<<<<<<<
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('shell_types and shell_map must have the same length.')
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_nprims_and_shell_map_must_have_t); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "horton/gbasis/cext.pyx":352
 *             raise TypeError('nprims and shell_map must have the same length.')
 *         if self._shell_types.shape[0] != self._shell_map.shape[0]:
 *             raise TypeError('shell_types and shell_map must have the same length.')             # <<<<<<<<<<<<<<
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:
 *             raise TypeError('alphas and con_coeffs must have the same length.')
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_shell_types_and_shell_map_must_h); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "horton/gbasis/cext.pyx":354
 *             raise TypeError('shell_types and shell_map must have the same length.')
 *         if self._alphas.shape[0] != self._con_coeffs.shape[0]:
 *             raise TypeError('alphas and con_coeffs must have the same length.')             # <<<<<<<<<<<<<<
 * 
 *         # Consistency checks
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_alphas_and_con_coeffs_must_have); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "horton/gbasis/cext.pyx":358
 *         # Consistency checks
 *         if self._shell_map.min() < 0:
 *             raise ValueError('shell_map can not contain negative values.')             # <<<<<<<<<<<<<<
 *         if self._shell_map.max() >= self.centers.shape[0]:
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_shell_map_can_not_contain_negati); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "horton/gbasis/cext.pyx":360
 *             raise ValueError('shell_map can not contain negative values.')
 *         if self._shell_map.max() >= self.centers.shape[0]:
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')             # <<<<<<<<<<<<<<
 *         if self._nprims.min() < 1:
 *             raise ValueError('nprims elements must be strictly positive.')
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_shell_map_can_not_contain_values); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "horton/gbasis/cext.pyx":362
 *             raise ValueError('shell_map can not contain values larger than the number of centers.')
 *         if self._nprims.min() < 1:
 *             raise ValueError('nprims elements must be strictly positive.')             # <<<<<<<<<<<<<<
 *         if (self._shell_types == -1).any():
 *             raise ValueError('The shell_type -1 is not supported.')
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_nprims_elements_must_be_strictly); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "horton/gbasis/cext.pyx":364
 *             raise ValueError('nprims elements must be strictly positive.')
 *         if (self._shell_types == -1).any():
 *             raise ValueError('The shell_type -1 is not supported.')             # <<<<<<<<<<<<<<
 *         cdef long nprim_total = self._nprims.sum()
 *         if (self._alphas.shape[0] != nprim_total):
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_The_shell_type_1_is_not_supporte); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "horton/gbasis/cext.pyx":367
 *         cdef long nprim_total = self._nprims.sum()
 *         if (self._alphas.shape[0] != nprim_total):
 *             raise TypeError('The length of alphas must equal the total number of primitives.')             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_The_length_of_alphas_must_equal); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "horton/gbasis/cext.pyx":371
 *     def __init__(self, centers, shell_map, nprims, shell_types, alphas, con_coeffs):
 *         if self.__class__ == GBasis:
 *             raise NotImplementedError('GBasis is an abstract base class')             # <<<<<<<<<<<<<<
 *         self._log_init()
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_GBasis_is_an_abstract_base_class); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "horton/gbasis/cext.pyx":918
 *         Keywords: :index:`ERI`, :index:`four-center integrals`
 *         '''
 *         biblio.cite('valeev2014',             # <<<<<<<<<<<<<<
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         if isinstance(output, CholeskyLinalgFactory):
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_valeev2014, __pyx_kp_s_the_efficient_implementation_of); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "horton/gbasis/cext.pyx":962
 *         biblio.cite('valeev2014',
 *                  'the efficient implementation of four-center electron repulsion integrals')
 *         biblio.cite('ahlrichs2006',             # <<<<<<<<<<<<<<
 *                  'the methodology to implement various types of four-center integrals.')
 *         if isinstance(output, CholeskyLinalgFactory):
 */
  __pyx_tuple__22 = PyTuple_Pack(2, __pyx_n_s_ahlrichs2006, __pyx_kp_s_the_methodology_to_implement_var); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "horton/gbasis/cext.pyx":1010
 *         biblio.cite('ahlrichs2006',
 *                  'the methodology to implement various types of four-center integrals.')
 *         biblio.cite('gill1996',             # <<<<<<<<<<<<<<
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         biblio.cite('toulouse2004',
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_s_gill1996, __pyx_kp_s_four_center_integrals_with_a_Gau); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "horton/gbasis/cext.pyx":1012
 *         biblio.cite('gill1996',
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         biblio.cite('toulouse2004',             # <<<<<<<<<<<<<<
 *                  'four-center integrals with a Gaussian interaction potential.')
 *         if isinstance(output, CholeskyLinalgFactory):
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_toulouse2004, __pyx_kp_s_four_center_integrals_with_a_Gau); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":4
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._this cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_self__this_cannot_be_converted_t); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "horton/gbasis/cext.pyx":2348
 *     def __init__(self, long shell_type0):
 *         if shell_type0 < 0:
 *             raise ValueError('A shell_type parameter can not be negative.')             # <<<<<<<<<<<<<<
 *         self._c_i1p.reset(shell_type0)
 * 
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_A_shell_type_parameter_can_not_b); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 2348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(2, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(2, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(2, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(2, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(2, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "horton/gbasis/cext.pyx":90
 * 
 * 
 * def boys_function(long m, double t):             # <<<<<<<<<<<<<<
 *     return boys.boys_function(m, t)
 * 
 */
  __pyx_tuple__81 = PyTuple_Pack(2, __pyx_n_s_m, __pyx_n_s_t); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__81, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_boys_function, 90, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 90, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":94
 * 
 * 
 * def boys_function_array(long mmax, double t):             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[double] output = np.zeros(mmax+1)
 *     boys.boys_function_array(mmax, t, &output[0])
 */
  __pyx_tuple__83 = PyTuple_Pack(3, __pyx_n_s_mmax, __pyx_n_s_t, __pyx_n_s_output); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_boys_function_array, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 94, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":105
 * 
 * 
 * def cart_to_pure_low(np.ndarray[double] work_cart not None,             # <<<<<<<<<<<<<<
 *                      np.ndarray[double] work_pure not None,
 *                      long shell_type, long nant, long npost):
 */
  __pyx_tuple__85 = PyTuple_Pack(5, __pyx_n_s_work_cart, __pyx_n_s_work_pure, __pyx_n_s_shell_type, __pyx_n_s_nant, __pyx_n_s_npost); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_cart_to_pure_low, 105, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 105, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":122
 *     void PyArray_ENABLEFLAGS(np.ndarray arr, int flags)
 * 
 * def compute_cholesky(GOBasis gobasis, GB4Integral gb4int, double threshold=1e-8, lf = None):             # <<<<<<<<<<<<<<
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     cdef vector[double]* vectors = NULL
 */
  __pyx_tuple__87 = PyTuple_Pack(10, __pyx_n_s_gobasis, __pyx_n_s_gb4int, __pyx_n_s_threshold, __pyx_n_s_lf, __pyx_n_s_gb4w, __pyx_n_s_vectors, __pyx_n_s_dims, __pyx_n_s_result, __pyx_n_s_nvec, __pyx_n_s_result_py); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(4, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_compute_cholesky, 122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 122, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":153
 * 
 * 
 * def fac(long n):             # <<<<<<<<<<<<<<
 *     return common.fac(n)
 * 
 */
  __pyx_tuple__89 = PyTuple_Pack(2, __pyx_n_s_n, __pyx_n_s_n); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_fac, 153, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 153, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":157
 * 
 * 
 * def fac2(long n):             # <<<<<<<<<<<<<<
 *     return common.fac2(n)
 * 
 */
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_s_n, __pyx_n_s_n); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_fac2, 157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 157, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":161
 * 
 * 
 * def binom(long n, long m):             # <<<<<<<<<<<<<<
 *     return common.binom(n, m)
 * 
 */
  __pyx_tuple__93 = PyTuple_Pack(2, __pyx_n_s_n, __pyx_n_s_m); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_binom, 161, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 161, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":165
 * 
 * 
 * def get_shell_nbasis(long shell_type):             # <<<<<<<<<<<<<<
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:
 */
  __pyx_tuple__95 = PyTuple_Pack(3, __pyx_n_s_shell_type, __pyx_n_s_shell_type, __pyx_n_s_result); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_get_shell_nbasis, 165, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 165, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":172
 * 
 * 
 * def get_max_shell_type():             # <<<<<<<<<<<<<<
 *     return common.get_max_shell_type()
 * 
 */
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_get_max_shell_type, 172, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 172, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":176
 * 
 * 
 * def gpt_coeff(long k, long n0, long n1, double pa, double pb):             # <<<<<<<<<<<<<<
 *     return common.gpt_coeff(k, n0, n1, pa, pb)
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(5, __pyx_n_s_k, __pyx_n_s_n0, __pyx_n_s_n1, __pyx_n_s_pa, __pyx_n_s_pb); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_gpt_coeff, 176, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 176, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":180
 * 
 * 
 * def gb_overlap_int1d(long n0, long n1, double pa, double pb, double inv_gamma):             # <<<<<<<<<<<<<<
 *     return common.gb_overlap_int1d(n0, n1, pa, pb, inv_gamma)
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(5, __pyx_n_s_n0, __pyx_n_s_n1, __pyx_n_s_pa, __pyx_n_s_pb, __pyx_n_s_inv_gamma); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(5, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_gb_overlap_int1d, 180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 180, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":184
 * 
 * 
 * def nuclear_attraction_helper(np.ndarray[double, ndim=1] work_g not None,             # <<<<<<<<<<<<<<
 *                               long n0, long n1, double pa, double pb, double cp,
 *                               double gamma_inv):
 */
  __pyx_tuple__102 = PyTuple_Pack(7, __pyx_n_s_work_g, __pyx_n_s_n0, __pyx_n_s_n1, __pyx_n_s_pa, __pyx_n_s_pb, __pyx_n_s_cp, __pyx_n_s_gamma_inv); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(7, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_nuclear_attraction_helper, 184, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 184, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":191
 *     common.nuclear_attraction_helper(&work_g[0], n0, n1, pa, pb, cp, gamma_inv)
 * 
 * def cit(int i, double t, int m):             # <<<<<<<<<<<<<<
 *         return common.cit(i, t, m)
 * 
 */
  __pyx_tuple__104 = PyTuple_Pack(3, __pyx_n_s_i, __pyx_n_s_t, __pyx_n_s_m); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_cit, 191, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 191, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":194
 *         return common.cit(i, t, m)
 * 
 * def jfac(int j, int n):             # <<<<<<<<<<<<<<
 *     return common.jfac(j, n)
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_s_j, __pyx_n_s_n); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_jfac, 194, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 194, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":197
 *     return common.jfac(j, n)
 * 
 * def dtaylor(int n, double alpha, double t, double tfactor):             # <<<<<<<<<<<<<<
 *     return common.dtaylor(n, alpha, t, tfactor)
 * 
 */
  __pyx_tuple__108 = PyTuple_Pack(4, __pyx_n_s_n, __pyx_n_s_alpha, __pyx_n_s_t, __pyx_n_s_tfactor); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_dtaylor, 197, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 197, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":206
 * 
 * 
 * def gob_cart_normalization(double alpha, np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */
  __pyx_tuple__110 = PyTuple_Pack(2, __pyx_n_s_alpha, __pyx_n_s_n); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_gob_cart_normalization, 206, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 206, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":212
 * 
 * 
 * def gob_pure_normalization(double alpha, long l):             # <<<<<<<<<<<<<<
 *     return gbasis.gob_pure_normalization(alpha, l)
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_n_s_alpha, __pyx_n_s_l); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_gob_pure_normalization, 212, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 212, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":1690
 * #
 * 
 * def select_2index(GOBasis gobasis, long index0, long index2):             # <<<<<<<<<<<<<<
 *     assert index0 >= 0 and index0 < gobasis.nbasis
 *     assert index2 >= 0 and index2 < gobasis.nbasis
 */
  __pyx_tuple__114 = PyTuple_Pack(9, __pyx_n_s_gobasis, __pyx_n_s_index0, __pyx_n_s_index2, __pyx_n_s_gb4int, __pyx_n_s_gb4w, __pyx_n_s_pbegin0, __pyx_n_s_pend0, __pyx_n_s_pbegin2, __pyx_n_s_pend2); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(3, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_select_2index, 1690, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 1690, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":1716
 * 
 * 
 * def compute_diagonal(GOBasis gobasis, np.ndarray[double, ndim=2] diagonal not             # <<<<<<<<<<<<<<
 *         None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */
  __pyx_tuple__116 = PyTuple_Pack(5, __pyx_n_s_gobasis, __pyx_n_s_diagonal, __pyx_n_s_gb4int, __pyx_n_s_gb4w, __pyx_n_s_output); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_compute_diagonal, 1716, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 1716, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":1736
 *             del gb4w
 * 
 * def get_2index_slice(GOBasis gobasis, long index0, long index2,             # <<<<<<<<<<<<<<
 *                         np.ndarray[double, ndim=2] slice not None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */
  __pyx_tuple__118 = PyTuple_Pack(11, __pyx_n_s_gobasis, __pyx_n_s_index0, __pyx_n_s_index2, __pyx_n_s_slice, __pyx_n_s_gb4int, __pyx_n_s_gb4w, __pyx_n_s_pbegin0, __pyx_n_s_pend0, __pyx_n_s_pbegin2, __pyx_n_s_pend2, __pyx_n_s_output); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(4, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_get_2index_slice, 1736, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 1736, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":1922
 * 
 * ints.libint2_static_init()
 * def libint2_static_cleanup():             # <<<<<<<<<<<<<<
 *     ints.libint2_static_cleanup()
 * atexit.register(libint2_static_cleanup)
 */
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_libint2_static_cleanup, 1922, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 1922, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":2330
 * 
 * 
 * def iter_pow1_inc(np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_n_s_n); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_horton_gbasis_cext_pyx, __pyx_n_s_iter_pow1_inc, 2330, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_2 = PyInt_FromLong(-2); if (unlikely(!__pyx_int_neg_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_3 = PyInt_FromLong(-3); if (unlikely(!__pyx_int_neg_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_4 = PyInt_FromLong(-4); if (unlikely(!__pyx_int_neg_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_5 = PyInt_FromLong(-5); if (unlikely(!__pyx_int_neg_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_6 = PyInt_FromLong(-6); if (unlikely(!__pyx_int_neg_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GBasis) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GBasis.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GBasis.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GBasis.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GBasis.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GBasis, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GBasis) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GBasis) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GBasis = &__pyx_type_6horton_6gbasis_4cext_GBasis;
  __pyx_type_6horton_6gbasis_4cext_GOBasis.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GBasis;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GOBasis) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GOBasis.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GOBasis.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GOBasis.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GOBasis.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GOBasis, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GOBasis) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GOBasis) < 0) __PYX_ERR(0, 626, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GOBasis = &__pyx_type_6horton_6gbasis_4cext_GOBasis;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB2Integral) < 0) __PYX_ERR(0, 1775, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB2Integral.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB2Integral.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB2Integral.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB2Integral.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB2Integral, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB2Integral) < 0) __PYX_ERR(0, 1775, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB2Integral) < 0) __PYX_ERR(0, 1775, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB2Integral = &__pyx_type_6horton_6gbasis_4cext_GB2Integral;
  __pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB2Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral) < 0) __PYX_ERR(0, 1834, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB2OverlapIntegral, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral) < 0) __PYX_ERR(0, 1834, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral) < 0) __PYX_ERR(0, 1834, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB2OverlapIntegral = &__pyx_type_6horton_6gbasis_4cext_GB2OverlapIntegral;
  __pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB2Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral) < 0) __PYX_ERR(0, 1841, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB2KineticIntegral, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral) < 0) __PYX_ERR(0, 1841, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral) < 0) __PYX_ERR(0, 1841, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB2KineticIntegral = &__pyx_type_6horton_6gbasis_4cext_GB2KineticIntegral;
  __pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB2Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral) < 0) __PYX_ERR(0, 1848, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB2NuclearAttractionIntegral, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral) < 0) __PYX_ERR(0, 1848, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral) < 0) __PYX_ERR(0, 1848, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral = &__pyx_type_6horton_6gbasis_4cext_GB2NuclearAttractionIntegral;
  __pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB2Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral) < 0) __PYX_ERR(0, 1868, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB2ErfAttractionIntegral, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral) < 0) __PYX_ERR(0, 1868, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral) < 0) __PYX_ERR(0, 1868, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB2ErfAttractionIntegral = &__pyx_type_6horton_6gbasis_4cext_GB2ErfAttractionIntegral;
  __pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB2Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB2GaussAttractionIntegral, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral) < 0) __PYX_ERR(0, 1892, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB2GaussAttractionIntegral = &__pyx_type_6horton_6gbasis_4cext_GB2GaussAttractionIntegral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB4Integral) < 0) __PYX_ERR(0, 1927, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB4Integral.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB4Integral.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB4Integral.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB4Integral.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB4Integral, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB4Integral) < 0) __PYX_ERR(0, 1927, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB4Integral) < 0) __PYX_ERR(0, 1927, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB4Integral = &__pyx_type_6horton_6gbasis_4cext_GB4Integral;
  __pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB4Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt) < 0) __PYX_ERR(0, 2003, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB4ElectronRepulsionIntegralLibI, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt) < 0) __PYX_ERR(0, 2003, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt) < 0) __PYX_ERR(0, 2003, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt = &__pyx_type_6horton_6gbasis_4cext_GB4ElectronRepulsionIntegralLibInt;
  __pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB4Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt) < 0) __PYX_ERR(0, 2010, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB4ErfIntegralLibInt, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt) < 0) __PYX_ERR(0, 2010, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt) < 0) __PYX_ERR(0, 2010, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB4ErfIntegralLibInt = &__pyx_type_6horton_6gbasis_4cext_GB4ErfIntegralLibInt;
  __pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB4Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt) < 0) __PYX_ERR(0, 2021, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB4GaussIntegralLibInt, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt) < 0) __PYX_ERR(0, 2021, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt) < 0) __PYX_ERR(0, 2021, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB4GaussIntegralLibInt = &__pyx_type_6horton_6gbasis_4cext_GB4GaussIntegralLibInt;
  __pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB4Integral;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt) < 0) __PYX_ERR(0, 2036, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB4RAlphaIntegralLibInt, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt) < 0) __PYX_ERR(0, 2036, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt) < 0) __PYX_ERR(0, 2036, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt = &__pyx_type_6horton_6gbasis_4cext_GB4RAlphaIntegralLibInt;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB1DMGridFn) < 0) __PYX_ERR(0, 2052, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridFn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB1DMGridFn.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB1DMGridFn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB1DMGridFn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB1DMGridFn, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridFn) < 0) __PYX_ERR(0, 2052, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridFn) < 0) __PYX_ERR(0, 2052, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn = &__pyx_type_6horton_6gbasis_4cext_GB1DMGridFn;
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB1DMGridDensityFn, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridDensityFn = &__pyx_type_6horton_6gbasis_4cext_GB1DMGridDensityFn;
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn) < 0) __PYX_ERR(0, 2124, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB1DMGridGradientFn, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn) < 0) __PYX_ERR(0, 2124, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn) < 0) __PYX_ERR(0, 2124, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGradientFn = &__pyx_type_6horton_6gbasis_4cext_GB1DMGridGradientFn;
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn) < 0) __PYX_ERR(0, 2129, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB1DMGridGGAFn, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn) < 0) __PYX_ERR(0, 2129, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn) < 0) __PYX_ERR(0, 2129, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridGGAFn = &__pyx_type_6horton_6gbasis_4cext_GB1DMGridGGAFn;
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn) < 0) __PYX_ERR(0, 2134, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB1DMGridKineticFn, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn) < 0) __PYX_ERR(0, 2134, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn) < 0) __PYX_ERR(0, 2134, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridKineticFn = &__pyx_type_6horton_6gbasis_4cext_GB1DMGridKineticFn;
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn) < 0) __PYX_ERR(0, 2139, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB1DMGridHessianFn, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn) < 0) __PYX_ERR(0, 2139, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn) < 0) __PYX_ERR(0, 2139, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridHessianFn = &__pyx_type_6horton_6gbasis_4cext_GB1DMGridHessianFn;
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn.tp_base = __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridFn;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn) < 0) __PYX_ERR(0, 2144, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GB1DMGridMGGAFn, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn) < 0) __PYX_ERR(0, 2144, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn) < 0) __PYX_ERR(0, 2144, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_GB1DMGridMGGAFn = &__pyx_type_6horton_6gbasis_4cext_GB1DMGridMGGAFn;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_IterGB1) < 0) __PYX_ERR(0, 2154, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_IterGB1.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_IterGB1.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_IterGB1.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_IterGB1.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IterGB1, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_IterGB1) < 0) __PYX_ERR(0, 2154, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_IterGB1) < 0) __PYX_ERR(0, 2154, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_IterGB1 = &__pyx_type_6horton_6gbasis_4cext_IterGB1;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_IterGB2) < 0) __PYX_ERR(0, 2207, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_IterGB2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_IterGB2.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_IterGB2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_IterGB2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IterGB2, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_IterGB2) < 0) __PYX_ERR(0, 2207, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_IterGB2) < 0) __PYX_ERR(0, 2207, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_IterGB2 = &__pyx_type_6horton_6gbasis_4cext_IterGB2;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_IterGB4) < 0) __PYX_ERR(0, 2263, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_IterGB4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_IterGB4.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_IterGB4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_IterGB4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IterGB4, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_IterGB4) < 0) __PYX_ERR(0, 2263, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_IterGB4) < 0) __PYX_ERR(0, 2263, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_IterGB4 = &__pyx_type_6horton_6gbasis_4cext_IterGB4;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_IterPow1) < 0) __PYX_ERR(0, 2336, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_IterPow1.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_IterPow1.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_IterPow1.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_IterPow1.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IterPow1, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_IterPow1) < 0) __PYX_ERR(0, 2336, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_IterPow1) < 0) __PYX_ERR(0, 2336, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_IterPow1 = &__pyx_type_6horton_6gbasis_4cext_IterPow1;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext_IterPow2) < 0) __PYX_ERR(0, 2362, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext_IterPow2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext_IterPow2.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext_IterPow2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext_IterPow2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_IterPow2, (PyObject *)&__pyx_type_6horton_6gbasis_4cext_IterPow2) < 0) __PYX_ERR(0, 2362, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6horton_6gbasis_4cext_IterPow2) < 0) __PYX_ERR(0, 2362, __pyx_L1_error)
  __pyx_ptype_6horton_6gbasis_4cext_IterPow2 = &__pyx_type_6horton_6gbasis_4cext_IterPow2;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext___pyx_scope_struct__get_subset) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct__get_subset.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext___pyx_scope_struct__get_subset.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct__get_subset.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct__get_subset.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6horton_6gbasis_4cext___pyx_scope_struct__get_subset = &__pyx_type_6horton_6gbasis_4cext___pyx_scope_struct__get_subset;
  if (PyType_Ready(&__pyx_type_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 576, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr = &__pyx_type_6horton_6gbasis_4cext___pyx_scope_struct_1_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initcext(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initcext(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_cext(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_cext(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_cext(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'cext' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_cext(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cext", __pyx_methods, __pyx_k_C_extensions, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_horton__gbasis__cext) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "horton.gbasis.cext")) {
      if (unlikely(PyDict_SetItemString(modules, "horton.gbasis.cext", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "horton/gbasis/cext.pyx":24
 * 
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * np.import_array()
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":26
 * import numpy as np
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * cimport libc.string
 */
  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 26, __pyx_L1_error)

  /* "horton/gbasis/cext.pyx":43
 * cimport gbw
 * 
 * import atexit             # <<<<<<<<<<<<<<
 * 
 * from horton.log import log, biblio
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_atexit, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_atexit, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":45
 * import atexit
 * 
 * from horton.log import log, biblio             # <<<<<<<<<<<<<<
 * from horton.matrix import LinalgFactory, CholeskyLinalgFactory
 * from horton.cext import compute_grid_nucpot
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_log);
  __Pyx_GIVEREF(__pyx_n_s_log);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_log);
  __Pyx_INCREF(__pyx_n_s_biblio);
  __Pyx_GIVEREF(__pyx_n_s_biblio);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_biblio);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_horton_log, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_log, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_biblio); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_biblio, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":46
 * 
 * from horton.log import log, biblio
 * from horton.matrix import LinalgFactory, CholeskyLinalgFactory             # <<<<<<<<<<<<<<
 * from horton.cext import compute_grid_nucpot
 * from horton.utils import typecheck_geo
 */
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_LinalgFactory);
  __Pyx_GIVEREF(__pyx_n_s_LinalgFactory);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_LinalgFactory);
  __Pyx_INCREF(__pyx_n_s_CholeskyLinalgFactory);
  __Pyx_GIVEREF(__pyx_n_s_CholeskyLinalgFactory);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_s_CholeskyLinalgFactory);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_horton_matrix, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_LinalgFactory); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LinalgFactory, __pyx_t_3) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CholeskyLinalgFactory); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CholeskyLinalgFactory, __pyx_t_3) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":47
 * from horton.log import log, biblio
 * from horton.matrix import LinalgFactory, CholeskyLinalgFactory
 * from horton.cext import compute_grid_nucpot             # <<<<<<<<<<<<<<
 * from horton.utils import typecheck_geo
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_compute_grid_nucpot);
  __Pyx_GIVEREF(__pyx_n_s_compute_grid_nucpot);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_compute_grid_nucpot);
  __pyx_t_3 = __Pyx_Import(__pyx_n_s_horton_cext, __pyx_t_1, -1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_compute_grid_nucpot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_grid_nucpot, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "horton/gbasis/cext.pyx":48
 * from horton.matrix import LinalgFactory, CholeskyLinalgFactory
 * from horton.cext import compute_grid_nucpot
 * from horton.utils import typecheck_geo             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_n_s_typecheck_geo);
  __Pyx_GIVEREF(__pyx_n_s_typecheck_geo);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_s_typecheck_geo);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_horton_utils, __pyx_t_3, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_typecheck_geo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_typecheck_geo, __pyx_t_3) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":51
 * 
 * 
 * __all__ = [             # <<<<<<<<<<<<<<
 *     # boys
 *     'boys_function', 'boys_function_array',
 */
  __pyx_t_1 = PyList_New(43); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_boys_function);
  __Pyx_GIVEREF(__pyx_n_s_boys_function);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_boys_function);
  __Pyx_INCREF(__pyx_n_s_boys_function_array);
  __Pyx_GIVEREF(__pyx_n_s_boys_function_array);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_boys_function_array);
  __Pyx_INCREF(__pyx_n_s_cart_to_pure_low);
  __Pyx_GIVEREF(__pyx_n_s_cart_to_pure_low);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_cart_to_pure_low);
  __Pyx_INCREF(__pyx_n_s_compute_cholesky);
  __Pyx_GIVEREF(__pyx_n_s_compute_cholesky);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_compute_cholesky);
  __Pyx_INCREF(__pyx_n_s_fac);
  __Pyx_GIVEREF(__pyx_n_s_fac);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_fac);
  __Pyx_INCREF(__pyx_n_s_fac2);
  __Pyx_GIVEREF(__pyx_n_s_fac2);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_fac2);
  __Pyx_INCREF(__pyx_n_s_binom);
  __Pyx_GIVEREF(__pyx_n_s_binom);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_binom);
  __Pyx_INCREF(__pyx_n_s_get_shell_nbasis);
  __Pyx_GIVEREF(__pyx_n_s_get_shell_nbasis);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_get_shell_nbasis);
  __Pyx_INCREF(__pyx_n_s_get_max_shell_type);
  __Pyx_GIVEREF(__pyx_n_s_get_max_shell_type);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_get_max_shell_type);
  __Pyx_INCREF(__pyx_n_s_gpt_coeff);
  __Pyx_GIVEREF(__pyx_n_s_gpt_coeff);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_gpt_coeff);
  __Pyx_INCREF(__pyx_n_s_gb_overlap_int1d);
  __Pyx_GIVEREF(__pyx_n_s_gb_overlap_int1d);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_gb_overlap_int1d);
  __Pyx_INCREF(__pyx_n_s_nuclear_attraction_helper);
  __Pyx_GIVEREF(__pyx_n_s_nuclear_attraction_helper);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_nuclear_attraction_helper);
  __Pyx_INCREF(__pyx_n_s_cit);
  __Pyx_GIVEREF(__pyx_n_s_cit);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_cit);
  __Pyx_INCREF(__pyx_n_s_jfac);
  __Pyx_GIVEREF(__pyx_n_s_jfac);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_jfac);
  __Pyx_INCREF(__pyx_n_s_dtaylor);
  __Pyx_GIVEREF(__pyx_n_s_dtaylor);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_dtaylor);
  __Pyx_INCREF(__pyx_n_s_gob_cart_normalization);
  __Pyx_GIVEREF(__pyx_n_s_gob_cart_normalization);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_gob_cart_normalization);
  __Pyx_INCREF(__pyx_n_s_gob_pure_normalization);
  __Pyx_GIVEREF(__pyx_n_s_gob_pure_normalization);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_gob_pure_normalization);
  __Pyx_INCREF(__pyx_n_s_GOBasis);
  __Pyx_GIVEREF(__pyx_n_s_GOBasis);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_GOBasis);
  __Pyx_INCREF(__pyx_n_s_get_2index_slice);
  __Pyx_GIVEREF(__pyx_n_s_get_2index_slice);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_s_get_2index_slice);
  __Pyx_INCREF(__pyx_n_s_compute_diagonal);
  __Pyx_GIVEREF(__pyx_n_s_compute_diagonal);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_s_compute_diagonal);
  __Pyx_INCREF(__pyx_n_s_select_2index);
  __Pyx_GIVEREF(__pyx_n_s_select_2index);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_s_select_2index);
  __Pyx_INCREF(__pyx_n_s_GB2OverlapIntegral);
  __Pyx_GIVEREF(__pyx_n_s_GB2OverlapIntegral);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_s_GB2OverlapIntegral);
  __Pyx_INCREF(__pyx_n_s_GB2KineticIntegral);
  __Pyx_GIVEREF(__pyx_n_s_GB2KineticIntegral);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_n_s_GB2KineticIntegral);
  __Pyx_INCREF(__pyx_n_s_GB2ErfAttractionIntegral);
  __Pyx_GIVEREF(__pyx_n_s_GB2ErfAttractionIntegral);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_n_s_GB2ErfAttractionIntegral);
  __Pyx_INCREF(__pyx_n_s_GB2GaussAttractionIntegral);
  __Pyx_GIVEREF(__pyx_n_s_GB2GaussAttractionIntegral);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_n_s_GB2GaussAttractionIntegral);
  __Pyx_INCREF(__pyx_n_s_GB2NuclearAttractionIntegral);
  __Pyx_GIVEREF(__pyx_n_s_GB2NuclearAttractionIntegral);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_n_s_GB2NuclearAttractionIntegral);
  __Pyx_INCREF(__pyx_n_s_GB4Integral);
  __Pyx_GIVEREF(__pyx_n_s_GB4Integral);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_n_s_GB4Integral);
  __Pyx_INCREF(__pyx_n_s_GB4ElectronRepulsionIntegralLibI);
  __Pyx_GIVEREF(__pyx_n_s_GB4ElectronRepulsionIntegralLibI);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_n_s_GB4ElectronRepulsionIntegralLibI);
  __Pyx_INCREF(__pyx_n_s_GB4ErfIntegralLibInt);
  __Pyx_GIVEREF(__pyx_n_s_GB4ErfIntegralLibInt);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_n_s_GB4ErfIntegralLibInt);
  __Pyx_INCREF(__pyx_n_s_GB4GaussIntegralLibInt);
  __Pyx_GIVEREF(__pyx_n_s_GB4GaussIntegralLibInt);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_n_s_GB4GaussIntegralLibInt);
  __Pyx_INCREF(__pyx_n_s_GB4RAlphaIntegralLibInt);
  __Pyx_GIVEREF(__pyx_n_s_GB4RAlphaIntegralLibInt);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_n_s_GB4RAlphaIntegralLibInt);
  __Pyx_INCREF(__pyx_n_s_GB1DMGridDensityFn);
  __Pyx_GIVEREF(__pyx_n_s_GB1DMGridDensityFn);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_n_s_GB1DMGridDensityFn);
  __Pyx_INCREF(__pyx_n_s_GB1DMGridGradientFn);
  __Pyx_GIVEREF(__pyx_n_s_GB1DMGridGradientFn);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_n_s_GB1DMGridGradientFn);
  __Pyx_INCREF(__pyx_n_s_GB1DMGridGGAFn);
  __Pyx_GIVEREF(__pyx_n_s_GB1DMGridGGAFn);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_n_s_GB1DMGridGGAFn);
  __Pyx_INCREF(__pyx_n_s_GB1DMGridKineticFn);
  __Pyx_GIVEREF(__pyx_n_s_GB1DMGridKineticFn);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_n_s_GB1DMGridKineticFn);
  __Pyx_INCREF(__pyx_n_s_GB1DMGridHessianFn);
  __Pyx_GIVEREF(__pyx_n_s_GB1DMGridHessianFn);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_n_s_GB1DMGridHessianFn);
  __Pyx_INCREF(__pyx_n_s_GB1DMGridMGGAFn);
  __Pyx_GIVEREF(__pyx_n_s_GB1DMGridMGGAFn);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_n_s_GB1DMGridMGGAFn);
  __Pyx_INCREF(__pyx_n_s_IterGB1);
  __Pyx_GIVEREF(__pyx_n_s_IterGB1);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_n_s_IterGB1);
  __Pyx_INCREF(__pyx_n_s_IterGB2);
  __Pyx_GIVEREF(__pyx_n_s_IterGB2);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_n_s_IterGB2);
  __Pyx_INCREF(__pyx_n_s_IterGB4);
  __Pyx_GIVEREF(__pyx_n_s_IterGB4);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_n_s_IterGB4);
  __Pyx_INCREF(__pyx_n_s_iter_pow1_inc);
  __Pyx_GIVEREF(__pyx_n_s_iter_pow1_inc);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_n_s_iter_pow1_inc);
  __Pyx_INCREF(__pyx_n_s_IterPow1);
  __Pyx_GIVEREF(__pyx_n_s_IterPow1);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_n_s_IterPow1);
  __Pyx_INCREF(__pyx_n_s_IterPow2);
  __Pyx_GIVEREF(__pyx_n_s_IterPow2);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_n_s_IterPow2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all_2, __pyx_t_1) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":90
 * 
 * 
 * def boys_function(long m, double t):             # <<<<<<<<<<<<<<
 *     return boys.boys_function(m, t)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_1boys_function, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_boys_function, __pyx_t_1) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":94
 * 
 * 
 * def boys_function_array(long mmax, double t):             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[double] output = np.zeros(mmax+1)
 *     boys.boys_function_array(mmax, t, &output[0])
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_3boys_function_array, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_boys_function_array, __pyx_t_1) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":105
 * 
 * 
 * def cart_to_pure_low(np.ndarray[double] work_cart not None,             # <<<<<<<<<<<<<<
 *                      np.ndarray[double] work_pure not None,
 *                      long shell_type, long nant, long npost):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_5cart_to_pure_low, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cart_to_pure_low, __pyx_t_1) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":122
 *     void PyArray_ENABLEFLAGS(np.ndarray arr, int flags)
 * 
 * def compute_cholesky(GOBasis gobasis, GB4Integral gb4int, double threshold=1e-8, lf = None):             # <<<<<<<<<<<<<<
 *     cdef gbw.GB4IntegralWrapper* gb4w = NULL
 *     cdef vector[double]* vectors = NULL
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_7compute_cholesky, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_cholesky, __pyx_t_1) < 0) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":153
 * 
 * 
 * def fac(long n):             # <<<<<<<<<<<<<<
 *     return common.fac(n)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_9fac, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fac, __pyx_t_1) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":157
 * 
 * 
 * def fac2(long n):             # <<<<<<<<<<<<<<
 *     return common.fac2(n)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_11fac2, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fac2, __pyx_t_1) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":161
 * 
 * 
 * def binom(long n, long m):             # <<<<<<<<<<<<<<
 *     return common.binom(n, m)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_13binom, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_binom, __pyx_t_1) < 0) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":165
 * 
 * 
 * def get_shell_nbasis(long shell_type):             # <<<<<<<<<<<<<<
 *     result = common.get_shell_nbasis(shell_type)
 *     if result <= 0:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_15get_shell_nbasis, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_shell_nbasis, __pyx_t_1) < 0) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":172
 * 
 * 
 * def get_max_shell_type():             # <<<<<<<<<<<<<<
 *     return common.get_max_shell_type()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_17get_max_shell_type, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_max_shell_type, __pyx_t_1) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":176
 * 
 * 
 * def gpt_coeff(long k, long n0, long n1, double pa, double pb):             # <<<<<<<<<<<<<<
 *     return common.gpt_coeff(k, n0, n1, pa, pb)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_19gpt_coeff, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gpt_coeff, __pyx_t_1) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":180
 * 
 * 
 * def gb_overlap_int1d(long n0, long n1, double pa, double pb, double inv_gamma):             # <<<<<<<<<<<<<<
 *     return common.gb_overlap_int1d(n0, n1, pa, pb, inv_gamma)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_21gb_overlap_int1d, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gb_overlap_int1d, __pyx_t_1) < 0) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":184
 * 
 * 
 * def nuclear_attraction_helper(np.ndarray[double, ndim=1] work_g not None,             # <<<<<<<<<<<<<<
 *                               long n0, long n1, double pa, double pb, double cp,
 *                               double gamma_inv):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_23nuclear_attraction_helper, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_nuclear_attraction_helper, __pyx_t_1) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":191
 *     common.nuclear_attraction_helper(&work_g[0], n0, n1, pa, pb, cp, gamma_inv)
 * 
 * def cit(int i, double t, int m):             # <<<<<<<<<<<<<<
 *         return common.cit(i, t, m)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_25cit, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cit, __pyx_t_1) < 0) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":194
 *         return common.cit(i, t, m)
 * 
 * def jfac(int j, int n):             # <<<<<<<<<<<<<<
 *     return common.jfac(j, n)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_27jfac, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_jfac, __pyx_t_1) < 0) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":197
 *     return common.jfac(j, n)
 * 
 * def dtaylor(int n, double alpha, double t, double tfactor):             # <<<<<<<<<<<<<<
 *     return common.dtaylor(n, alpha, t, tfactor)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_29dtaylor, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtaylor, __pyx_t_1) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":206
 * 
 * 
 * def gob_cart_normalization(double alpha, np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_31gob_cart_normalization, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gob_cart_normalization, __pyx_t_1) < 0) __PYX_ERR(0, 206, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":212
 * 
 * 
 * def gob_pure_normalization(double alpha, long l):             # <<<<<<<<<<<<<<
 *     return gbasis.gob_pure_normalization(alpha, l)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_33gob_pure_normalization, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gob_pure_normalization, __pyx_t_1) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":378
 * 
 *     @classmethod
 *     def concatenate(cls, *gbs):             # <<<<<<<<<<<<<<
 *         '''Concatenate multiple basis objects into a new one.
 * 
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GBasis, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "horton/gbasis/cext.pyx":377
 *         del self._this
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def concatenate(cls, *gbs):
 *         '''Concatenate multiple basis objects into a new one.
 */
  __pyx_t_3 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GBasis->tp_dict, __pyx_n_s_concatenate, __pyx_t_3) < 0) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_6horton_6gbasis_4cext_GBasis);

  /* "horton/gbasis/cext.pyx":403
 * 
 *     @classmethod
 *     def from_hdf5(cls, grp):             # <<<<<<<<<<<<<<
 *         return cls(
 *             np.array(grp['centers']),
 */
  __Pyx_GetNameInClass(__pyx_t_3, (PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GBasis, __pyx_n_s_from_hdf5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "horton/gbasis/cext.pyx":402
 *         return cls(centers, shell_map, nprims, shell_types, alphas, con_coeffs)
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_hdf5(cls, grp):
 *         return cls(
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6horton_6gbasis_4cext_GBasis->tp_dict, __pyx_n_s_from_hdf5, __pyx_t_1) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6horton_6gbasis_4cext_GBasis);

  /* "horton/gbasis/cext.pyx":1690
 * #
 * 
 * def select_2index(GOBasis gobasis, long index0, long index2):             # <<<<<<<<<<<<<<
 *     assert index0 >= 0 and index0 < gobasis.nbasis
 *     assert index2 >= 0 and index2 < gobasis.nbasis
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_35select_2index, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_select_2index, __pyx_t_1) < 0) __PYX_ERR(0, 1690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1716
 * 
 * 
 * def compute_diagonal(GOBasis gobasis, np.ndarray[double, ndim=2] diagonal not             # <<<<<<<<<<<<<<
 *         None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_37compute_diagonal, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_diagonal, __pyx_t_1) < 0) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1736
 *             del gb4w
 * 
 * def get_2index_slice(GOBasis gobasis, long index0, long index2,             # <<<<<<<<<<<<<<
 *                         np.ndarray[double, ndim=2] slice not None):
 *     cdef ints.GB4ElectronRepulsionIntegralLibInt* gb4int = NULL
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_39get_2index_slice, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_2index_slice, __pyx_t_1) < 0) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1921
 * 
 * 
 * ints.libint2_static_init()             # <<<<<<<<<<<<<<
 * def libint2_static_cleanup():
 *     ints.libint2_static_cleanup()
 */
  libint2_static_init();

  /* "horton/gbasis/cext.pyx":1922
 * 
 * ints.libint2_static_init()
 * def libint2_static_cleanup():             # <<<<<<<<<<<<<<
 *     ints.libint2_static_cleanup()
 * atexit.register(libint2_static_cleanup)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_41libint2_static_cleanup, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_libint2_static_cleanup, __pyx_t_1) < 0) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "horton/gbasis/cext.pyx":1924
 * def libint2_static_cleanup():
 *     ints.libint2_static_cleanup()
 * atexit.register(libint2_static_cleanup)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_atexit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_register); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_libint2_static_cleanup); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "horton/gbasis/cext.pyx":2330
 * 
 * 
 * def iter_pow1_inc(np.ndarray[long, ndim=1] n not None):             # <<<<<<<<<<<<<<
 *     assert n.flags['C_CONTIGUOUS']
 *     assert n.shape[0] == 3
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_6horton_6gbasis_4cext_43iter_pow1_inc, NULL, __pyx_n_s_horton_gbasis_cext); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_iter_pow1_inc, __pyx_t_4) < 0) __PYX_ERR(0, 2330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "horton/gbasis/cext.pyx":1
 * # -*- coding: utf-8 -*-             # <<<<<<<<<<<<<<
 * # HORTON: Helpful Open-source Research TOol for N-fermion systems.
 * # Copyright (C) 2011-2019 The HORTON Development Team
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../../anaconda3/lib/python3.7/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init horton.gbasis.cext", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init horton.gbasis.cext");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* ArgTypeTest */
  static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* DictGetItem */
  #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
  #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectSetAttrStr */
  #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* KeywordStringCheck */
  static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
  static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
  static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* None */
  static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* SliceObject */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* SliceObject */
  static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* None */
  static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* None */
  static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* PyErrExceptionMatches */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* CallNextTpTraverse */
  static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
  static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ClassMethod */
  static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (__Pyx_CyFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* GetNameInClass */
  static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
    const Py_intptr_t neg_one = (Py_intptr_t) ((Py_intptr_t) 0 - (Py_intptr_t) 1), const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
    const Py_intptr_t neg_one = (Py_intptr_t) ((Py_intptr_t) 0 - (Py_intptr_t) 1), const_zero = (Py_intptr_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Py_intptr_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Py_intptr_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(Py_intptr_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Py_intptr_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Py_intptr_t) -1;
        }
    } else {
        Py_intptr_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (Py_intptr_t) -1;
        val = __Pyx_PyInt_As_Py_intptr_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Py_intptr_t");
    return (Py_intptr_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Py_intptr_t");
    return (Py_intptr_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* PrintOne */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
  static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CoroutineBase */
  #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
  static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
